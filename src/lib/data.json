{
  "app": {
    "config": "markdown-config.json",
    "cwd": "./",
    "src": "content/",
    "filePattern": "**/*.m*",
    "ignore": "",
    "dist": "src/lib/data.json",
    "display": true,
    "server": false,
    "port": 3001,
    "name": "markdown-json",
    "metadata": true,
    "version": "1.5.1"
  },
  "data": [
    {
      "id": "pages\\about",
      "contents": "<img src=\"http://www.gravatar.com/avatar/a2746d9ceb326e71181a6629031faf81?s=135\" alt=\"A photo of {{ site.author.name }}\" class=\"left_picture\"/>\n\n<p>{{ site.author.name }}</p>\n<p>I&#39;m a meteorologist based in Barcelona who likes maps and coding. <a href=\"/cv\">Take a look at my CV</a></p>\n<p>I opened this blog to talk about the things I&#39;m learning about python and JavaScript mapping.</p>\n<p><a href=\"http://geoexamples.blogspot.com.es/\">The old GeoExamples blog</a> is still working with all its posts.</p>\n",
      "layout": "page",
      "title": "About",
      "permalink": "/about/",
      "excerpt": "<p>{{ site.author.name }}</p>",
      "meta": {
        "relativePath": "pages\\about.html",
        "createdAt": "2021-05-05T21:42:45.226Z",
        "lastModified": "2021-05-05T21:42:45.226Z",
        "size": 529,
        "formattedSize": "529 Bytes"
      }
    },
    {
      "id": "pages\\cv",
      "contents": "<p><img src=\"http://www.gravatar.com/avatar/a2746d9ceb326e71181a6629031faf81?s=135\" alt=\"A photo of {{ site.author.name }}\" class=\"left_picture\"/> <strong>{{ site.author.name }}</strong> <br/> Birth: 1977 <br/> Residence: Barcelona <br/>Contact: rveciana(at)gmail.com</p>\n<h2 id=\"jobs\">Jobs</h2>\n<h3 id=\"adaptive-consulting\"><a href=\"http://weareadaptive.com\">Adaptive Consulting</a></h3>\n<ul>\n<li>Senior Front-end developer\n2019 - present<ul>\n<li>Complex app applications in the energy sector</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"servei-meteorològic-de-catalunya\"><a href=\"http://www.meteo.cat\">Servei Meteorològic de Catalunya</a></h3>\n<ul>\n<li><p>Research and modelization technician\n2013 – 2019</p>\n<ul>\n<li>Model postprocessing</li>\n<li>Roadcasting</li>\n</ul>\n</li>\n<li><p>IT Technician\n2011 – 2013</p>\n<ul>\n<li>Python</li>\n<li>Dojo</li>\n<li>TDD</li>\n<li>SCRUM</li>\n</ul>\n</li>\n<li><p>Comercial Services\n2005 – 2011</p>\n<ul>\n<li>PHP</li>\n<li>Java</li>\n<li>Postgres/PostGIS</li>\n<li>Mapping</li>\n</ul>\n</li>\n<li><p>Remote Sensing Technician\n2003 - 2004</p>\n<ul>\n<li>Radar and lightning detection systems</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"universitat-de-barcelona---department-of-astronomy-and-meteorology\">Universitat de Barcelona - <a href=\"http://www.am.ub.edu/\">Department of Astronomy and Meteorology</a></h3>\n<ul>\n<li>Creation of a <a href=\"https://en.wikipedia.org/wiki/Model_output_statistics\">MOS system</a>, radiosonde operator and <a href=\"http://www.infomet.am.ub.es/\">InfoMet</a> developement\n1999 - 2003</li>\n</ul>\n<h2 id=\"projects\">Projects</h2>\n<ul>\n<li><a href=\"http://www.sirwec.org/Papers/andorra/34.pdf\">Viamet</a>: Road status forecasting and monitorization</li>\n<li>ViGIS: Web based weather data viewer</li>\n<li>Sailing web sites: Barcelona&#39;s 470 class mundial weather information</li>\n<li><a href=\"http://xom.meteo.cat/\">XOM</a>: Collaborative weather observations web site</li>\n<li><a href=\"http://cordis.europa.eu/project/rcn/78361_en.html\">Marquis</a>: Multimodal air quality information service for general public</li>\n<li><a href=\"http://extranet.meteocat.com/eldw2007/contrib_PDF/ELDW07_SMC_VECIANA.pdf\">XDDE</a>: Lightning detection database and distribution system</li>\n<li>MeteocatClients: Advanced meteorological products website</li>\n</ul>\n<h2 id=\"education\">Education</h2>\n<h3 id=\"universitat-de-barcelona\"><a href=\"http://www.ub.edu/fisica/\">Universitat de Barcelona</a></h3>\n<p>Bachelor in Physics, Atmospheric Sciences and Meteorology</p>\n<h2 id=\"languages\">Languages</h2>\n<p>Catalan - Spanish - English - French (read and spoken) - Moroccan Arabic (begginer level)</p>\n<h2 id=\"interests\">Interests</h2>\n<ul>\n<li>Data visualization</li>\n<li><a href=\"http://www.geoexamples.com\">Learning about coding and mapping</a></li>\n<li><a href=\"http://www.geoexamples.com/projects\">Several personal coding projects</a></li>\n</ul>\n<h2 id=\"other\">Other</h2>\n<ul>\n<li><a href=\"https://scholar.google.es/citations?user=AExSTAwAAAAJ&amp;hl=ca\">Published articles</a></li>\n<li>Some slides from workshops: <a href=\"http://geoexamples.com/slides/ems2015/\">EMS2015</a> - <a href=\"http://geoexamples.com/Mapas-web-interactivos-con-D3js/\">SIGTE2015</a> - <a href=\"http://geoexamples.com/introduccion-python-geoespacial/\">SIGTE2014</a></li>\n</ul>\n",
      "layout": "page",
      "title": "CV",
      "permalink": "/cv/",
      "avoid_main_menu": true,
      "excerpt": "<h2 id=\"jobs\">Jobs</h2>",
      "meta": {
        "relativePath": "pages\\cv.html",
        "createdAt": "2021-05-05T21:42:45.227Z",
        "lastModified": "2021-05-05T21:42:45.227Z",
        "size": 2595,
        "formattedSize": "2.5 KB"
      }
    },
    {
      "id": "pages\\projects",
      "contents": "<p>Some of my personal projects:</p>\n<h2><a href=\"https://geoexamples.com/svg-path-properties/\">svg-path-properties</a></h2>\n<a href=\"https://geoexamples.com/svg-path-properties/\"><img class=\"teaser\" src=\"{{ site.baseurl }}/images/teasers/svg-path-properties.png\" alt=\"teaser\" itemprop=\"image\"></a>\nCalculate the length, point and tangent at distance for an SVG path, to use it with node, Canvas or SVG element\n\n<h2><a href=\"http://geoexamples.com/d3-raster-tools-docs/\">d3-raster-tools-docs</a></h2>\n<a href=\"http://geoexamples.com/d3-raster-tools-docs/\"><img class=\"teaser\" src=\"{{ site.baseurl }}/images/teasers/d3-raster-tools-docs.png\" alt=\"teaser\" itemprop=\"image\"></a>\nDrawing raster data using d3js is quite undocummented. This small documentation explains how to work with raster data and the d3js to create dynamic data visualizations.\n\n<p>Includes isolines, isobands, direct raster values drawing and streamlines, barbs and vector images from vectorial fields.</p>\n<h2><a href=\"http://geoexamples.com/d3-composite-projections/\">d3-composite-projections</a></h2>\n<a href=\"http://geoexamples.com/d3-composite-projections/\"><img class=\"teaser\" src=\"{{ site.baseurl }}/images/teasers/d3-composite-projections.png\" alt=\"teaser\" itemprop=\"image\"></a>\nSet of d3 projections for showing countries' distant lands together.\n\n<p>Drawing choropleth maps is difficult in some countries when parts of them are far away from the mainland. This set of projections work like the original <a href=\"https://github.com/mbostock/d3/wiki/Geo-Projections#albersUsa\">AlbersUSA projection</a>, putting all the regions together.</p>\n<h2><a href=\"https://basemaptutorial.readthedocs.org/en/latest/\">Basemap tutorial</a></h2>\n<a href=\"https://basemaptutorial.readthedocs.org/en/latest/\"><img class=\"teaser\" src=\"{{ site.baseurl }}/images/teasers/basemaptutorial.png\" alt=\"teaser\" itemprop=\"image\"></a>\nBasemap is a great tool for creating maps using python in a simple way. It’s a matplotlib extension, so it has got all its features to create data visualizations, and adds the geographical projections and some datasets to be able to plot coast lines, countries, and so on directly from the library.\n\n<p>Basemap has got <a href=\"http://matplotlib.org/basemap/index.html\">some documentation</a>, but some things are a bit more difficult to find. I started this documentation to extend a little the original documentation and examples, but it grew a little, and now covers many of the basemap possibilities.</p>\n<h2><a href=\"http://www.gdal.org/frmt_various.html#IRIS\">GDAL IRIS driver</a></h2>\n<a href=\"http://www.gdal.org/frmt_various.html#IRIS\"><img class=\"teaser\" src=\"{{ site.baseurl }}/images/teasers/gdal-iris-driver.png\" alt=\"teaser\" itemprop=\"image\"></a>\nVAISALA/SIGMET weather radars have their own format to store the generated products, so opening them can be quite difficult without their software.\n\n<p>This driver, integrated in the default <a href=\"http://www.gdal.org/\">GDAL library</a>, makes possible to open these files from any software using GDAL, including <a href=\"http://www.qgis.org\">QGIS</a> and the <a href=\"http://trac.osgeo.org/gdal/wiki/GdalOgrInPython\">GDAL Python bindings</a>.</p>\n",
      "layout": "page",
      "title": "Projects",
      "permalink": "/projects/",
      "excerpt": "<p>Some of my personal projects:</p>",
      "meta": {
        "relativePath": "pages\\projects.html",
        "createdAt": "2021-05-05T21:42:45.227Z",
        "lastModified": "2021-05-05T21:42:45.227Z",
        "size": 3207,
        "formattedSize": "3.1 KB"
      }
    },
    {
      "id": "posts\\d3\\2015-05-12-d3-composite-projections",
      "contents": "<p>Some countries have regions sparse around the globe, which adds difficulties when drawing maps for them.</p>\n<p>D3 already had the <a href=\"http://bl.ocks.org/mbostock/5545680\">albersUsa</a> projection that solved this problem by creating a composed projection, moving Alaska and Hawaii close to the main part of the USA.\nBut the other countries didn&#39;t have a projectino like this. That&#39;s why I made <a href=\"http://rveciana.github.io/d3-composite-projections/\">this library</a>.</p>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\"></script>\n<script src=\"https://raw.githubusercontent.com/rveciana/d3-composite-projections/0.0.3/composite-projections.min.js\"></script>\n<div id=\"example_map\"></div>\n\n<script>\n\n  var width = 700,\n      height = 500;\n\n  var projection = d3.geo.conicConformalFrance();\n  var path = d3.geo.path()\n      .projection(projection);\n\n  var svg = d3.select(\"#example_map\").append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"transform\",\"translate(-130)\");\n\n  d3.json(\"https://cdn.rawgit.com/rveciana/5919944/raw/b1f826319231c3e06d6e8548bc947ca2c29dc9e8/france.json\", function(error, regions) {\n  var land = topojson.feature(regions, regions.objects.regions);\n\n  svg.selectAll(\"path\")\n    .data(land.features)\n    .enter()\n    .append(\"path\")\n    .attr(\"d\", path)\n    .style(\"stroke\",\"#000\")\n    .style(\"stroke-width\",\".5px\")\n    .style(\"fill\",\"#aca\")\n    .on(\"mouseover\", function(d,i) {\n      d3.select(this)\n        .transition()\n        .style(\"fill\", \"red\");\n      })\n    .on(\"mouseout\", function(d,i) {\n      d3.select(this)\n        .transition()\n        .style(\"fill\", \"#aca\");\n      });\n\n\n  svg\n    .append(\"path\")\n      .style(\"fill\",\"none\")\n      .style(\"stroke\",\"#000\")\n      .attr(\"d\", projection.getCompositionBorders());\n\n\n});\n\n</script>\n\n<p>It adds the composite projection for:</p>\n<ul>\n<li><a href=\"http://bl.ocks.org/rveciana/472b7749352554ca4b68\">Spain</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/02eb5b83848e0b06fa8e\">France</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/aec08199d43759e98afe\">Portugal</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/170a76b8dc1f9cfd8b2d\">USA</a></li>\n</ul>\n<p>With a function that draws a border between the composition zones by returning an SVG path.</p>\n<p>There is an example for each region, linked in the list above.</p>\n<p><a href=\"http://rveciana.github.io/d3-composite-projections/\">The library web page</a> explains the usage and installation/testing</p>\n<p>If you are going to use it, need more regions/countries or find an error, please leave a comment here.</p>\n",
      "layout": "post",
      "title": "D3 Composite Projections",
      "date": "2015-05-12T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "projections",
        "library",
        "npm",
        "bower",
        "nodejs"
      ],
      "teaser": "d3-composite-projections.png",
      "excerpt": "<p>Some countries have regions sparse around the globe, which adds difficulties when drawing maps for them.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2015-05-12-d3-composite-projections.html",
        "createdAt": "2021-05-05T21:42:45.228Z",
        "lastModified": "2021-05-05T21:42:45.228Z",
        "size": 2749,
        "formattedSize": "2.7 KB"
      }
    },
    {
      "id": "posts\\d3\\2015-03-30-d3-mapping-presentation-girona",
      "contents": "<p>Every year, <a href=\"http://www.sigte.udg.edu/\">SIGTE</a> organizes workshops and a <a href=\"http://www.sigte.udg.edu/jornadassiglibre/\">conference about Free GIS software</a> in <a href=\"http://www.openstreetmap.org/#map=15/41.9750/2.8234\">Girona</a>.</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-mapping-presentation-girona.png\"/>\n\n<p>This year I gave a workshop about D3js mapping.</p>\n<p>The slides (in Spanish) are here: <a href=\"http://rveciana.github.io/Mapas-web-interactivos-con-D3js/\">http://rveciana.github.io/Mapas-web-interactivos-con-D3js/</a></p>\n<p>The examples can be found at my bl.ocks.org space: <a href=\"http://bl.ocks.org/rveciana\">http://bl.ocks.org/rveciana</a> named with the prefix <code>JSL 2015</code>.</p>\n",
      "layout": "post",
      "title": "D3js mapping presentation at Girona",
      "date": "2015-03-30T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "SIGTE",
        "presentation"
      ],
      "teaser": "d3-mapping-presentation-girona.png",
      "excerpt": "<p>Every year, <a href=\"http://www.sigte.udg.edu/\">SIGTE</a> organizes workshops and a <a href=\"http://www.sigte.udg.edu/jornadassiglibre/\">conference about Free GIS software</a> in <a href=\"http://www.openstreetmap.org/#map=15/41.9750/2.8234\">Girona</a>.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2015-03-30-d3-mapping-presentation-girona.html",
        "createdAt": "2021-05-05T21:42:45.228Z",
        "lastModified": "2021-05-05T21:42:45.228Z",
        "size": 836,
        "formattedSize": "836 Bytes"
      }
    },
    {
      "id": "posts\\d3\\2015-05-29-d3-maps-nodejs",
      "contents": "<p>Can D3js be used as a script to create SVG or PNG files? There are many examples out there for creating aweseome maps made with D3, but made to be run with the browser. It would be great to make scripts to create the same files to include them in reports, or to edit them using Inkscape, as <a href=\"http://kartograph.org/about/kartograph.py/\">Kartograph used to do</a>.</p>\n<p>I started looking how to do this when testing <a href=\"http://geoexamples.com/d3-composite-projections/\">d3-composite-projections</a>, so I could create a map to check if the library was working ok without opening the browser.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>As usual, the code can be found at <a href=\"https://github.com/rveciana/geoexamples/tree/master/d3js/d3js_nodejs\">GitHub</a>.</p>\n<p>To run the examples, you need the <em>package.json</em> file copied in the working dir and execute:</p>\n<pre><code>npm install</code></pre><p>There is an external dependency to be able to create the <em>Canvas</em> examples: the <em>Cairo</em> library. <a href=\"https://github.com/Automattic/node-canvas/wiki/_pages\">Here you can find how to install it in different platforms</a>.</p>\n<p>About a moth ago, the library <em>jsdom</em> didn&#39;t work with the last version in nodejs, but now this seems to be solved. If you get the error message, just fix the problem by changing the line in package.json to:</p>\n<pre><code>&quot;jsdom&quot;: &quot;&lt;=3.1.2&quot;</code></pre><h2 id=\"canvas\">Canvas</h2>\n<p>The easiest way to explore the use of d3 and nodejs is creating PNG files using the <a href=\"https://github.com/Automattic/node-canvas\">node-canvas library</a>.</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nodejs/png-example.png\" width=\"70%\"/>\n\n<p>The script for generating the PNG above:</p>\n<p>{% highlight js %}\nvar fs = require(&#39;fs&#39;);\nvar Canvas = require(&#39;canvas&#39;);\nvar d3 = require(&#39;d3&#39;);\nvar topojson = require(&#39;topojson&#39;);</p>\n<p>var width = 900,\nheight = 500;</p>\n<p>var Image = Canvas.Image\n, canvas = new Canvas(width, height)\n, context = canvas.getContext(&#39;2d&#39;);</p>\n<p>var projection = d3.geo.mercator();\nvar path = d3.geo.path()\n.projection(projection);</p>\n<p>var data = JSON.parse(fs.readFileSync(__dirname +&quot;/world-50m.json&quot;, &#39;utf8&#39;));\nvar land = topojson.feature(data, data.objects.land);</p>\n<p>context.strokeStyle = &#39;#888&#39;;\ncontext.fillStyle = &#39;#aaa&#39;;</p>\n<p>context.beginPath();\npath.context(context)(land);\ncontext.fill();</p>\n<p>context.beginPath();\npath.context(context)(land);\ncontext.stroke();</p>\n<p>var out = fs.createWriteStream(__dirname + &#39;/test.png&#39;);\nvar stream = canvas.pngStream();\nstream.on(&#39;data&#39;, function(chunk){\nout.write(chunk);\n});</p>\n<p>stream.on(&#39;end&#39;, function(){\nconsole.log(&#39;saved png&#39;);\n});</p>\n<p>{% endhighlight %}</p>\n<p>The main parts of the script are:</p>\n<ol>\n<li>Requiring the libraries</li>\n<li>Creating the Image, Canvas and context objects with <em>Canvas.Image</em>, <em>new Canvas(width, height)</em> and <em>context = canvas.getContext(&#39;2d&#39;)</em></li>\n<li>Creating the map with d3 as usual</li>\n</ol>\n<ul>\n<li>Note how are the JSON files loaded locally, using <em>fs.readFileSync</em>.</li>\n<li><em>\\</em>_dirname_ gives the absolute path to the script, which is mandatory to open the file</li>\n</ul>\n<h2 id=\"svg\">SVG</h2>\n<p>To create an SVG file, a DOM has to be created before. This is done using the <em>jsdom</em> library and it&#39;s a bit more complicated.</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nodejs/svg-example.svg\" width=\"70%\"/>\n\n<p>The script for generating the SVG above:</p>\n<p>{% highlight js %}\nvar jsdom = require(&#39;jsdom&#39;);\nvar fs = require(&#39;fs&#39;);\nvar topojson = require(&#39;topojson&#39;);</p>\n<p>jsdom.env({\nhtml: &quot;<html><body></body></html>&quot;,\nscripts: [\n__dirname + &#39;/node_modules/d3/d3.min.js&#39;\n],\ndone:</p>\n<p>function (err, window) {</p>\n<pre><code>var width = 900,\nheight = 500;\n\n\nvar projection = window.d3.geo.mercator();\nvar path = window.d3.geo.path()\n  .projection(projection);\n\nvar svg = window.d3.select(&quot;body&quot;).append(&quot;svg&quot;)\n    .attr(&quot;width&quot;, width)\n    .attr(&quot;height&quot;, height)\n    .attr(&quot;xmlns&quot;, &quot;http://www.w3.org/2000/svg&quot;);\n\nvar data = JSON.parse(fs.readFileSync(__dirname +&quot;/world-50m.json&quot;, &#39;utf8&#39;));\n\nvar land = topojson.feature(data, data.objects[&#39;land&#39;]);\n  svg\n    .datum(land)\n    .append(&quot;path&quot;)\n    .attr(&quot;class&quot;, &quot;land&quot;)\n    .style(&quot;fill&quot;,&quot;#aca&quot;)\n    .style(&quot;stroke&quot;,&quot;#000&quot;)\n    .attr(&quot;d&quot;, path);\n\n  fs.writeFileSync(&quot;test.svg&quot;, window.d3.select(&quot;body&quot;).html());\n  }\n});</code></pre><p>{% endhighlight %}</p>\n<p>There are four parts in this scripts:</p>\n<ol>\n<li>The <em>requires</em> section. All the used libraries are imported, excepting for D3, since D3 must be used as in the browser to be able to detect the DOM.</li>\n<li><em>jsdom.env</em> is called. This will initialize the DOM so d3 can work as in the browser. I had some problems, solved using <a href=\"http://www.ciiycode.com/0HNJNUPePjXq/jsdomenv-local-jquery-script-doesnt-work\">this page</a></li>\n</ol>\n<ul>\n<li>The second argument of the function calls the libraries to include. Is here where d3 is loaded.</li>\n<li>Note the use of <em>\\</em>_dirname_ variable to get the absolute path. It did&#39;t work otherwise. Some webs recommend using <em>documentRoot: __dirname</em>, but it didn&#39;t work for me.</li>\n</ul>\n<ol start=\"3\">\n<li>The function after the external JavaScript files are loaded is the regular d3 script, with a pair of differences:</li>\n</ol>\n<ul>\n<li>d3 must be invoked from the <em>window</em> object so it loads properly</li>\n<li>The SVG element must have <em>.attr(&quot;xmlns&quot;, &quot;<a href=\"http://www.w3.org/2000/svg&quot;\">http://www.w3.org/2000/svg&quot;</a>);</em> so the browser can load the generated file. When creating it dynamically (in a browser), this is not necessary</li>\n<li>The JSON files can be stored locally and read with <em>fs.readFileSync</em> using absolute paths again</li>\n</ul>\n<ol start=\"4\">\n<li>The generated file is written using <em>fs.writeFileSync</em></li>\n</ol>\n<h2 id=\"performance\">Performance</h2>\n<p>Cool, I can create d3 maps from the command line, but is it fast?</p>\n<p>I made a script that makes the 900x500px map for each country in the world-50m topojson (235 files).</p>\n<ul>\n<li>In my computer lasts more or less 30s</li>\n<li>Without drawing the land around the country, the time is 9s</li>\n<li>I made another script that uses an <a href=\"http://stackoverflow.com/questions/5050265/javascript-node-js-is-array-foreach-asynchronous\">asyncronous approach</a>, but the performace is worse, about 50s in my computer</li>\n</ul>\n<p>I haven&#39;t compared it with other libaries such as using <a href=\"http://geospatialpython.com/2010/12/rasterizing-shapefiles-2-pure-python.html\">Python + PIL</a> with the same data, but the results seem quite good. And you can generate SVGs too!</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nodejs/Gambia.png\" width=\"70%\"/>\n\n<p>The output file for Gambia</p>\n<p>The script:\n{% highlight js %}\nvar fs = require(&#39;fs&#39;);\nvar Canvas = require(&#39;canvas&#39;);\nvar d3 = require(&#39;d3&#39;);\nvar topojson = require(&#39;topojson&#39;);\nvar slug = require(&#39;slug&#39;);</p>\n<p>var width = 900,\nheight = 500;</p>\n<p>var data = JSON.parse(fs.readFileSync(<strong>dirname +&quot;/world-50m.json&quot;, &#39;utf8&#39;));\nvar names = d3.tsv.parse(fs.readFileSync(</strong>dirname +&quot;/world-country-names.tsv&quot;, &#39;utf8&#39;));</p>\n<p>var land = topojson.feature(data, data.objects[&#39;land&#39;]);\nvar countries = topojson.feature(data, data.objects.countries);</p>\n<p>countries = countries.features.filter(function(d) {\nreturn names.some(function(n) {\nif (d.id == n.id) return d.name = n.name;\n});\n}).sort(function(a, b) {\nreturn a.name.localeCompare(b.name);\n});</p>\n<p>countries.forEach(function(d){\nconsole.info(&#39;Generating &#39; + d.id + &#39; -&gt; &#39; + d.name );\nvar bounds = d3.geo.bounds(d),\ndx = bounds[1][0] - bounds[0][0],\ndy = bounds[1][1] - bounds[0][1],\nx = (bounds[0][0] + bounds[1][0]) / 2,\ny = (bounds[0][1] + bounds[1][1]) / 2,\nscale = 20 / Math.max(dx / width, dy / height);</p>\n<p>var projection = d3.geo.equirectangular()\n.center(d3.geo.centroid(d))\n.scale(scale);</p>\n<p>var Image = Canvas.Image\n, canvas = new Canvas(width, height)\n, context = canvas.getContext(&#39;2d&#39;);</p>\n<p>var path = d3.geo.path()\n.projection(projection);</p>\n<pre><code>    context.strokeStyle = &#39;#f00&#39;;\n    context.fillStyle = &#39;#aca&#39;;\n\n    context.beginPath();\n    path.context(context)(land);\n    context.fill();\n\n    context.fillStyle = &#39;#f22&#39;;\n\n    context.beginPath();\n    path.context(context)(d);\n    context.fill();\n\n    context.beginPath();\n    path.context(context)(d);\n    context.stroke();\n\nvar out = fs.createWriteStream(&#39;/tmp/&#39; + slug(d.name) + &#39;.png&#39;);\nvar stream = canvas.pngStream();\nstream.on(&#39;data&#39;, function(chunk){\n  out.write(chunk);\n});\n\nstream.on(&#39;end&#39;, function(){\n  console.log(&#39;saved png&#39;);\n});</code></pre><p>});\n{% endhighlight %}</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://www.ciiycode.com/0HNJNUPePjXq/jsdomenv-local-jquery-script-doesnt-work\">How to initialize jsdom</a></li>\n<li><a href=\"https://github.com/Automattic/node-canvas\">node-canvas library</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5050265/javascript-node-js-is-array-foreach-asynchronous\">How to iterate asyncronously</a></li>\n<li><a href=\"http://geospatialpython.com/2010/12/rasterizing-shapefiles-2-pure-python.html\">Mapping with python and PIL</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Creating maps using D3js and nodejs",
      "date": "2015-05-29T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "npm",
        "nodejs"
      ],
      "teaser": "d3-node.png",
      "excerpt": "<p>Can D3js be used as a script to create SVG or PNG files? There are many examples out there for creating aweseome maps made with D3, but made to be run with the browser. It would be great to make scripts to create the same files to include them in reports, or to edit them using Inkscape, as <a href=\"http://kartograph.org/about/kartograph.py/\">Kartograph used to do</a>.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2015-05-29-d3-maps-nodejs.html",
        "createdAt": "2021-05-05T21:42:45.229Z",
        "lastModified": "2021-05-05T21:42:45.229Z",
        "size": 8782,
        "formattedSize": "8.6 KB"
      }
    },
    {
      "id": "posts\\d3\\2015-07-01-GeoQuiz",
      "contents": "<p>My older daughter Farida is studying the Catalan regions, called <em>comarques</em>. There are some online resources to test your knowledge about the regions, but we didn&#39;t like them, so we decided to design and code one.</p>\n<p>You can check the game: <a href=\"http://geoexamples.com/comarques/\">http://geoexamples.com/comarques/</a> and take a look to its code at <a href=\"https://github.com/rveciana/comarques/tree/gh-pages\">GitHub</a></p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-geoquiz/screenshot.png\" width=\"70%\"/>\n\n<h2 id=\"the-main-structure\">The main structure</h2>\n<p>After looking several examples on creating a quiz using JavaScript, I finally got the simplest code to do this kind of things.</p>\n<p>So we need two functions. I&#39;ve called them <em>drawOptions</em> and <em>checkAnswer</em>. The code would be more or less:</p>\n<p>{% highlight js %}\nvar checkAnswer = function(correct_answer, selected_answer){\n//Check the answer, draw the results, whatever, here\ndrawOptions();\n};</p>\n<p>var drawOptions = function(){\nbutton\n.on(&quot;click&quot;, function(d){checkAnswer(id_question, d);});\n};</p>\n<p>drawOptions();\n{% endhighlight %}</p>\n<p>Basically, the first thing to do is drawing the region to ask for, and the buttons with the options. All this is made in the <em>drawOptions</em> function, we will se how a bit later.</p>\n<p>The buttons will have an event that will call the <em>checkAnswer</em> function, passing the selected option and the correct result. This function will add the score, change the score bar and finish the game if all the regions have been asked.</p>\n<p>Finally, <em>drawOptions()</em> has to be called at the beginning so the game can start.</p>\n<h2 id=\"detailed-code\">Detailed code</h2>\n<p>The complete code can be found at <a href=\"https://github.com/rveciana/comarques/tree/gh-pages\">GitHub</a>, but the most important parts are:</p>\n<h1 id=\"creating-the-svg\">Creating the svg</h1>\n<p>{% highlight js %}\nvar width = 580,\nheight = 450;</p>\n<p>var projection = d3.geo.conicConformal()\n.center([3.6,41.5])\n.scale(12000);</p>\n<p>var path = d3.geo.path()\n.projection(projection);</p>\n<p>var svg = d3.select(&quot;#map&quot;).append(&quot;svg&quot;)\n.attr(&quot;width&quot;, width)\n.attr(&quot;height&quot;, height);</p>\n<p>var results = svg.append(&quot;g&quot;)\n.attr(&quot;id&quot;, &quot;results&quot;)\n.attr(&quot;transform&quot;, &quot;translate(140,390)&quot;);</p>\n<p>results.append(&quot;text&quot;)\n.attr(&quot;dy&quot;, &quot;-0.25em&quot;)\n.attr(&quot;dx&quot;, &quot;.0em&quot;)\n.style(&quot;font-family&quot;,&quot;&#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif&quot;)\n.text(&quot;Progrés&quot;);</p>\n<p>results.append(&quot;rect&quot;)\n.attr(&quot;class&quot;,&quot;pendingAnswers&quot;)\n.attr(&quot;width&quot;,300)\n.attr(&quot;height&quot;,20)\n.attr(&quot;x&quot;,0)\n.style(&quot;fill&quot;, &quot;#888&quot;);</p>\n<p>results.append(&quot;rect&quot;)\n.attr(&quot;class&quot;,&quot;negativeAnswers&quot;)\n.attr(&quot;width&quot;,0)\n.attr(&quot;height&quot;,20)\n.attr(&quot;x&quot;,0)\n.style(&quot;fill&quot;, &quot;#f44&quot;);</p>\n<p>results.append(&quot;rect&quot;)\n.attr(&quot;class&quot;,&quot;positiveAnswers&quot;)\n.attr(&quot;width&quot;,0)\n.attr(&quot;height&quot;,20)\n.attr(&quot;x&quot;,0)\n.style(&quot;fill&quot;, &quot;#4f4&quot;);\n{% endhighlight %}</p>\n<p>As you can see, I create the svg with the desired size here, and add three <em>rect</em> elements, that will be the score bar. All them are in a group called <em>results</em></p>\n<h1 id=\"creating-the-base-map\">Creating the base map</h1>\n<p>To create the base map, I just draw a simple polygon map as usual:\n{% highlight js %}\nd3.json(&quot;comarques.topo.json&quot;, function(error, comarques) {\nvar land = topojson.feature(comarques, comarques.objects.comarques);\nvar capitals = topojson.feature(comarques, comarques.objects.capitals);</p>\n<p>svg.selectAll(&quot;path&quot;)\n.data(land.features)\n.enter()\n.append(&quot;path&quot;)\n.attr(&quot;d&quot;, path)\n.style(&quot;stroke&quot;,&quot;#555&quot;)\n.style(&quot;stroke-width&quot;,&quot;.5px&quot;)\n.style(&quot;fill&quot;, &quot;#cdc&quot;);</p>\n<p>var ids = d3.range(1,42);\nvar remaining_ids = ids.slice();</p>\n<p>var positive_answers = 0;\nvar negative_answers = 0;\n{% endhighlight %}</p>\n<ul>\n<li>The land and the capitals are both in the same topojson.</li>\n<li><em>ids</em> will have all the regions id nmbers (they go from 1 to 41)</li>\n<li><em>remaining_ids</em> is the same array as the ids, but when a region is put as a question, it&#39;s removed from it. This way, we know which regions haven&#39;t been asked yet, and have all the numbers so the random buttons can be generated from <em>ids</em>. I found that using <em>slice</em> is the fastest way to clone an array.</li>\n<li><em>positive_answers</em> and <em>negative_answers</em> will have the scored points</li>\n</ul>\n<h1 id=\"drawoptions\">drawOptions()</h1>\n<p>{% highlight js %}\nvar drawOptions = function(){\nvar id_question = remaining_ids[Math.floor(Math.random() * remaining_ids.length)];\nremaining_ids.splice(remaining_ids.indexOf(id_question),1);</p>\n<pre><code>options = [];\nwhile (options.length &lt; 3) {\n  id = Math.round(Math.random() * (ids.length-1));\n  if(options.indexOf(id) == -1 &amp;&amp; id != id_question)\n  options.push(id);\n}\noptions.push(id_question);\noptions\n      .sort(function(a,b){\n        return d3.ascending(land.features[a].properties.name ,land.features[b].properties.name);\n      });</code></pre><p>{% endhighlight %}\nThis first part takes the region to ask from the <em>remaining_ids</em> array, and three more false answers to create the buttons.\n{% highlight js %}\n//Drawing the answer buttons\nvar selection = d3.select(&quot;#answers&quot;)\n.selectAll(&quot;.answer&quot;)\n.data(options, function(d){return d;});</p>\n<pre><code>selection\n  .enter()\n  .append(&quot;button&quot;)\n  .attr(&quot;class&quot;,&quot;answer&quot;)\n  .text(function(d){return land.features[d].properties.name;})\n  .on(&quot;click&quot;, function(d){checkAnswer(id_question, d);});\n\nselection\n  .exit()\n  .remove();</code></pre><p>{% endhighlight %}\nHere, the buttons are drawn. Note the use of <em>selection.exit()</em>. This will remove the buttons when the new question comes, since the <em>options</em> will be different.\n{% highlight js %}\n//Drawing the selected region\nvar land_feature = land.features[id_question]\nvar capitals_feature = capitals.features.filter(\nfunction(d){\nif (d.properties.id_comarca == parseInt(land_feature.properties.comarca)) return d;\n});</p>\n<pre><code>var selectionLand = svg.selectAll(&quot;.selectedPath&quot;)\n  .data([land_feature], function(d){return d.properties.comarca;});\n\n  selectionLand\n  .enter()\n  .append(&quot;path&quot;)\n  .attr(&quot;d&quot;, path)\n  .attr(&quot;class&quot;, &quot;selectedPath&quot;)\n  .style(&quot;stroke-width&quot;,&quot;.5px&quot;)\n  .style(&quot;stroke&quot;,&quot;#555&quot;)\n  .style(&quot;fill&quot;, &quot;#ffa000&quot;)\n  .style(&quot;opacity&quot;, 0)\n  .transition()\n  .duration(1000)\n  .style(&quot;opacity&quot;, 1);\n\n  selectionLand\n  .exit()\n  .transition()\n  .duration(1000)\n  .style(&quot;opacity&quot;, 0)\n  .remove();\n\n  var selectionCircle = svg.selectAll(&quot;.capitalLocation&quot;)\n      .data(capitals_feature, function(d){return d.properties.id_comarca;});\n\n  selectionCircle\n      .enter()\n      .append(&quot;circle&quot;)\n      .attr(&quot;class&quot;, &quot;capitalLocation&quot;)\n      .attr(&quot;r&quot;, 2)\n      .attr(&quot;transform&quot;,function(d){return&quot;translate(&quot;+projection(d.geometry.coordinates)+&quot;)&quot;;})\n      .style(&quot;fill&quot;, &quot;black&quot;)\n      .style(&quot;opacity&quot;, 0)\n      .transition()\n      .duration(1000)\n      .style(&quot;opacity&quot;, 1);\n\n    selectionCircle\n      .exit()\n      .transition()\n      .duration(1000)\n      .style(&quot;opacity&quot;, 0)\n      .remove();\n\n  var selectionText = svg.selectAll(&quot;.capitalName&quot;)\n    .data(capitals_feature, function(d){return d.properties.id_comarca;});\n\n  selectionText\n    .enter()\n    .append(&quot;text&quot;)\n    .attr(&quot;class&quot;,&quot;capitalName&quot;)\n    .attr(&quot;transform&quot;, function(d) { return &quot;translate(&quot; + projection(d.geometry.coordinates) + &quot;)&quot;; })\n    .attr(&quot;dy&quot;, &quot;.35em&quot;)\n    .attr(&quot;dx&quot;, &quot;.35em&quot;)\n    .style(&quot;font-family&quot;,&quot;&#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif&quot;)\n    .text(function(d) {return d.properties.name;})\n    .style(&quot;opacity&quot;, 0)\n    .transition()\n    .duration(1000)\n    .style(&quot;opacity&quot;, 1);\n\n  selectionText\n    .exit()\n    .transition()\n    .duration(1000)\n    .style(&quot;opacity&quot;, 0)\n    .remove();</code></pre><p>};\n{% endhighlight %}\nFinally, the selected region is drawn, along with the point indicating the capital name and the capital nema. Again, the <em>selection.exit()</em> method is used to remove the elements when a new one is created.</p>\n<p>The first lines match the region id with the capital.</p>\n<h1 id=\"checkanswer\">checkAnswer</h1>\n<p>{% highlight js %}\nvar checkAnswer = function(correct_answer, selected_answer){\nif (correct_answer == selected_answer){\npositive_answers++;\nvar selectionLand = svg.select(&quot;.selectedPath&quot;)\n.style(&quot;fill&quot;,&quot;#4f4&quot;);\n} else {\nnegative_answers++;\nvar selectionLand = svg.select(&quot;.selectedPath&quot;)\n.style(&quot;fill&quot;,&quot;#f44&quot;);\n}\n{% endhighlight %}\nThis is the part where the answer is checked. Of course, when the answer is correct, the counter of correct answers goes up (and the same for wrong answers). The region color is changed too depending on the answer.</p>\n<p>The next steps simply change the status bar or put the final result at the end.\n{% highlight js %}\nsvg.select(&quot;.positiveAnswers&quot;)\n.transition()\n.duration(1000)\n.attr(&quot;x&quot;, 0)\n.attr(&quot;width&quot;,function(){return 300.0*(positive_answers/41);});</p>\n<pre><code>  svg.select(&quot;.negativeAnswers&quot;)\n    .transition()\n    .duration(1000)\n    .attr(&quot;x&quot;, function(){return positive_answers * 300/41;})\n    .attr(&quot;width&quot;,function(){return 300.0*(negative_answers/41);});\n\n  if (remaining_ids.length &gt; 0){\n    //Draw the next question\n    drawOptions();\n  } else {\n    svg.selectAll(&quot;.selectedPath&quot;)\n      .transition()\n      .duration(1000)\n      .remove();\n    svg.selectAll(&quot;.capitalLocation&quot;)\n      .transition()\n      .duration(1000)\n      .remove();\n    svg.selectAll(&quot;.capitalName&quot;)\n      .transition()\n      .duration(1000)\n      .remove();\n\n    d3.selectAll(&quot;#answers&quot;)\n      .style(&#39;opacity&#39;,1)\n      .transition()\n      .duration(1000)\n      .style(&#39;opacity&#39;,0)\n      .remove();\n\n    //Draw the results\n    svg.append(&#39;text&#39;)\n    .style(&quot;font-family&quot;,&quot;&#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif&quot;)\n    .style(&quot;font-size&quot;,&quot;30px&quot;)\n    .style(&quot;font-weight&quot;, &quot;bold&quot;)\n    .attr(&quot;y&quot;, 225)\n    .attr(&quot;x&quot;,80)\n    .text(&quot;Has acabat!&quot;)\n    .style(&quot;opacity&quot;,0)\n    .transition()\n    .duration(2000)\n    .style(&quot;opacity&quot;,1);\n\n    svg.append(&#39;text&#39;)\n    .style(&quot;font-family&quot;,&quot;&#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif&quot;)\n    .style(&quot;font-size&quot;,&quot;30px&quot;)\n    .style(&quot;font-weight&quot;, &quot;bold&quot;)\n    .style(&quot;fill&quot;, &quot;#4f4&quot;)\n    .style(&quot;stroke&quot;, &quot;#000&quot;)\n    .attr(&quot;y&quot;, 255)\n    .attr(&quot;x&quot;,80)\n    .text(function(){ return &quot;Respostes correctes: &quot;+positive_answers;})\n    .style(&quot;opacity&quot;,0)\n    .transition()\n    .duration(2000)\n    .delay(2000)\n    .style(&quot;opacity&quot;,1);\n\n    svg.append(&#39;text&#39;)\n    .style(&quot;font-family&quot;,&quot;&#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif&quot;)\n    .style(&quot;font-size&quot;,&quot;30px&quot;)\n    .style(&quot;font-weight&quot;, &quot;bold&quot;)\n    .style(&quot;fill&quot;, &quot;#f44&quot;)\n    .style(&quot;stroke&quot;, &quot;#000&quot;)\n    .attr(&quot;y&quot;, 285)\n    .attr(&quot;x&quot;,80)\n    .text(function(){ return &quot;Respostes equivocades: &quot;+negative_answers;})\n    .style(&quot;opacity&quot;,0)\n    .transition()\n    .duration(2000)\n    .delay(4000)\n    .style(&quot;opacity&quot;,1);\n  }</code></pre><p>};\n{% endhighlight %}\nIf there are still elements into <em>remaining_ids</em>, the <em>drawOptions</em> function is called again. If the game has ended, the buttons and selected region and capital are removed and the final results are displayed with some delay.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>The most important failure in the example are the transitions when a click is done before the current transition ends (which will happen for sure when a kid plays). I&#39;ve tried with <a href=\"http://bl.ocks.org/mbostock/5d8039fb983a29e2ad49\">named transitions</a> and <a href=\"https://github.com/mbostock/d3/wiki/Selections#interrupt\">interrupting the transitions</a> but none of them work.</p>\n<p>An other cool thing to do would be separating the code from the exact questions, making it able to create games for any empty map (to learn the World countries or any country regions). The only mandatory thing would be to have always the same topojson format.</p>\n",
      "layout": "post",
      "title": "A GeoQuiz made with D3js",
      "date": "2015-07-01T00:00:00.000Z",
      "teaser": "d3-geoquiz.png",
      "categories": "d3",
      "tags": [
        "game"
      ],
      "excerpt": "<p>My older daughter Farida is studying the Catalan regions, called <em>comarques</em>. There are some online resources to test your knowledge about the regions, but we didn&apos;t like them, so we decided to design and code one.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2015-07-01-GeoQuiz.html",
        "createdAt": "2021-05-05T21:42:45.229Z",
        "lastModified": "2021-05-05T21:42:45.229Z",
        "size": 12242,
        "formattedSize": "12.0 KB"
      }
    },
    {
      "id": "posts\\d3\\2015-09-25-d3-creating-EUROSTAT-maps",
      "contents": "<p>Eurostat gives a lot of statistical data, most of the times georeferred. This makes easy to create nive maps telling stories about any topic you may be interested in.</p>\n<p>Unfortunately, I didn&#39;t find an easy way to do that using D3js, so I wrote <a href=\"http://geoexamples.blogspot.com.es/2013/10/using-eurostats-data-with-d3js.html\">a post some time ago on how to do it</a>. The idea worked, but I think that it can be done really easily, without python scripts, just by downloading Excel sheets and exporting to CSV. Also, with the new <a href=\"http://geoexamples.com/d3-composite-projections/\">d3-composite-projections</a> version, a convenient projection has been added to show the island and terrotories away from Europe, but that appear at the Eurostat data.</p>\n<p>The idea is creating the maps as <a href=\"http://ec.europa.eu/eurostat/statistics-explained/images/a/ae/Urban_rural_typology_for_NUTS3_new.png\">Eurostat does</a>:</p>\n<p><a href=\"http://ec.europa.eu/eurostat/statistics-explained/images/a/ae/Urban_rural_typology_for_NUTS3_new.png\"><img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/d3-nuts/example.png\"/></a></p>\n<p>You can see the <a href=\"http://bl.ocks.org/rveciana/e3c02fe71f8dc63041ea\">working example at bl.ocks.org</a>, and it looks like this:</p>\n<img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/d3-nuts/final-map.png\"/>\n\n<h2 id=\"downloading-some-sample-data\">Downloading some sample data</h2>\n<p>To create a map, you will need two data sources:</p>\n<ol>\n<li>The regions where the data belongs. The regions are coded in a system called NUTS (Nomenclature of territorial units for statistics)</li>\n<li>The data you want to represent at each region, such as <em>Greenhouse gas emisions</em>, <em>murders</em>, etc</li>\n</ol>\n<h3 id=\"nuts-regions\">NUTS regions</h3>\n<p>Getting the regions and using them in TopoJSON format is not very straigth forward, so I did it for you.</p>\n<p>The files are at [this gist][<a href=\"https://gist.github.com/rveciana/5919944%5D\">https://gist.github.com/rveciana/5919944]</a>, with the names nuts0.json, nuts1.json, etc. You can use <em>rawgit</em> to get the files without downloading them. To get the nuts3 topojson:</p>\n<pre><code>https://cdn.rawgit.com/rveciana/5919944/raw/19dc3e37a6ca5ebb05d3a2d96a1f499d6cc3411c/nuts3.json</code></pre><p>If you want to know how to generate these TopoJSONs, you can check <a href=\"d3-EUROSTAT-topojson.html\">the next post</a></p>\n<h3 id=\"getting-the-information-data\">Getting the information data</h3>\n<p>To get the data, you have first to decide which data to use. In my case, I have chosen to map the amount of people at risk of poverty or social exclusion. To do it, <a href=\"http://ec.europa.eu/eurostat\">from the main page</a>, I have done:</p>\n<p>Population and Social conditions -&gt; Income and living conditions -&gt; Main Tables -&gt; People at risk of poverty or social exclusion by NUTS 2 regions.</p>\n<p>From there, choose <em>Tables, maps and graphs interface</em>:</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nuts/table.png\"/>\n\n<p>Choose the <em>More data in the source dataset</em> button:</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nuts/source-dataset.png\"/>\n\n<p>Then, the GEO <em>+ button</em>:</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nuts/geo.png\"/>\n\n<p>Once there, ask to get not just the region names, but the labels too, so the topoJSON codes can be used. Don&#39;t forget to click the <em>update</em> button:</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nuts/labels.png\"/>\n\n<p>Now you can click the <em>download</em> button and ask to have the labels in a separate column from the name (or doing it yourself will be a mess, believe me):</p>\n<img src=\"{{ site.baseurl }}/images/d3/d3-nuts/download.png\"/>\n\n<p>Oce the excel file is generated, export it to CSV. In our case, two tables are generated. I have chosen the first one <em>percentage of total population</em>, and remove the other parts.</p>\n<p>Why not generating CSV files directly if there is an option? Because it will generate a row for each year and region, making things much more difficult.</p>\n<h2 id=\"creating-the-map\">Creating the map</h2>\n<p>To create the map, I&#39;ve done it as usual, but loading a the csv with the variable data. This way, just by changing the csv, creating new maps is very easy. The working example is at <a href=\"http://bl.ocks.org/rveciana/e3c02fe71f8dc63041ea\">bl.ocks.org</a>.</p>\n<p>Some things deserve a little explanation.</p>\n<h3 id=\"creating-the-color-scale\">Creating the color scale:</h3>\n<p>{% highlight js %}\nvar scale = d3.scale.quantize().domain([10,60]).range(colorbrewer.OrRd[9]);\n{% endhighlight %}\nI have used the <em>colorbrewer2</em> library, which gives many color scales already made. You just have to choose how many colors to use (9 in the example) and the scale name (OrRd). Choosing one is really simple. Just go to the <a href=\"http://colorbrewer2.org/\">library page</a> and play with the examples until you have the codes.</p>\n<p>The domain indicates the maximum and minumum values for the scale. Since no country has values lower than 10 or higher than 60, I forced these limits.</p>\n<h3 id=\"choosing-the-color-to-paint-the-region\">Choosing the color to paint the region:</h3>\n<p>{% highlight js %}\n.style(&quot;fill&quot;,function(d){\nvar value = data[d.id];\nif (isNaN(value)){\nvalue = data[d.id.substring(0,2)];\n}\nif (isNaN(value)){\nreturn &quot;#fff&quot;;\n}</p>\n<pre><code>  return scale(value);\n  })</code></pre><p>{% endhighlight %}</p>\n<p>I took this data because it&#39;s not perfect. Some data is given by NUTS2 and other by NUTS1. This is, some is given by country and other by quite large regions.</p>\n<ul>\n<li><em>data</em> has all the csv data as a structure. When choosing the key <em>d.id</em>, the data for the current region should be used.</li>\n<li>The regions with NUTS1 data won&#39;t work, since the code is for the whole country, not for the region. Fortunately, the NUTS2 codes include the NUTS1 code. This is <em>UK12</em> belongs to <em>UK</em>. Thats why I used the conditional. If no value is found, we try with the first two characters, and the NUTS1 code may match then.</li>\n<li>In some cases, the region is not found, since it&#39;s not in the CSV file. A white color is then returned.</li>\n</ul>\n<p>To show a small tooltip, a similar solution is used.</p>\n<p>The whole code, running at <a href=\"http://bl.ocks.org/rveciana/e3c02fe71f8dc63041ea\">bl.ocks.org</a> is this one:</p>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n\n<p>.border {\nstroke: #000;\nfill: none;</p>\n<p>}\n.graticule {\nfill: none;\nstroke: #777;\nstroke-width: .5px;\nstroke-opacity: .5;\n}</p>\n<p>div.tooltip {\nposition: absolute;\ntext-align: center;\nwidth: 84px;\nheight: 64px;\npadding: 2px;\nfont: 12px sans-serif;\nbackground: lightgrey;\nborder: 0px;\nborder-radius: 8px;\npointer-events: none;\n}\n</style></p>\n<body>\n<h1>People at risk of poverty or social exclusion by NUTS 2 regions</h1>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\"></script>\n<script src=\"http://d3js.org/colorbrewer.v1.min.js\"></script>\n<script src=\"https://cdn.rawgit.com/rveciana/d3-composite-projections/v0.2.0/composite-projections.min.js\"></script>\n<script>\n\n<p>var div = d3.select(&quot;body&quot;).append(&quot;div&quot;)\n.attr(&quot;class&quot;, &quot;tooltip&quot;)\n.style(&quot;opacity&quot;, 0);</p>\n<p>var width = 600,\nheight = 500;</p>\n<p>var projection = d3.geo.conicConformalEurope();\nvar graticule = d3.geo.graticule();</p>\n<p>var path = d3.geo.path()\n.projection(projection);</p>\n<p>var scale = d3.scale.quantize().domain([10,60]).range(colorbrewer.OrRd[9]);\nvar svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)\n.attr(&quot;width&quot;, width)\n.attr(&quot;height&quot;, height);</p>\n<pre><code>svg.append(&quot;path&quot;)\n    .datum(graticule)\n    .attr(&quot;class&quot;, &quot;graticule&quot;)\n    .attr(&quot;d&quot;, path);</code></pre><p>d3.json(&quot;<a href=\"https://cdn.rawgit.com/rveciana/5919944/raw//nuts2.json&quot;\">https://cdn.rawgit.com/rveciana/5919944/raw//nuts2.json&quot;</a>, function(error, europe) {\nd3.csv(&quot;povertry_rate.csv&quot;, function(error, povrate) {\nvar land = topojson.feature(europe, europe.objects.nuts2);</p>\n<pre><code>data = {};\npovrate.forEach(function(d) {\n  data[d.GEO] = d[&#39;2013&#39;];\n});\n\nconsole.info(data);\nsvg.selectAll(&quot;path&quot;)\n  .data(land.features)\n  .enter()\n  .append(&quot;path&quot;)\n  .attr(&quot;d&quot;, path)\n  .style(&quot;stroke&quot;,&quot;#000&quot;)\n  .style(&quot;stroke-width&quot;,&quot;.5px&quot;)\n  .style(&quot;fill&quot;,function(d){\n        var value = data[d.id];\n        if (isNaN(value)){\n          value = data[d.id.substring(0,2)];\n        }\n        if (isNaN(value)){\n          return &quot;#fff&quot;;\n        }\n\n        return scale(value);\n        })\n  .on(&quot;mouseover&quot;, function(d,i) {\n        var value = data[d.id];\n        if (isNaN(value)){\n          value = data[d.id.substring(0,2)];\n        }\n        div.transition()\n            .duration(200)\n            .style(&quot;opacity&quot;, 0.9);\n        div.html(&quot;&lt;b&gt;&quot;+d.properties.name+&quot;&lt;/b&gt;&lt;br/&gt;&quot; + value + &quot;%&quot;)\n            .style(&quot;left&quot;, (d3.event.pageX) + &quot;px&quot;)\n            .style(&quot;top&quot;, (d3.event.pageY - 28) + &quot;px&quot;);\n    })\n  .on(&quot;mouseout&quot;, function(d,i) {\n      div.transition()\n          .duration(500)\n          .style(&quot;opacity&quot;, 0);\n    });\n\n    svg\n      .append(&quot;path&quot;)\n        .style(&quot;fill&quot;,&quot;none&quot;)\n        .style(&quot;stroke&quot;,&quot;#000&quot;)\n        .attr(&quot;d&quot;, projection.getCompositionBorders());</code></pre><p>});\n});</p>\n<p></script>\n{% endhighlight %}</p>\n",
      "layout": "post",
      "title": "Mapping EUROSTAT data with D3js",
      "date": "2015-09-25T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "EUROSTAT",
        "Open Data"
      ],
      "teaser": "d3-nuts2.png",
      "excerpt": "<p>Eurostat gives a lot of statistical data, most of the times georeferred. This makes easy to create nive maps telling stories about any topic you may be interested in.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2015-09-25-d3-creating-EUROSTAT-maps.html",
        "createdAt": "2021-05-05T21:42:45.230Z",
        "lastModified": "2021-05-05T21:42:45.230Z",
        "size": 9224,
        "formattedSize": "9.0 KB"
      }
    },
    {
      "id": "posts\\d3\\2015-09-25-d3-EUROSTAT-topojson",
      "contents": "<img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/d3-nuts/example.png\"/>\n\n<p><a href=\"http://ec.europa.eu/eurostat/statistics-explained/images/a/ae/Urban_rural_typology_for_NUTS3_new.png\">click to see the original map by EUROSTAT</a></p>\n<h2 id=\"creating-nuts-regions-file\">Creating NUTS regions file</h2>\n<p><a href=\"http://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units\">Download the NUTS regions in shp format</a></p>\n<p>It&#39;s interesting to have the population associated to each region, so the absolute number of some statistics can be changed to density (number of crimes to crimes/100000 people, for instance). The population data can be downloaded from <a href=\"http://appsso.eurostat.ec.europa.eu/nui/show.do?dataset=demo_r_pjanaggr3&amp;lang=en\">this url</a>:</p>\n<p>Select the population columns\nFormat-&gt;numerical format-&gt;number 11.000.638 --&gt; 11000638\nSave as csv\nRemove headers and appended data</p>\n<p>The header will be:</p>\n<pre><code>GEO,GEO(L)/TIME,2010,2011,2012,2013,2014</code></pre><p>And I changed it to</p>\n<pre><code>id,name,pop2010,pop2011,pop2012,pop2013,pop2014</code></pre><p>The reason is that the <em>topojson</em> program failed to take numeric column names (2013, in our case), and the complex <em>GEO(L)/TIME</em>.</p>\n<p>To separate the data into different files for each NUTS level, so the file to load from the browser is smaller:</p>\n<pre><code>ogr2ogr  -where &quot;STAT_LEVL_=1&quot; nuts1.shp NUTS_RG_01M_2013.shp</code></pre><p>For level 1. To get all the levels, levels 0,1,2,3 must be generated.</p>\n<p>To create the final topoJSON for nuts level 1, type:</p>\n<pre><code>topojson -e demo_r_pjanaggr3.csv --id-property NUTS_ID,id -p nuts_id=NUTS_ID,name,population=+pop2013 -o nuts1.json -- nuts1.shp</code></pre><h2 id=\"using-the-generated-files\">Using the generated files</h2>\n<p>If yo don&#39;t want to create the same topojson, you can just get them from <a href=\"https://gist.github.com/rveciana/5919944\">this GIST</a>, with the names nuts0.json, nuts1.json, etc.</p>\n<p><a href=\"http://bl.ocks.org/rveciana/4bcc5750c776c22ffda6\">Here</a>, you can see a <a href=\"http://bl.ocks.org/rveciana/4bcc5750c776c22ffda6\">working example</a> too, that gives this result: <img  src=\"{{ site.baseurl }}/images/d3/d3-nuts/example-gist.png\"/></p>\n",
      "layout": "post",
      "title": "Mapping EUROSTAT data with D3js: Creating the TopoJSON",
      "date": "2015-09-25T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "EUROSTAT",
        "Open Data"
      ],
      "teaser": "d3-nuts.png",
      "excerpt": "<p><a href=\"http://ec.europa.eu/eurostat/statistics-explained/images/a/ae/Urban_rural_typology_for_NUTS3_new.png\">click to see the original map by EUROSTAT</a></p>",
      "meta": {
        "relativePath": "posts\\d3\\2015-09-25-d3-EUROSTAT-topojson.html",
        "createdAt": "2021-05-05T21:42:45.230Z",
        "lastModified": "2021-05-05T21:42:45.230Z",
        "size": 2340,
        "formattedSize": "2.3 KB"
      }
    },
    {
      "id": "posts\\d3\\2016-05-25-d3-map-scrollers",
      "contents": "<p>Scrollers are a cool way to show data visualizations in general, and maps where things happen in particular. I&#39;ve been wanting to do one since I watched <a href=\"http://www.nytimes.com/newsgraphics/2013/10/13/russia/\">this Mike Bostock example</a>, and now I&#39;ve finally learned how to do it.</p>\n<h2 id=\"the-simplest-example\">The simplest example</h2>\n<p>The example is taken from <a href=\"http://bl.ocks.org/tonyhschu/af64df46f7b5b760fc1db1260dd6ec6a\">this Tony Chu&#39;s block</a>. Scroll down to see how the Hayan typhoon track:</p>\n<iframe src=\"https://cdn.rawgit.com/rveciana/eeaa71659adbc88dc4165eaf99dcb9be/raw/4812ed4d7330335bed355a082742367b484b3048/index.html\" width=\"700\" height=\"400\" scrolling=\"yes\"></iframe>\n\n<p>The code is quite simple. Le&#39;ts see first the css part:</p>\n<p>{% highlight css %}\n#container {\nposition: relative;\nz-index: 100;\nheight: 100vh;\noverflow: scroll;\n}\n#sticky {\nposition: absolute;\ntop: 5vh;\nright: 0;\nwidth: 48%;\nz-index: 50;\n}\n.panel {\nwidth: 100%;\npadding-left: 20px;\npadding-top: 25vh;\npadding-bottom: 25vh;\n}\n.panel p {padding-right: 50%;}\n.panel:first-child {padding-top: 5vh;}\n.panel:last-child {padding-bottom: 45vh;}\n{% endhighlight %}</p>\n<ul>\n<li><em>container</em> is will be the place where both the text will be placed. Note that we are using <a href=\"http://www.w3schools.com/cssref/css_units.asp\">vh units</a>, which are in % of the viewport</li>\n<li><em>sticky</em> is the place where the map will be placed. As its name indicates, it won&#39;t move. Note that is placed at the right part of the screen with the <em>right</em> tag.</li>\n<li>The <em>divs</em> with the class <em>panel</em> will have the content that scrolls. Note the <em>padding-top</em> and <em>padding-bottom</em> that are with vh units. This will be useful to maintain a separation when texts are short. Two secions with a single word would still make a nice visualization. The <em>padding-right</em> asserts that the content will be in two columns.</li>\n</ul>\n<p>The html would be like this, but including the text:\n{% highlight html %}</p>\n<div id=\"sticky\"></div>\n<div id=\"container\">\n  <div id=\"content\">\n    <div class=\"panel\">\n      <p>Your text here...</p>\n    </div>\n\n</div>\n{% endhighlight %}\n\n<ul>\n<li>Note the <em>content</em> node. It will be used to calculate the vertical length of all the sections (panel classed divs)</li>\n</ul>\n<p>Let&#39;s see now the relevant JavaScript parts:\n{% highlight javascript %}\nvar WIDTH = 0.9 _ window.innerWidth / 2;\nvar HEIGHT = 0.9 _ window.innerHeight;</p>\n<p>var svg = d3.select(&quot;#sticky&quot;).append(&quot;svg&quot;)\n.attr(&#39;width&#39;, WIDTH)\n.attr(&#39;height&#39;, HEIGHT);</p>\n<p>var body = d3.select(&#39;body&#39;).node();\nvar container = d3.select(&#39;#container&#39;);\nvar content = d3.select(&#39;#content&#39;);</p>\n<p>var SCROLL_LENGTH = content.node().getBoundingClientRect().height - HEIGHT;\n{% endhighlight %}</p>\n<ul>\n<li>The initial svg map width and height of the visible window are taken from the <em>window</em> object properties. The map will be half of the window width and all the height</li>\n<li><em>SCROLL_LENGTH</em> is the amount of pixels you can scroll down. Since some content is already shown, it has to be calculated as the whole content height minus the viewport height which is already visible</li>\n</ul>\n<p>{% highlight javascript %}\nvar hayanPathScale = d3.scale.linear()\n.domain([0, SCROLL_LENGTH])\n.range([0, haiyanPath.node().getTotalLength()])\n.clamp(true);\n{% endhighlight %}</p>\n<ul>\n<li>The map is created as in <a href=\"http://bl.ocks.org/rveciana/8464690\">this example</a>. The main change is that the animation won&#39;t be an interval but will be controlled by the scroller</li>\n<li>The scale relates which portion of the path must be drawn for each scrolled pixel. So the domain will be the scroll length (we can move from 0 to SCROLL_LENGTH pixels down the page), and the range is the path length (we can draw from 0 to all the path pixels)</li>\n</ul>\n<p>{% highlight javascript %}\ncontainer\n.on(&quot;scroll.scroller&quot;, function() {\nnewScrollTop = container.node().scrollTop\n});</p>\n<p>var setDimensions = function() {\n...\n}</p>\n<p>var render = function() {\nif (scrollTop !== newScrollTop) {\nscrollTop = newScrollTop\n...<br>}</p>\n<p>window.requestAnimationFrame(render)\n}\nwindow.requestAnimationFrame(render)</p>\n<p>window.onresize = setDimensions\n{% endhighlight %}</p>\n<p>Those are the functinos that controll the window resizing and scroll:</p>\n<ul>\n<li>When the <em>scroll.scroll</em> event happens in the <em>container</em> div, a new <em>newScrollTop</em> variable value is calculated</li>\n<li><em>setDimensions</em> holds all what has to be done when the window is resized. The map has to look the same, so the scale must be changed, the size of the svg too, etc.</li>\n<li><em>render</em> is the function that acts when the scroll is moved. The render is only done when <em>newScrollTop</em> changes, so we are not rendering the same all the time if the scroll doesn&#39;t change. Note that at the end of the function, the function is called again using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">window.requestAnimationFrame(render)</a>. The function is called too when the script is first loaded.</li>\n<li><em>setDimensions</em> is fired with the <em>window.onresize</em> event</li>\n</ul>\n<p>With these functions we can control a simple scroller.</p>\n<p>How does the <em>render</em> function look like:\n{% highlight javascript %}\nif (scrollTop !== newScrollTop) {\nscrollTop = newScrollTop</p>\n<p>haiyanPath\n.style(&#39;stroke-dashoffset&#39;, function(d) {\nreturn haiyanPath.node().getTotalLength() - hayanPathScale(scrollTop) + &#39;px&#39;;\n});</p>\n<p>}</p>\n<p>window.requestAnimationFrame(render)\n{% endhighlight %}</p>\n<ul>\n<li>After checking if the newScrollTop has changed, the only thing to change is the <em>stroke-dashoffset</em> attribute. Take a look at <a href=\"http://www.alolo.co/blog/2013/11/14/progressively-draw-svg-paths-with-d3js\">this web page</a> to see how does it work</li>\n</ul>\n<p>Now, let&#39;s see how the <em>setDimensions</em> function work:</p>\n<p>{% highlight javascript %}\nWIDTH = window.innerWidth / 2;\nHEIGHT = window.innerHeight;\nSCROLL_LENGTH = content.node().getBoundingClientRect().height - HEIGHT;</p>\n<p>projection.scale(6*(WIDTH + 1) / 2 / Math.PI)\n.translate([WIDTH / 2, HEIGHT / 2]);</p>\n<p>path.projection(projection);</p>\n<p>landPath.attr(&quot;d&quot;, path);\ncountriesPath.attr(&quot;d&quot;, path);\ngraticulePath.attr(&quot;d&quot;, path);</p>\n<p>haiyanPath\n.attr(&quot;d&quot;,pathLine(track));</p>\n<p>hayanPathScale\n.domain([0, SCROLL_LENGTH])\n.range([0, haiyanPath.node().getTotalLength()]);</p>\n<p>haiyanPath\n.style(&#39;stroke-dasharray&#39;, function(d) {\nvar l = d3.select(this).node().getTotalLength();\nreturn l + &#39;px, &#39; + l + &#39;px&#39;;\n})\n.style(&#39;stroke-dashoffset&#39;, function(d) {\nreturn d3.select(this).node().getTotalLength() - hayanPathScale(scrollTop) + &#39;px&#39;;\n});\n{% endhighlight %}</p>\n<ul>\n<li>The new WIDTH, HEIGHT and SCROLL_LENGTH valeus are calculated</li>\n<li>The projection must be changed to adapt its scale to the new dimensions. Then the <em>path</em> function must have the new projection</li>\n<li>The map layers must be redrawn using the new path function, by changing the <em>d</em> attribute</li>\n<li>The Hayan path is a bit more tricky, since not all the changes can be done at once<ul>\n<li>First, the new path is set. This will make it with a changed length.</li>\n<li>The scale has to be changed, so it takes the new path length. Bothe the domain and range are affected, since the scroll size changed too</li>\n<li>Finally, the <em>stroke-dasharray</em> and <em>stroke-dashoffset</em> have to change too, with the new scroll and length values</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><p><a href=\"http://www.nytimes.com/newsgraphics/2013/10/13/russia/\">Mike Bostock&#39;s visualization I liked in first place</a></p>\n</li>\n<li><p><a href=\"http://bl.ocks.org/tonyhschu/af64df46f7b5b760fc1db1260dd6ec6a\">Tony Chu&#39;s block where I took the basic code from</a></p>\n</li>\n<li><p><a href=\"http://www.r2d3.us/visual-intro-to-machine-learning-part-1/\">A nice multi-section scroller</a></p>\n</li>\n<li><p><a href=\"http://vallandingham.me/scroller.html\">So You Want to Build A Scroller</a>, another good tutorial by Jim Vallandingham</p>\n</li>\n<li><p><a href=\"http://bl.ocks.org/rveciana/8463775\">How to create the Hayan Typhoon map</a></p>\n</li>\n<li><p><a href=\"http://bl.ocks.org/rveciana/8464690\">Hayan animated path original example</a></p>\n</li>\n<li><p><a href=\"http://bl.ocks.org/rveciana/eeaa71659adbc88dc4165eaf99dcb9be\">The block for the first example</a></p>\n</li>\n<li><p><a href=\"http://www.alolo.co/blog/2013/11/14/progressively-draw-svg-paths-with-d3js\">Progressively drawing SVG paths with D3.js</a></p>\n</li>\n<li><p>Another animated paths example: <a href=\"http://bl.ocks.org/rveciana/7664109\">Animated arabic kufic calligraphy with D3</a></p>\n</li>\n</ul>\n",
      "layout": "post",
      "title": "D3 map scrollers",
      "date": "2016-05-25T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "scroll"
      ],
      "teaser": "d3-map-scrollers.png",
      "description": "Tutorial about scrolled animated maps",
      "thumbnail": "/images/d3/d3-scroller/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>Scrollers are a cool way to show data visualizations in general, and maps where things happen in particular. I&apos;ve been wanting to do one since I watched <a href=\"http://www.nytimes.com/newsgraphics/2013/10/13/russia/\">this Mike Bostock example</a>, and now I&apos;ve finally learned how to do it.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2016-05-25-d3-map-scrollers.html",
        "createdAt": "2021-05-05T21:42:45.231Z",
        "lastModified": "2021-05-05T21:42:45.231Z",
        "size": 8396,
        "formattedSize": "8.2 KB"
      }
    },
    {
      "id": "posts\\d3\\2016-12-19-d3-raster-tools-docs",
      "contents": "<p>I&#39;ve written a [short tutorial]({{ site.baseurl }}/d3-raster-tools-docs) explaining how to work with raster data and <a href=\"https://d3js.org/\">d3js</a> to create dynamic data visualizations.</p>\n<p>Usually, the examples show how to place points or polygons on a map. Those examples are working with <a href=\"http://gis.stackexchange.com/questions/57142/what-is-the-difference-between-vector-and-raster-data-models\">vectorial data</a>. But many datasets are rasters, so the lack of examples and libraries made difficult to use <a href=\"https://d3js.org/\">d3js</a> with meteorological data, <a href=\"https://en.wikipedia.org/wiki/Digital_elevation_model\">DEM data</a>, etc.</p>\n<p>Some common representations could be easily done with existing libraries, others didn&#39;t have available tools. This tutorial will show how to use:</p>\n<ul>\n<li><a href=\"https://github.com/constantinius/geotiff.js\">geotiff</a>: Reading the GeoTIFF data (not the projectiopn, which would be cool)</li>\n<li><a href=\"https://github.com/rveciana/raster-streamlines\">raster-streamlines</a>: Drawing <a href=\"https://en.wikipedia.org/wiki/Streamlines,_streaklines,_and_pathlines\">streamlines</a> from vectorial fields</li>\n<li><a href=\"https://github.com/rveciana/raster-marching-squares\">raster-marching-squares</a>: Creating the isobands with the wind speed</li>\n<li><a href=\"https://github.com/perliedman/reproject\">reproject</a>: Reprojecting the generated GeoJSON</li>\n<li><a href=\"http://proj4js.org/\">proj4js</a>: Reprojecting points</li>\n</ul>\n<p>And examples for all the common raster visualizations covered by the <a href=\"http://basemaptutorial.readthedocs.io/en/latest/\">Basemap library</a>. All the examples have the <em>Canvas</em> and the <em>SVG</em> version so it&#39;s easy to use the most convenient.</p>\n<p>[The tuorial can be found here.]({{ site.baseurl }}/d3-raster-tools-docs)</p>\n<p>I will add more examples in the future, if I find that some cases were not covered.</p>\n<p>Some of the examples are listed below:</p>\n<p>|----------|:-------------:|\n|[<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/arrows.png\" /> Wind arrows]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/wind-arrows-page.html) | [<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/barbs.png\" /> Wind barbs]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/wind-barbs-page.html) |\n|[<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/raster-interpolate.png\" /> Raster interpolation]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/raster-interpolation-page.html) | [<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/raster-pixel.png\" /> Raster original pixels]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/raster-pixels-page.html) |\n|[<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/isolines.png\" /> Isolines]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/isolines-page.html) | [<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/isolines-labels.png\" /> Isolines with labels]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/isolines-labels-page.html) |\n|[<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/isobands.png\" /> Isobands]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/isobands-page.html) | [<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/streamlines.png\" /> Streamlines]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/streamlines-page.html) |\n|[<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/projection.png\" /> Projected GeoTIFF]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/wind-barbs-projected-page.html) | [<img src=\"{{ site.baseurl }}/images/d3/d3-raster-tools-docs/raster-interpolate-projection.png\" /> Projected raster interpolation]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/raster-interpolation-projected-page.html) |</p>\n",
      "layout": "post",
      "title": "d3-raster-tools-docs",
      "date": "2016-12-19T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "raster",
        "isolines",
        "isobands",
        "streamlines"
      ],
      "teaser": "d3-raster-tools-docs.png",
      "description": "Use d3js for dynamic raster data drawing",
      "thumbnail": "/images/d3/d3-raster-tools-docs/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>I&apos;ve written a [short tutorial]({{ site.baseurl }}/d3-raster-tools-docs) explaining how to work with raster data and <a href=\"https://d3js.org/\">d3js</a> to create dynamic data visualizations.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2016-12-19-d3-raster-tools-docs.html",
        "createdAt": "2021-05-05T21:42:45.231Z",
        "lastModified": "2021-05-05T21:42:45.231Z",
        "size": 3975,
        "formattedSize": "3.9 KB"
      }
    },
    {
      "id": "posts\\d3\\2016-10-03-de-composite-projections",
      "contents": "<p>Last year I created the first version of the <a href=\"/d3/2015/05/12/d3-composite-projections.html\">d3-composite-projections library</a>, but some things have changed since then, so a major update has been released. This update includes:</p>\n<ol>\n<li>New projections have been added</li>\n<li>D3js v4 is used instead of v3. All the code has been re-written using ES2015</li>\n</ol>\n<img src=\"{{ site.baseurl }}/images/d3/d3-composite-projections2/conicConformalFrance.png\" width=\"70%\"/>\n\n<h2 id=\"projections\">Projections</h2>\n<p>The available projections for this 1.0.1 version are:</p>\n<ul>\n<li>USA: <a href=\"http://bl.ocks.org/rveciana/ee2119324e835e1bad42d0e4c1b9ab0d\">geoAlbersUSA</a></li>\n<li>USA Territories: <a href=\"http://bl.ocks.org/rveciana/5040be82aea528b6f785464f8816690f\">geoAlbersUsaTerritories</a> as albersUsa, but adding the American Samoa, Puerto Rico, U.S. Virgin Islands, Guam and Northern Marianas Islands, so all the <a href=\"https://en.wikipedia.org/wiki/List_of_districts_of_the_House_of_Representatives_of_Japan\">Congressional Districts</a> are represented</li>\n<li>France: <a href=\"http://bl.ocks.org/rveciana/0ff189b15449330828605fe4e118a716\">geoConicConformalFrance</a></li>\n<li>Portugal: <a href=\"http://bl.ocks.org/rveciana/ee09a2c3732f3e0d6872d1a7f796a29b\">geoConicConformalPortugal</a></li>\n<li>Spain: <a href=\"http://bl.ocks.org/rveciana/d635afded8c4eae36ecf61a15bdf0a98\">geoConicConformalSpain</a></li>\n<li>Europe: <a href=\"http://bl.ocks.org/rveciana/ced3109b372039afbcf7278ba3d14250\">geoConicConformalEurope</a> (thought for Eurostat data)</li>\n<li>Japan: <a href=\"http://bl.ocks.org/rveciana/1f5399d8887428ad67665d106ec089d1\">geoConicEquidistantJapan</a></li>\n<li>Ecuador: <a href=\"http://bl.ocks.org/rveciana/306a5202e1facf7a22e08fbb1044f568\">geoMercatorEcuador</a></li>\n<li>Chile: <a href=\"http://bl.ocks.org/rveciana/3a31865e82f4fab8ac2522545bbc7741\">geoTransverseMercatorChile</a>, including the <a href=\"https://en.wikipedia.org/wiki/Chilean_Antarctic_Territory\">Chilean Antarctic Territory</a></li>\n</ul>\n<p>If you want other countries, I&#39;ll be glad to add them. Sometimes it&#39;s hard to imagine the real uses for this when it&#39;s not a country you know well.</p>\n<h2 id=\"new-code-style\">New code style</h2>\n<p>When <a href=\"https://bost.ocks.org/mike/\">Mike Bostock</a> released the <a href=\"https://github.com/d3/d3-geo\">d3-geo package</a> I used it as the template, so all the tests and code are written using the same style.</p>\n<p>Now, d3-composite-projections can be used with Canvas and SVG, from nodejs, nodejs+browserify, directly from a JavaScript file, etc. Let&#39;s see an example for each case:</p>\n<ul>\n<li><a href=\"#svg--javascript-file\">SVG + JavaScript file</a></li>\n<li><a href=\"#svg--rollup--javascript-file\">SVG + rollup + JavaScript file</a></li>\n<li><a href=\"#svg--browserify\">SVG + browserify</a></li>\n<li><a href=\"#canvas-with-nodejs\">Canvas with Nodejs</a></li>\n</ul>\n<h2 id=\"svg--javascript-file\">SVG + JavaScript file</h2>\n<p>The most common case to see. <a href=\"http://bl.ocks.org/rveciana/fe6b452c853146e674dd6dd09c1cc6e3\">This example showing the Congressional Representatives</a> uses it and is similar to <a href=\"http://bl.ocks.org/rveciana/f0a8ec08d0b63d0cdc6985cc37468b9a\">this Chilean map using the old version</a>. The code:</p>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n#tooltip {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  margin: 0;\n  padding: 10px;\n  width: 200px;\n  height: 70px;\n  color: white;\n  font-family: sans-serif;\n  font-size: 0.9em;\n  font-weight: bold;\n  text-align: center;\n  background-color: rgba(0, 0, 0, 0.55);\n  opacity: 0;\n  pointer-events: none;\n  border-radius:5px;\n  transition: .2s;\n}\n</style>\n<body>\n  <div id=\"container\"/>\n  <div id=\"tooltip\"/>\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\n<script src=\"http://d3js.org/topojson.v1.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3-composite-projections/1.0.1/d3-composite-projections.min.js\"></script>\n<script>\nvar width = 960,\n    height = 500;\n\n<p>var projection = d3.geoAlbersUsaTerritories();\nvar path = d3.geoPath()\n.projection(projection);</p>\n<p>var svg = d3.select(&quot;#container&quot;).append(&quot;svg&quot;)\n.attr(&quot;width&quot;, width)\n.attr(&quot;height&quot;, height);</p>\n<pre><code>var t = d3.transition();</code></pre><p>d3.json(&quot;us_congressional_districts.json&quot;, function(error, us) {\nvar us = topojson.feature(us, us.objects.us_congressional_districts);\nsvg.selectAll(&quot;.region&quot;)\n.data(us.features)\n.enter()\n.append(&quot;path&quot;)\n.attr(&quot;class&quot;, &quot;region&quot;)\n.attr(&quot;d&quot;, path)\n.style(&quot;fill&quot;, function(d){\nif(d.properties.PARTY_AFF==&quot;Democrat&quot;)\nreturn &quot;#4a86e8&quot;;\nelse\nreturn &quot;#e84a4a&quot;;})\n.style(&quot;stroke&quot;, &quot;#000&quot;)\n.style(&quot;stroke-width&quot;, &quot;0.5px&quot;)\n.on(&quot;mouseover&quot;, function(d){\n//Show the tooltip\nvar x = d3.event.pageX;\nvar y = d3.event.pageY - 40;</p>\n<pre><code>    d3.select(&quot;#tooltip&quot;)\n      .style(&quot;left&quot;, x + &quot;px&quot;)\n      .style(&quot;top&quot;, y + &quot;px&quot;)\n      .style(&quot;opacity&quot;, 1)\n      .html( d.properties.STATE + &quot; dist: &quot; + d.properties.CONG_DIST + &quot;&lt;br/&gt;&quot; +d.properties.CONG_REP + &quot;&lt;br/&gt;&quot; + d.properties.PARTY_AFF );\n    })\n    .on(&quot;mouseout&quot;, function(){\n      //Hide the tooltip\n      d3.select(&quot;#tooltip&quot;)\n        .style(&quot;opacity&quot;, 0);\n    });;</code></pre><p>svg\n.append(&quot;path&quot;)\n.style(&quot;fill&quot;,&quot;none&quot;)\n.style(&quot;stroke&quot;,&quot;#000&quot;)\n.style(&quot;stroke-dasharray&quot;,&quot;5,5&quot;)\n.attr(&quot;d&quot;, projection.getCompositionBorders());</p>\n<p>});</p>\n<p></script>\n{% endhighlight %}</p>\n<ul>\n<li>The new D3js v4 can be included from this address: <a href=\"https://d3js.org/d3.v4.min.js\">https://d3js.org/d3.v4.min.js</a></li>\n<li>The d3-composite-projections is uploaded at the <a href=\"https://cdnjs.cloudflare.com/\">cdnjs project</a></li>\n<li>An other option is including the D3js v4 modules needed, one by one, as in <a href=\"http://bl.ocks.org/rveciana/a2a1c21ca1c71cd3ec116cc911e5fce9\">this example</a>. It&#39;s really difficult to manage, it may be better using nodejs and rollup, as in the next point</li>\n<li>Note some changes from a usual version 3 script:<ul>\n<li>Adding the <em>geo</em> as a prefix to many functions: <em>path</em> becomes <em>geoPath</em></li>\n<li>The transitions have changed a little. a transition is declared before appending it to the events</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"svg--rollup--javascript-file\">SVG + rollup + JavaScript file</h2>\n<p>D3js v4 and d3-composite-projections are build using ES2015. Using <a href=\"http://rollupjs.org\">rollup.js</a> instead of including all the d3js coded, including the non used functions, lets you use ES2015 and uses only the needed modules, so the resulting JavaScript file is much smaller (80% less in this case!). I took the information from <a href=\"https://medium.com/@richavyas/d3-js-the-custom-modular-bundle-now-bebd6f25bc8b#.kvi0p3n1c\">this post by Richa Vyas</a>.</p>\n<p>The code can be <a href=\"http://bl.ocks.org/rveciana/0e73c92391def44331d2069755edc199\">found in this gist</a>.</p>\n<p>Basically, the involved files are:</p>\n<ul>\n<li>package.json, which makes possible to install all the dependencies with <em>npm install</em> and sets the <em>build</em> script</li>\n<li>d3.js, which is the entry point for <em>rollup</em>. It takes the needed dependencies and sets the names that the final script must use<ul>\n<li>Note that the used functions must be selected from each module i.e. <em>json</em> from the <em>request</em> module</li>\n</ul>\n</li>\n<li>index.html is a regular file with its <em>html</em> and <em>JavaScript</em> code, but with some things changed because of the names used in the <em>d3.js</em> file<ul>\n<li>rollup has set the d3 prefix so all the functions are available wsing <em>d3.</em> as with the old v3 version</li>\n<li>topojson is included so, this time, it must be accessed with the d3 prefix too. Another option would be not to include into the <em>d3.js</em> file</li>\n</ul>\n</li>\n</ul>\n<p>The first time may be a bit tricky, but the final small size it&#39;s worth the effort.</p>\n<h2 id=\"svg--browserify\">SVG + browserify</h2>\n<p>All the examples linked to the projections are done this way. Create an <em>html</em> file:\n{% highlight js %}</p>\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n\n<body>\n  <div id=\"map\"></div>\n\n  <script src=\"bundle.js\"></script>\n\n<p>{% endhighlight %}</p>\n<p>And then, the node file (I called it draw.js):</p>\n<p>{% highlight js %}\nvar d3_composite = require(&quot;d3-composite-projections&quot;);\nvar d3_geo = require(&quot;d3-geo&quot;);\nvar d3_request = require(&quot;d3-request&quot;);\nvar d3_selection = require(&quot;d3-selection&quot;);\nvar d3_transition = require(&quot;d3-transition&quot;);\nvar topojson = require(&quot;topojson&quot;);</p>\n<p>var width = 960;\nvar height = 500;</p>\n<p>var projection = d3_composite.geoConicConformalEurope();</p>\n<p>var path = d3_geo.geoPath()\n.projection(projection);</p>\n<p>var svg = d3_selection.select(&quot;map&quot;).append(&quot;svg&quot;)\n.attr(&quot;width&quot;, width)\n.attr(&quot;height&quot;, height);</p>\n<p>var t = d3_transition.transition()\n.on(&quot;interrupt&quot;, function(d,i){\nconsole.info(i);\n});</p>\n<p>d3_request.json(&quot;nuts0.json&quot;, function(error, topojsonData) {\nvar us = topojson.feature(topojsonData, topojsonData.objects.nuts0);</p>\n<pre><code>svg.selectAll(&quot;.region&quot;)\n  .data(us.features)\n  .enter()\n  .append(&quot;path&quot;)\n  .attr(&quot;d&quot;, path)\n  .attr(&quot;class&quot;,&quot;region&quot;)\n  .style(&quot;fill&quot;, &quot;#aca&quot;)\n  .style(&quot;stroke&quot;, &quot;#000&quot;)\n  .style(&quot;stroke-width&quot;, &quot;0.5px&quot;)\n  .on(&quot;mouseover&quot;, function(d,i) {\n    d3_selection.select(this)\n      .transition(t)\n      .style(&quot;fill&quot;, &quot;red&quot;);\n    })\n  .on(&quot;mouseout&quot;, function(d,i) {\n    d3_selection.select(this).interrupt();\n    d3_selection.select(this)\n      .transition(t)\n      .style(&quot;fill&quot;, &quot;#aca&quot;);\n    });\n\n  svg\n    .append(&quot;path&quot;)\n      .style(&quot;fill&quot;,&quot;none&quot;)\n      .style(&quot;stroke&quot;,&quot;#f00&quot;)\n      .attr(&quot;d&quot;, projection.getCompositionBorders());</code></pre><p>});\n{% endhighlight %}</p>\n<p>To create the <em>bundle.js</em> file with browserify, run:</p>\n<pre><code>browserify draw.js &gt; bundle.js</code></pre><p>Or, if you want a smaller file:</p>\n<pre><code>browserify draw.js| uglifyjs &gt; bundle.js</code></pre><p>Of course, you will have to install all the dependencies, browserify and uglify first:</p>\n<pre><code>npm install d3-composite-projections d3-geo d3-request d3-selection d3-transition topojson</code></pre><h2 id=\"canvas-with-nodejs\">Canvas with Nodejs</h2>\n<p>If you want to draw png maps from the command line, you can adapt the test scripts included in the library:</p>\n<p>{% highlight js %}\nvar width = 960,\nheight = 500,\nprojectionName = process.argv[2],\ntopojsonName = process.argv[3],\nlayerName = process.argv[4],\nprojectionSymbol = &quot;geo&quot; + projectionName[0].toUpperCase() + projectionName.slice(1);</p>\n<p>if (!/^[a-z0-9]+$/i.test(projectionName)) {throw new Error();}</p>\n<p>var fs = require(&quot;fs&quot;),\ntopojson = require(&quot;topojson&quot;),\nCanvas = require(&quot;canvas&quot;),\nd3_geo = require(&quot;d3-geo&quot;),\nd3_composite = require(&quot;d3-composite-projections&quot;);</p>\n<p>var canvas = new Canvas(width, height),\ncontext = canvas.getContext(&quot;2d&quot;);</p>\n<p>var data = JSON.parse(fs.readFileSync(topojsonName, &#39;utf8&#39;)),\ngraticule = d3_geo.geoGraticule(),\noutline = {type: &quot;Sphere&quot;};</p>\n<p>var path = d3_geo.geoPath()\n.projection(d3_composite<a href=\"\">projectionSymbol</a>.precision(0.1))\n.context(context);</p>\n<p>context.fillStyle = &quot;#fff&quot;;\ncontext.fillRect(0, 0, width, height);\ncontext.save();</p>\n<p>context.beginPath();\npath(topojson.feature(data, data.objects[layerName]));\ncontext.fillStyle = &quot;#aca&quot;;\ncontext.strokeStyle = &quot;#000&quot;;\ncontext.fill();\ncontext.stroke();</p>\n<p>context.beginPath();\npath(graticule());\ncontext.strokeStyle = &quot;rgba(119,119,119,0.5)&quot;;\ncontext.stroke();</p>\n<p>context.restore();</p>\n<p>context.beginPath();\npath(outline);\ncontext.strokeStyle = &quot;#00F&quot;;\ncontext.stroke();</p>\n<p>context.beginPath();\ncontext.strokeStyle = &quot;#F00&quot;;\nd3_composite<a href=\"\">projectionSymbol</a>.drawCompositionBorders(context);\ncontext.stroke();</p>\n<p>canvas.pngStream().pipe(fs.createWriteStream(&quot;./&quot; + projectionName + &quot;.png&quot;));\n{% endhighlight %}</p>\n<ul>\n<li>The script takes three arguments:<ol>\n<li>The projection name i.e. conicConformalPortugal</li>\n<li>The topojson name i.e. world-50m.json</li>\n<li>The layer name i.e. world</li>\n</ol>\n</li>\n<li>Note that the method <em>drawCompositionBorders</em> has to be used instead of <em>getCompositionBorders</em>, since <em>getCompositionBorders</em> returns a string as needed in SVG, which it&#39;s impossible to draw using Canvas with node, since the object <em>Canvas2D</em> is not always available.</li>\n</ul>\n<p>Install the dependencies with:</p>\n<pre><code>npm install topojson canvas d3-geo d3-composite-projections</code></pre><p>and run it like:</p>\n<pre><code>node test.js conicConformalSpain provincias.json provincias d3-geo</code></pre>",
      "layout": "post",
      "title": "d3-composite-projections update",
      "date": "2016-10-03T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "projections",
        "npm",
        "nodejs"
      ],
      "teaser": "d3-composite-projections2.png",
      "description": "Tutorial about scrolled animated maps",
      "thumbnail": "/images/d3/d3-composite-projections2/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>Last year I created the first version of the <a href=\"/d3/2015/05/12/d3-composite-projections.html\">d3-composite-projections library</a>, but some things have changed since then, so a major update has been released. This update includes:</p>",
      "meta": {
        "relativePath": "posts\\d3\\2016-10-03-de-composite-projections.html",
        "createdAt": "2021-05-05T21:42:45.231Z",
        "lastModified": "2021-05-05T21:42:45.231Z",
        "size": 12085,
        "formattedSize": "11.8 KB"
      }
    },
    {
      "id": "posts\\d3\\2017-01-04-d3-shaded-relief",
      "contents": "<p>The <a href=\"http://www.shadedrelief.com/\">shaded relief</a> technique is a method for representing the topography which is prettier and intuitive.</p>\n<p>I found <a href=\"http://bl.ocks.org/mjhoy/5301594\">some examples</a> about doing them with d3js, but required a previous preparation with gdal. I wanted to show how to create the effect using the DEM file directly. I added the tutorial to the <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">d3-raster-tools-docs</a> tutorial.</p>\n<p>The result:</p>\n<iframe frameborder=\"no\" border=\"0\" scrolling=\"no\" marginwidth=\"0\" marginheight=\"0\" width=\"690\" height=\"510\" src=\"http://www.geoexamples.com/d3-raster-tools-docs/code_samples/dem-shaded.html\"></iframe>\n\n<ul>\n<li>[The code explanation]({{ site.baseurl }}/d3-raster-tools-docs/plot/shaded-relief.html)</li>\n<li>[The source code]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/dem-shaded-page.html)</li>\n<li>[How to get the data]({{ site.baseurl }}/d3-raster-tools-docs/code_samples/swiss-page.html)</li>\n</ul>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://www.reliefshading.com/\">reliefshading</a>, a web with lots of examples and theory</li>\n<li><a href=\"http://www.shadedrelief.com/\">shaded relief</a>, with many gorgeous examples</li>\n<li><a href=\"http://edndoc.esri.com/arcobjects/9.2/net/shared/geoprocessing/spatial_analyst_tools/how_hillshade_works.htm\">The hillshade algorithm</a></li>\n<li><a href=\"http://geoexamples.blogspot.com.es/2014/03/shaded-relief-images-using-gdal-python.html\">A post</a> with the same content, but using python</li>\n</ul>\n",
      "layout": "post",
      "title": "d3-shaded-relief",
      "date": "2017-01-04T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "raster",
        "canvas",
        "shaded relief"
      ],
      "teaser": "d3-shaded-relief.png",
      "description": "Use d3js to create shaded relief images",
      "thumbnail": "/images/d3/d3-shaded-relief/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>The <a href=\"http://www.shadedrelief.com/\">shaded relief</a> technique is a method for representing the topography which is prettier and intuitive.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2017-01-04-d3-shaded-relief.html",
        "createdAt": "2021-05-05T21:42:45.232Z",
        "lastModified": "2021-05-05T21:42:45.232Z",
        "size": 1702,
        "formattedSize": "1.7 KB"
      }
    },
    {
      "id": "posts\\d3\\2017-10-24-canvas-mapping-with-retina",
      "contents": "<p>Using D3js with canvas is great for mapping, sice the performance you get in the client&#39;s browser is really better than using SVG. This is because the browser doesn&#39;t have to put in the DOM all the drawn elements, which in a map are usually not important (the background map, for instance). An example of this can be seen in <a href=\"http://bl.ocks.org/rveciana/d5a398bdb55a6caec3e3931f347e4b70\">this example with dynamic projection</a>.</p>\n<p>Also, a raster map can be created, as in <a href=\"http://bl.ocks.org/rveciana/3753394b3b6fd22df2c867bb02b320b4\">this other example</a>. Or even faster styling as in <a href=\"http://bl.ocks.org/rveciana/00f82d7c630342c4a46f5e5c396cf327\">the chalkboard map example</a>.</p>\n<p>The problem in using <em>canvas</em> is the <em>retina display</em> devices, like the IPhone. We&#39;ll see how to manage this case in this post.</p>\n<h2 id=\"blurry-edges\">Blurry edges</h2>\n<p>The image below shows the problem when drawing canvas with a retina display:\n<img src=\"{{ site.baseurl }}/images/d3/canvas-mapping-retina/retina_example.png\"/>\nWhen setting up a <em>canvas</em> element, the numebr of actual pixels in a retina display is 4 times the declared in the canvas. That&#39;s why the computer interpolates the drawing and gets the blur effect.</p>\n<p>You can see the <a href=\"https://bl.ocks.org/rveciana/fc4be951e972d945204ad79423c58106\">example in the image here</a>. If you don&#39;t have a retina display device, all the parts of the map will look ok. Take a look at the section below to simulate the retina display.</p>\n<p>The way to solve it is pretty simple, just add:</p>\n<p>{% highlight js %}\nif (window.devicePixelRatio){\ncanvas\n.attr(&#39;width&#39;, width _ window.devicePixelRatio)\n.attr(&#39;height&#39;, height _ window.devicePixelRatio)\n.style(&#39;width&#39;, width + &#39;px&#39;)\n.style(&#39;height&#39;, height + &#39;px&#39;);</p>\n<pre><code>context.scale(window.devicePixelRatio, window.devicePixelRatio);</code></pre><p>}\n{% endhighlight %}</p>\n<ul>\n<li><em>window.devicePixelRatio</em> is the property you can use to detect the retina display. The value is 1 (or -1) in regular devices and 2 in the retina displays</li>\n<li>The <em>canvas</em> is made two times bigger in each dimension, so the number of pixels will be the good one</li>\n<li>The <em>canvas</em> element is restyled to have the same dimensions we had at the begining, to it will look the same (but with more pixel density)</li>\n<li>The <em>context</em> is scaled so when an element is drawn, the final size is two times bigger, as our canvas</li>\n</ul>\n<p><a href=\"https://bl.ocks.org/rveciana/9b6971f583fb048b216e158235758629\">Here&#39;s the complete example</a>.</p>\n<h2 id=\"what-if-i-dont-have-any-retina-display-device\">What if I don&#39;t have any <em>retina display</em> device?</h2>\n<p>I don&#39;t have it neither! Fortunately, firefox allows a way to simulate it:</p>\n<ul>\n<li>Open the address: <em>about:config</em> and say that you really want to change stuff there</li>\n<li>Search the <em>layout.css.devPixelsPerPx</em> property, which will be <em>-1.0</em> by default</li>\n<li>Change it to 2\nEverything in the browser will look four times bigger, and when reloading the example, you will see the differences between having set properly or not the pixel ratio.</li>\n</ul>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://bl.ocks.org/rveciana/9b6971f583fb048b216e158235758629\">Example 1: Proper way to make a simple map with retina</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/fc4be951e972d945204ad79423c58106\">Example 2: Comparing the proper and the wrong way</a></li>\n<li><a href=\"https://bl.ocks.org/cmgiven/f2100df55e076f386c13ada4988b75e9\">Retina canvas example</a></li>\n<li><a href=\"https://stackoverflow.com/questions/12243549/how-to-test-a-webpage-meant-for-retina-display\">Stack Overflow question about the topic</a></li>\n<li><a href=\"https://support.mozilla.org/ca/questions/981038\">Proper value in Firefox to change the resolution</a></li>\n<li><a href=\"https://www.flickr.com/photos/ivyfield/4731067716\">Source of the image used for this post</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Canvas mapping with a retina display",
      "date": "2017-10-24T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "raster",
        "canvas",
        "retina"
      ],
      "teaser": "canvas-retina.png",
      "description": "Creating canvas maps compatible with retina screens",
      "thumbnail": "/images/d3/canvas-mapping-retina/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>Using D3js with canvas is great for mapping, sice the performance you get in the client&apos;s browser is really better than using SVG. This is because the browser doesn&apos;t have to put in the DOM all the drawn elements, which in a map are usually not important (the background map, for instance). An example of this can be seen in <a href=\"http://bl.ocks.org/rveciana/d5a398bdb55a6caec3e3931f347e4b70\">this example with dynamic projection</a>.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2017-10-24-canvas-mapping-with-retina.html",
        "createdAt": "2021-05-05T21:42:45.232Z",
        "lastModified": "2021-05-05T21:42:45.232Z",
        "size": 3919,
        "formattedSize": "3.8 KB"
      }
    },
    {
      "id": "posts\\d3\\2017-11-04-raster-file-formats",
      "contents": "<p>Some time ago, I made some docs about <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">drawing raster data with d3js</a>.</p>\n<p>All the examples GeoTIFF files to get the data, but there are many other possibilities. I&#39;ve made the exercice to create some examples using the same dataset but different strategies for creating the data with different formats.</p>\n<h2 id=\"table-of-contents\">Table of contents</h2>\n<ul>\n<li><a href=\"#the-data\">The data</a></li>\n<li><a href=\"#geotiff\">GeoTIFF</a><ul>\n<li><a href=\"#compression\">Compression</a></li>\n<li><a href=\"#html-example\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#netcdf\">NetCDF</a><ul>\n<li><a href=\"#html-example-1\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#json\">JSON</a><ul>\n<li><a href=\"#html-example-2\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#json-with-encoded-data\">JSON with encoded data</a><ul>\n<li><a href=\"#html-example-3\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#binary-data\">Binary data</a><ul>\n<li><a href=\"#html-example-4\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#lzw-compressed-binary-data\">LZW compressed binary data</a><ul>\n<li><a href=\"#file-creation-using-python\">File creation using Python</a></li>\n<li><a href=\"#html-example-5\">HTML example</a></li>\n</ul>\n</li>\n<li><a href=\"#performance-comparison\">Performance comparison</a></li>\n<li><a href=\"#what-to-do-with-all-this-binary-data\">What to do with all this binary data?</a></li>\n<li><a href=\"#links\">Links</a></li>\n</ul>\n<h2 id=\"the-data\">The data</h2>\n<p>All the examples use the data from <a href=\"http://bl.ocks.org/rveciana/420a33fd0963e2a6aad16da54725af36\">this block</a>. You can see <a href=\"http://geoexamples.com/d3-raster-tools-docs/code_samples/vardah.html\">how I got the data here</a>. I have taken only the first layer (msl pressure) to make the examples simpler:</p>\n<pre><code>gdal_translate -b 1 vardah.tiff vardah_new.tiff</code></pre><p>You can <a href=\"http://bl.ocks.org/rveciana/raw/420a33fd0963e2a6aad16da54725af36/vardah.tiff\">download here</a> the original <a href=\"http://bl.ocks.org/rveciana/raw/420a33fd0963e2a6aad16da54725af36/vardah.tiff\">vardah.tiff</a> file.</p>\n<h2 id=\"geotiff\">GeoTIFF</h2>\n<p>As in the original example, GeoTIFF can be used as a way to get the raster data. It&#39;s got many advantages, such as being the most widespread format, able to be compressed, that it&#39;s possible to open it directly with any GIS program such as QGIS.</p>\n<p>To use it, use the <a href=\"https://github.com/constantinius/geotiff.js\">geotiff.js library</a>.</p>\n<h3 id=\"compression\">Compression</h3>\n<p>The compressed images are read directly by the latest versions of the library. The compression can reduce the size a lot, specially with the <em>Deflate</em> option. The parsing time is bigger when the image is compressed, but the time is acceptable.</p>\n<p>To create a compressed GeoTIFF file, use the gdal creation options:</p>\n<pre><code>gdal_translate -of GTiff -co COMPRESS=DEFLATE vardah.tiff vardah2.tiff\ngdal_translate -of GTiff -co COMPRESS=LZW vardah.tiff vardah2.tiff\ngdal_translate -of GTiff -co COMPRESS=PACKBITS vardah.tiff vardah2.tiff</code></pre><p>Other compression options are not available with the geotiffjs library.</p>\n<p>Another thing to take in account is the metadata. The geotransform data is stored in a quite strange way (see tiepoint and pixelscale in the <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">example</a>, and the GDAL metadata, in a special &quot;GDAL&quot; tag, which is not easy to find, although it is not when using python+GDAL.</p>\n<h3 id=\"html-example\">HTML example</h3>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<html>\n    <meta>\n    <script src='geotiff.min.js'></script>\n    </meta>\n\n<pre><code>&lt;body&gt;</code></pre><script>\n\nvar urlpath =  \"vardah.tiff\"\n\nvar oReq = new XMLHttpRequest();\noReq.open(\"GET\", urlpath, true);\noReq.responseType = \"arraybuffer\";\n\noReq.onload = function(oEvent) {\n  var t0 = performance.now();\n  var tiff = GeoTIFF.parse(this.response);\n  var image = tiff.getImage();\n  var data = image.readRasters()[0];\n  var tiepoint = image.getTiePoints()[0];\n  var pixelScale = image.getFileDirectory().ModelPixelScale;\n  var t1 = performance.now();\n  console.log(\"Decoding took \" + (t1 - t0) + \" milliseconds.\")\n};\noReq.send(); //start process\n</script>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>Note that the request must be set with an <em>arraybuffer</em> <em>responsetype</em></li>\n</ul>\n<h2 id=\"netcdf\">NetCDF</h2>\n<p>NetCDF is a popular format among meteorology data. The format is quite simple and very flexible. As in the case of GeoTIFF, GDAL can write NetCDF files with a special form and there is a <a href=\"https://github.com/cheminfo-js/netcdfjs\">JavaScript library, netcdfjs</a> that reads the format and it&#39;s fast and not very big. It can be opened with QGIS if created with GDAL.</p>\n<p>To create a NetCDF file from a GeoTIFF, just run:</p>\n<pre><code>gdal_translate -of netCDF -b 1 vardah.tiff vardah.nc</code></pre><p>The name of the output band will be <em>Band1</em>, which is not very nice, since the actual name is stored in another field, not the one used to retrieve the data.</p>\n<h3 id=\"html-example-1\">HTML example</h3>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<html>\n    <meta>\n    <script src='netcdfjs.js'></script>\n    </meta>\n\n<pre><code>&lt;body&gt;</code></pre><script>\n\nvar urlpath =  \"vardah.nc\"\nvar reader;\n\nvar oReq = new XMLHttpRequest();\noReq.open(\"GET\", urlpath, true);\noReq.responseType = \"blob\";\n\noReq.onload = function(oEvent) {\n  var t0 = performance.now();    \n  var blob = oReq.response;\n  reader_url = new FileReader();\n\n  reader_url.onload = function(e) {\n    var t0 = performance.now();\n    reader = new netcdfjs(this.result);\n    var dataValues = reader.getDataVariable('Band1');\n    var t1 = performance.now();\n    console.log(\"Decoding took \" + (t1 - t0) + \" milliseconds.\")\n  }\n\n  var arrayBuffer = reader_url.readAsArrayBuffer(blob);\n\n};\noReq.send(); //start process\n\n\n</script>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>The variables <em>lat</em> and <em>lon</em> return the geographical coordinates for every pixel, which is a good feature</li>\n<li>Some metadata is stored in different variables and fields. Take a look to the library api to see them, but:<ul>\n<li>Printing <em>reader.variables</em> will output a set ob objects with the projection information, longitudes and latitudes</li>\n<li><em>reader.dimensions</em> stores the matrix size</li>\n<li><em>globalAttributes</em> stores other metadata, such as the creation date, GDAL information, etc</li>\n</ul>\n</li>\n<li>Note that the request must be set with a <em>blob</em> <em>responsetype</em></li>\n</ul>\n<h2 id=\"json\">JSON</h2>\n<p>This format is the first that comes in mind when thinking about sharing data. It&#39;s the easiest to understand, and reading it is the most simple thing to code. But it&#39;s a bad idea using it with medium sized matrices, since the size can be for times or more than the original uncompressed GeoTIFF.</p>\n<h3 id=\"html-example-2\">HTML example</h3>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<html>\n    <body>\n\n<script>\n\nvar oReq = new XMLHttpRequest();\n\n\noReq.addEventListener(\"load\", function(data){\n    var t0 = performance.now();\n    var jsonData = JSON.parse(this.response);\n    var t1 = performance.now();\n    console.log(\"Decoding took \" + (t1 - t0) + \" milliseconds.\")\n\n});\n\noReq.open(\"GET\", \"vardah.json\");\noReq.send();\n\n\n</script>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>Just parse the JSON file!</li>\n<li>Of course, all the metadata is easy to add, so the format is very flexible</li>\n</ul>\n<p>Creating the JSON sample file using python is easy:</p>\n<p>{% highlight python %}\nimport gdal\nimport json\nfrom base64 import b64encode\nimport struct</p>\n<p>d_s = gdal.Open(&quot;vardah.tiff&quot;)\ndata = d_s.GetRasterBand(1).ReadAsArray()\nprint(data.dtype)\nout_data = []\nprint(&quot;Size:&quot;, data.shape)\nfor j in range(data.shape[0]):\nfor i in range(data.shape<a href=\"http://geoexamples.com/d3-raster-tools-docs/\">1</a>):\nout_data.append(float(data[j][i]))</p>\n<p>json_data = {}\njson_data[&#39;nx&#39;]= data.shape<a href=\"http://geoexamples.com/d3-raster-tools-docs/\">1</a>\njson_data[&#39;ny&#39;]= data.shape[0]\njson_data[&#39;data&#39;] = out_data</p>\n<p>fp = open(&quot;vardah.json&quot;, &quot;w&quot;)\nfp.write(json.dumps(json_data))\nfp.close()</p>\n<p>{% endhighlight %}</p>\n<ul>\n<li>To make consistent data, put all the numbers in a list, but a matrix could be created the same way, and could be more convenient in certain cases</li>\n</ul>\n<h2 id=\"json-with-encoded-data\">JSON with encoded data</h2>\n<p>Plain JSON data is expensive in terms of space. What if we encode the data in <a href=\"https://en.wikipedia.org/wiki/Base64\">Base64</a>? The data will be much smaller and the JSON format can store all the metadata we want with the same flexibility.</p>\n<p>Let&#39;s look first at how can we create the sample file:</p>\n<p>{% highlight python %}\nimport gdal\nimport json\nfrom base64 import b64encode\nimport struct</p>\n<p>d_s = gdal.Open(&quot;vardah.tiff&quot;)\ndata = d_s.GetRasterBand(1).ReadAsArray()\nprint(data.dtype)\nout_data = []\nprint(&quot;Size:&quot;, data.shape)\nfor j in range(data.shape[0]):\nfor i in range(data.shape<a href=\"http://geoexamples.com/d3-raster-tools-docs/\">1</a>):\nout_data.append(float(data[j][i]))</p>\n<p>json_data = {}\njson_data[&#39;nx&#39;]= data.shape<a href=\"http://geoexamples.com/d3-raster-tools-docs/\">1</a>\njson_data[&#39;ny&#39;]= data.shape[0]</p>\n<p>b64 = b64encode(struct.pack(str(len(out_data))+&#39;f&#39;, *out_data)).decode(&quot;utf-8&quot;)</p>\n<p>json_data[&#39;data&#39;] = b64\nfp = open(&quot;vardahb64.json&quot;, &quot;w&quot;)\nfp.write(json.dumps(json_data))\nfp.close()\n{% endhighlight %}</p>\n<ul>\n<li>Just encode the list after packing it as a binary string<ul>\n<li>I have packed the elements using a <em>f</em>, so as float32 values. If this is changed, remember to change the decoding part! Some variables such as classifications can be stored as bytes, which is much more efficient</li>\n<li>The <em>b64encode</em> function returns in bytes, so it has to be encoded to utf-8 to serialize it into a JSON</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"html-example-3\">HTML example</h3>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<html>\n    <body>\n\n<script>\n\nvar oReq = new XMLHttpRequest();\n\n\noReq.addEventListener(\"load\", function(data){\n    var t0 = performance.now();\n    var jsonData = JSON.parse(this.response);\n    var data = atob(jsonData['data']);\n    var b = new Uint8Array(\n            data.split(\"\").map(function(d){return String.charCodeAt(d)})\n        );\n    var float32Data = new Float32Array(b.buffer);\n    var t1 = performance.now();\n    console.log(\"Decoding took \" + (t1 - t0) + \" milliseconds.\")\n\n});\n\noReq.open(\"GET\", \"vardahb64.json\");\noReq.send();\n</script>\n\n<p>{% endhighlight %}</p>\n<p>Reading this data is quite efficient, but not as easy as plain JSON. The steps are:</p>\n<ul>\n<li>Parse the JSON data with the <em>JSON.parse</em> function</li>\n<li>Convert the encoded field to a binary string using the <em>atob</em> function. This decodes the <em>base64 string</em></li>\n<li>Retrieve all the bytes<ul>\n<li>By splitting all the chars in the string, map all the characters to the UTF-16 codes using <em>String.charCodeAt</em></li>\n<li>Put all the values to a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed array</a>, so we can convert them later</li>\n</ul>\n</li>\n<li>Since the values were stored as float32, we create a <em>buffer</em> from the unigned int8 array and convert the types. That&#39;s all</li>\n</ul>\n<h2 id=\"binary-data\">Binary data</h2>\n<p>Using binary data directly can be a bit more difficult, but the size is compact, the format is very flexible and the performance is very good. Also, it doesn&#39;t require any external library, which is very convenient in many cases. And since you control all the format, the original data can be obfuscated easily.</p>\n<p>If we want to store metadata, different data types may be involved, making the scripts more complicated, but it&#39;s efficient and not so difficult to do.</p>\n<p>Creating the file is easy:</p>\n<p>{% highlight python %}\nimport gdal\nimport struct</p>\n<p>d_s = gdal.Open(&quot;vardah.tiff&quot;)\ndata = d_s.GetRasterBand(1).ReadAsArray()\nprint(data.dtype)\nout_data = []</p>\n<p>for j in range(data.shape[0]):\nfor i in range(data.shape<a href=\"http://geoexamples.com/d3-raster-tools-docs/\">1</a>):\nout_data.append(float(data[j][i]))</p>\n<p>fp = open(&quot;vardah.bin&quot;, &quot;wb&quot;)\nfp.write(struct.pack(str(len(out_data))+&#39;f&#39;, *out_data))\nfp.close()\n{% endhighlight %}</p>\n<ul>\n<li>Just use the <em>pack</em> function to store the data<ul>\n<li>Note that the data is packed with the <em>f</em> letter, this is as float32 elements</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"html-example-4\">HTML example</h3>\n<p>Reading the binary data is really easy using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">Javascript typed arrays</a>:\n{% highlight js %}</p>\n<!DOCTYPE html>\n<html>\n    <body>\n<script>\nvar oReq = new XMLHttpRequest();\n\n<p>oReq.addEventListener(&quot;load&quot;, function(data){\nvar t0 = performance.now();<br> var floatArray= new Float32Array(this.response);\nvar t1 = performance.now();\nconsole.log(&quot;Decoding took &quot; + (t1 - t0) + &quot; milliseconds.&quot;)\n});</p>\n<p>oReq.open(&quot;GET&quot;, &quot;vardah.bin&quot;);\noReq.responseType = &#39;arraybuffer&#39;;\noReq.send();\n</script>\n{% endhighlight %}</p>\n<ul>\n<li>Note that the request must be set with an <em>arraybuffer</em> <em>responsetype</em></li>\n<li>Just read the responsa into a new Float32Array. All the values will be there</li>\n</ul>\n<h2 id=\"lzw-compressed-binary-data\">LZW compressed binary data</h2>\n<p>Of course, as in the <a href=\"#geotiff\">GeoTIFF</a> case, all the data can be compressed. Using complex compression algorithms makes you lose the advantage of coding everything without an external library, but the <a href=\"https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\">LZW algorithm</a> is so simple that it can be added with a few lines of code.</p>\n<p>I will use the code sample from the <a href=\"https://rosettacode.org/wiki/LZW_compression\">rossetacode.org site</a>.</p>\n<h3 id=\"file-creation-using-python\">File creation using Python</h3>\n<p>{% highlight python %}\nimport gdal\nimport struct\nfrom base64 import b64encode</p>\n<p>&#39;&#39;&#39;\nCompression algorithm\n&#39;&#39;&#39;\ndef compress(uncompressed):\n&quot;&quot;&quot;Compress a string to a list of output symbols.&quot;&quot;&quot;</p>\n<pre><code># Build the dictionary.\ndict_size = 256\ndictionary = dict((chr(i), i) for i in xrange(dict_size))\n\nw = &quot;&quot;\nresult = []\nfor c in uncompressed:\n    wc = w + c\n    if wc in dictionary:\n        w = wc\n    else:\n        result.append(dictionary[w])\n        # Add wc to the dictionary.\n        dictionary[wc] = dict_size\n        dict_size += 1\n        w = c\n\n# Output the code for w.\nif w:\n    result.append(dictionary[w])\nreturn result</code></pre><p>d_s = gdal.Open(&quot;vardah.tiff&quot;)\ndata = d_s.GetRasterBand(1).ReadAsArray()</p>\n<p>out_data = []\nfor j in range(data.shape[0]):\nfor i in range(data.shape<a href=\"http://geoexamples.com/d3-raster-tools-docs/\">1</a>):\nout_data.append(float(data[j][i]))\nout_data_bytes = struct.pack(str(len(out_data))+&#39;f&#39;, *out_data)\ncompressed = compress(out_data_bytes)</p>\n<p>fp = open(&quot;vardah.lzw.bin&quot;, &quot;wb&quot;)\nfp.write(struct.pack(str(len(compressed))+&#39;H&#39;, *compressed))\nfp.close()\n{% endhighlight %}</p>\n<ul>\n<li>The compression function is copied directly from the <a href=\"https://rosettacode.org/wiki/LZW_compression\">rossetacode.org site</a><ul>\n<li>It&#39;s supposed to work with a string, so we will convert out floats list into a binary bytes string</li>\n</ul>\n</li>\n<li><em>pack</em> will convert the data list into a string with the binary data. The compressed data will be byte by byte</li>\n<li>The data is compressed with the function</li>\n<li>The data is written as a string of unsigned shorts. This is because the compressed data is a list with values from 0 to 65535, so the <em>unsigned short</em> will be the most efficient way to store its values</li>\n</ul>\n<p>The size is reduced by 50% in our example. If a classification is used instead of float values, the compression will be much more efficient.</p>\n<p>If using python3, the <em>compress</em> function would be:\n{% highlight python %}\ndef compress(uncompressed):\n&quot;&quot;&quot;Compress a string to a list of output symbols.&quot;&quot;&quot;</p>\n<pre><code># Build the dictionary.\ndict_size = 256\ndictionary = {bytes([i]): i for i in range(dict_size)}\nw = b&quot;&quot;\nresult = []\nfor c in uncompressed:\n    #print(type(w), type(bytes([c])), c, bytes([c]))\n    wc = w + bytes([c])\n    if wc in dictionary:\n        w = wc\n    else:\n        result.append(dictionary[w])\n        # Add wc to the dictionary.\n        dictionary[wc] = dict_size\n        dict_size += 1\n        w = bytes([c])\n\n# Output the code for w.\nif w:\n    result.append(dictionary[w])\nreturn result</code></pre><p>{% endhighlight %}</p>\n<ul>\n<li><em>str</em> vars in python 2 become <em>bytes</em> in python3, so everything has to be adapted</li>\n<li><em>xrange</em> has to be changed to <em>range</em></li>\n</ul>\n<h3 id=\"html-example-5\">HTML example</h3>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<html>\n    <body>\n<script>\nvar oReq = new XMLHttpRequest();\n\n<p>oReq.addEventListener(&quot;load&quot;, function(data){\nvar t0 = performance.now();<br> var compressedArray = new Uint16Array(this.response);\nconsole.info(compressedArray.length);\nvar uncompressed = uncompress(compressedArray);</p>\n<pre><code>var t1 = performance.now();\nconsole.log(&quot;Decoding took &quot; + (t1 - t0) + &quot; milliseconds.&quot;)</code></pre><p>});</p>\n<p>oReq.open(&quot;GET&quot;, &quot;vardah.lzw.bin&quot;);\noReq.responseType = &#39;arraybuffer&#39;;\noReq.send();</p>\n<p>//<a href=\"https://rosettacode.org/wiki/LZW_compression#JavaScript\">https://rosettacode.org/wiki/LZW_compression#JavaScript</a>\nfunction uncompress(compressed) {\nvar i,\ndictionary = [],\nw,\nresult,\nfloatResult = [],\nk,\nentry = &quot;&quot;,\ndictSize = 256;\nfor (i = 0; i &lt; 256; i += 1) {\ndictionary[i] = String.fromCharCode(i);\n}</p>\n<pre><code>    w = String.fromCharCode(compressed[0]);\n    result = w;\n    for (i = 1; i &lt; compressed.length; i += 1) {\n        k = compressed[i];\n        if (dictionary[k]) {\n            entry = dictionary[k];\n        } else {\n            if (k === dictSize) {\n                entry = w + w.charAt(0);\n            } else {\n                return null;\n            }\n        }\n         result += entry;\n\n        // Add w+entry[0] to the dictionary.\n        dictionary[dictSize++] = w + entry.charAt(0);\n\n        w = entry;\n    }\n    //Convert from chars to float32 array\n    var b = new Uint8Array(\n        result.split(&quot;&quot;).map(function(d){return String.charCodeAt(d)})\n    );\n    return new Float32Array(b.buffer);\n}</code></pre><p></script>\n{% endhighlight %}</p>\n<ul>\n<li>As in the other cases, just cll the <em>uncompress</em> function and the float array data will be in the variable</li>\n<li>The <em>uncompress</em> function it the same of the one at the <a href=\"https://rosettacode.org/wiki/LZW_compression\">rossetacode.org site</a>, but modified to convert the bytes string to a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">Float32Array</a><ul>\n<li>By splitting all the chars in the string, map all the characters to the <em>UTF-16 codes</em> using <em>String.charCodeAt</em></li>\n<li>Put all the values to a <em>Uint8Array</em> JavaScript typed array, so we can convert them later</li>\n<li>The unsigned short array is then converted to a <em>Float32Array</em> using buffers</li>\n</ul>\n</li>\n</ul>\n<p>Not so difficult! If some metadata has to be added, things can be a bit more complicated, specially if different types are involved</p>\n<h2 id=\"performance-comparison\">Performance comparison</h2>\n<p>I run all the options so it&#39;s easy to compare the final file size and the time it takes to parse</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th align=\"center\">Size</th>\n<th align=\"right\">Parsing time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Uncompressed GeoTIFF</td>\n<td align=\"center\">102 kB</td>\n<td align=\"right\">20 ms</td>\n</tr>\n<tr>\n<td>Packbits GeoTIFF</td>\n<td align=\"center\">103 kB</td>\n<td align=\"right\">80 ms</td>\n</tr>\n<tr>\n<td>LZW GeoTIFF</td>\n<td align=\"center\">53 kB</td>\n<td align=\"right\">54 ms</td>\n</tr>\n<tr>\n<td>Deflate GeoTIFF</td>\n<td align=\"center\">40 kB</td>\n<td align=\"right\">59 ms</td>\n</tr>\n<tr>\n<td>JSON</td>\n<td align=\"center\">490 kB</td>\n<td align=\"right\">9 ms</td>\n</tr>\n<tr>\n<td>Base64 JSON</td>\n<td align=\"center\">135 kB</td>\n<td align=\"right\">12 ms</td>\n</tr>\n<tr>\n<td>Binary</td>\n<td align=\"center\">101 kB</td>\n<td align=\"right\">0.15 ms</td>\n</tr>\n<tr>\n<td>LZW binary</td>\n<td align=\"center\">54 kB</td>\n<td align=\"right\">14 ms</td>\n</tr>\n</tbody></table>\n<ul>\n<li>GeoTIFF files, specially if compressed, are the smallest ones, but with the higher parsing time. Anyway, 60ms is a very good time, so it will be the usual method</li>\n<li>JSON files are the most inefficient in terms of space, and the parsing time is not as low as it could be, because there are many characters to parse</li>\n<li>Binary files are really fast to parse, and the size is quite small if compressed</li>\n</ul>\n<h2 id=\"what-to-do-with-all-this-binary-data\">What to do with all this binary data?</h2>\n<p>With the html canvas element and some libraries around there, many visualizations can be done with a point matrix. I made a tutorial some time ago: <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">d3-raster-tools-docs</a></p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://geoexamples.com/d3-raster-tools-docs/\">drawing raster data with d3js</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/420a33fd0963e2a6aad16da54725af36\">Vardah and leaflet block</a></li>\n<li><a href=\"http://geoexamples.com/d3-raster-tools-docs/code_samples/vardah.html\">Generating the Vardah data file</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/raw/420a33fd0963e2a6aad16da54725af36/vardah.tiff\">The original geotiff file</a></li>\n<li><a href=\"https://github.com/constantinius/geotiff.js\">The geotiff.js library</a></li>\n<li><a href=\"https://github.com/cheminfo-js/netcdfjs\">The netcdfjs library</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Base64\">Base64 Wikipedia page</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\">LZW algorithm wikipedia page</a></li>\n<li><a href=\"https://rosettacode.org/wiki/LZW_compression\">LZW implementation in many languages, including Python and JavaScript</a></li>\n<li><a href=\"http://geoexamples.com/d3-raster-tools-docs/\">D3js raster tools documentation</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Raster file formats for JavaScript mapping",
      "date": "2017-11-04T00:00:00.000Z",
      "categories": "d3",
      "tags": [
        "raster"
      ],
      "teaser": "raster-file-formats-javascript.png",
      "description": "Different options to retrieve raster data using JavaScript",
      "thumbnail": "/images/d3/raster-file-formats-javascript/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>Some time ago, I made some docs about <a href=\"http://geoexamples.com/d3-raster-tools-docs/\">drawing raster data with d3js</a>.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2017-11-04-raster-file-formats.html",
        "createdAt": "2021-05-05T21:42:45.232Z",
        "lastModified": "2021-05-05T21:42:45.232Z",
        "size": 19620,
        "formattedSize": "19.2 KB"
      }
    },
    {
      "id": "posts\\d3\\2019-12-08-mapping-svelte",
      "contents": "<p><a href=\"https://svelte.dev/\">Svelte</a> is a very nice framework for building user interfaces. I wanted to learn more about it, and loved that the <em>d3-like</em> transitions are included and well documented, and much easier than in React, that is my daily library.</p>\n<p>So I thought that some cool mapping examples could be done easily and I was right, so here we go!</p>\n<p>Don&#39;t want to read all this? Check the examples:</p>\n<ul>\n<li><a href=\"https://bl.ocks.org/rveciana/4071d3c6a0b58f98893fb311306b038c\">Example 1: Basic map</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/9026255839233498dbe979ea69ad3af2\">Example 2: Multiple geometries and color scale</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/a8f24ce0ea98e403e266dfb4f9b6b2e9\">Example 3: Adding transitions</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/653784cfab5d859610926733cfb14773\">Example 4: Adding circles</a></li>\n</ul>\n<h2 id=\"dom-projections-and-scales\">DOM, projections and scales</h2>\n<p>Svelte controls the DOM (<a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\">not with a virtual DOM as React or Vue</a>), and has no projection functions for mapping. I wanted to keep all the control into Svelte, so no D3js has been used for this, unlike many of the React with D3 examples out there. Svelte&#39;s <a href=\"https://svelte.dev/tutorial/tweened\">Tweened</a> can do this perfectly.</p>\n<p>On the other hand, D3 has been splitted long ago into several parts, in a really nice decision. This allows us to take only the parts we want and use them anywhere. The examples will use the projections and scales provided by D3 to calculate the paths.</p>\n<h2 id=\"installing-the-examples\">Installing the examples</h2>\n<p>The easiest way to start any Svelte project is running:</p>\n<pre><code>npx degit sveltejs/template svelte-app\ncd svelte-app\nnpm run dev</code></pre><p>This will download the tempate project and run it at the port 5000. All the changes to be done are in the <em>App.svelte</em> file.</p>\n<p>So, for all these examples, create a project and start manipulating the <em>App.svelte</em> file with the provided code.</p>\n<p>To run all the examples, severall libraries have to be installed too:</p>\n<pre><code>npm install topojson, d3-geo, d3-composite-projections, d3-scale, d3-color, d3-interpolate</code></pre><h2 id=\"basic-map\">Basic map</h2>\n<p><a href=\"https://bl.ocks.org/rveciana/4071d3c6a0b58f98893fb311306b038c\">This first example</a> creates the easiest map:</p>\n<img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/mapping-svelte/example1.png\"/>\n\n<p>The <em>App.svelte</em> file would be:</p>\n<p>{% highlight html %}</p>\n<script>\n  import { geoAlbers, geoPath } from \"d3-geo\";\n  import { onMount } from \"svelte\";\n  import { feature } from \"topojson\";\n  let data;\n  const projection = geoAlbers();\n  const path = geoPath().projection(projection);\n\nonMount(async function() {\nconst response = await fetch(\n\"https://gist.githubusercontent.com/rveciana/a2a1c21ca1c71cd3ec116cc911e5fce9/raw/79564dfa2c56745ebd62f5655a6cc19d2cffa1ea/us.json\"\n);\nconst json = await response.json();\nconst land = feature(json, json.objects.land);\ndata = path(land);\n});\n</script>\n\n<style>\n  svg {\n    width: 960px;\n    height: 500px;\n  }\n  .border {\n    stroke: #444444;\n    fill: #cccccc;\n  }\n</style>\n\n<svg width=\"960\" height=\"500\">\n  <path d={data} class=\"border\" />\n</svg>\n{% endhighlight %}\n\n<ul>\n<li>The file is structured in three parts:<ul>\n<li>script, where all the JavaScript goes</li>\n<li>style, where the css for the map is set</li>\n<li>The template part, where the HTML elements are defined</li>\n</ul>\n</li>\n<li>The <em>onMount</em> function is run only once, when the component is mounted. Is here where we will fetch the JSON data we need to draw the map.<ul>\n<li><em>feature</em> is the function from the <a href=\"https://github.com/topojson/topojson-client/blob/master/README.md#feature\">topojson library to decode the topojson file</a></li>\n<li><em>data</em> will have the svg path definition fot the map. Why is declared outside the <em>onMount</em> function? Because it&#39;s used in the template, and since <em>onMount</em> is <em>async</em>, the variable wouldn&#39;t be available when the component is created, giving an error. By doing it this way, the path will be null at the beginning, and the component will re-render when the data is loaded.</li>\n</ul>\n</li>\n<li>Note that path and projection are taken directly from D3js, but are only pure functions that return the SVG path string given a GeoJSON data. Nothing related to the DOM</li>\n<li>The path is defined to hold the <em>data</em> value as the d attribute</li>\n</ul>\n<h2 id=\"adding-multiple-geometries-and-color-scale\">Adding multiple geometries and color scale</h2>\n<p>Let&#39;s add now more geometries and a color scale to fill them. This example and the next ones are all based on <a href=\"https://observablehq.com/@rveciana/use-composite-projections-scotland\">this Observable</a>. <a href=\"https://bl.ocks.org/rveciana/9026255839233498dbe979ea69ad3af2\">Check the result</a></p>\n<img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/mapping-svelte/example2.png\"/>\n\n<p>{% highlight html %}</p>\n<script>\n  import { geoAlbers, geoPath } from \"d3-geo\";\n  import { scaleLinear } from \"d3-scale\";\n  import { extent } from \"d3-array\";\n  import { onMount } from \"svelte\";\n  import { feature } from \"topojson\";\n  let data = [];\n  let colorScale = () => {};\n  const width = \"960\";\n  const height = \"500\";\n  const projectionAlbers = geoAlbers()\n    .rotate([4.4, 0.8])\n    .center([0, 55.4])\n    .parallels([50, 60])\n    .scale(3800)\n    .translate([width / 2, (1.8 * height) / 2]);\n\n  let currentProj = projectionAlbers;\n  let path = geoPath().projection(currentProj);\n\n  onMount(async function() {\n    const response = await fetch(\n      \"https://gist.githubusercontent.com/rveciana/27272a581e975835aaa321ddf816d726/raw/c40062a328843322208b8e98c2104dc8f6ad5301/uk-counties.json\"\n    );\n    const json = await response.json();\n    const topoData = feature(json, json.objects.UK);\n    const land = {\n      ...topoData,\n      features: topoData.features.filter(\n        d => d.properties.NAME_1 === \"Scotland\"\n      )\n    };\n\n    const namesExtent = extent(land.features, d => d.properties.NAME_2.length);\n    colorScale = scaleLinear()\n      .domain(namesExtent)\n      .range([\"#feedde\", \"#fd8d3c\"]);\n    data = land.features;\n  });\n</script>\n\n<style>\n  svg {\n    width: 960px;\n    height: 500px;\n    background-color: \"#eeeeee\";\n  }\n  .provinceShape {\n    stroke: #444444;\n    stroke-width: 0.5;\n  }\n</style>\n\n<svg width=\"960\" height=\"500\">\n  {#each data as feature}\n    <path\n      d={path(feature)}\n      class=\"provinceShape\"\n      fill={colorScale(feature.properties.NAME_2.length)} />\n  {/each}\n</svg>\n{% endhighlight %}\n\n<ul>\n<li>We are using now another projection (<a href=\"https://github.com/d3/d3-geo#geoAlbers\">geoAlbers</a>), so the next examples become more interesting</li>\n<li>All the strange stuff with the topojson data is to get only the Scotland counties from the file that contains all the UK counties</li>\n<li>Note the use of <em>scaleLinear</em> to get a color scale. The extent is only the minimum and maximum length of the names of the counties. Just to have some data to plot!</li>\n<li>Now, in the template part, an <em>each</em> block is used to plot a different path for each county. The color is calculated with the color scale</li>\n<li>Note that, again, the color scale and data have to be declared outside the <em>onMount</em> block</li>\n</ul>\n<h2 id=\"changing-the-color-when-mouse-is-over\">Changing the color when mouse is over</h2>\n<p>Well, this starts to be interesting. This is where Svelte makes things really easier. We want the same map we had on the previous example but when we hover on a county, we want this county color change a little so the user knows it. This means having behaviours for each path, so we will need nested components.\nAlso, we want to change the projection to a composed one when clicking a button. <a href=\"https://bl.ocks.org/rveciana/a8f24ce0ea98e403e266dfb4f9b6b2e9\">Check the result</a></p>\n<img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/mapping-svelte/example3.png\"/>\n\n<p>Let&#39;s start with the nested component, called <em>Feature.svelte</em>. Copy this into your project too!</p>\n<p>{% highlight html %}</p>\n<script>\n  import { tweened } from \"svelte/motion\";\n  import { interpolateLab } from \"d3-interpolate\";\n  import { rgb } from \"d3-color\";\n  export let featurePath;\n  export let initialColor;\n\n  const color = tweened(initialColor, {\n    duration: 300,\n    interpolate: interpolateLab\n  });\n</script>\n\n<style>\n  .provinceShape {\n    stroke: #444444;\n    stroke-width: 0.5;\n  }\n</style>\n\n<p>&lt;path\nd={featurePath}\nclass=&quot;provinceShape&quot;\nfill={$color}\non:mouseover={() =&gt; {\ncolor.set(rgb(initialColor).brighter(0.3));\n}}\non:mouseout={() =&gt; {\ncolor.set(initialColor);\n}} /&gt;\n{% endhighlight %}</p>\n<ul>\n<li>The idea, as you can see on the tempalte section, is rendering only the SVG path element. The path itself is given by a prop (note the export on the 4th line)</li>\n<li>The <em>color</em> variable is now a <a href=\"https://svelte.dev/tutorial/tweened\">tweened function</a>.<ul>\n<li>The first parameter is the initial color, given by a prop calculated the same way as in the previous example, in the parent component</li>\n<li>The interpolation function for a color is not given by Svelte, but a D3 function can be perfectly used. It&#39;s actually what the <a href=\"https://svelte.dev/tutorial/tweened\">Svelte docs recommend to do</a></li>\n<li>The events <em>onmouseover</em> and <em>onmouseout</em> are ones that change this value. Instead of being changed directly, they are changed many times, interpolating the values. These values are read as in a store, so a $ sign has to be used to access the <em>color</em> variable value.</li>\n<li>The <em>rgb.brighter</em> function is used to calculate a new color for each region</li>\n</ul>\n</li>\n</ul>\n<p>Let&#39;s see now the <em>App.svelte</em> file. This will handle the projection transition and the <em>Feature</em> rendering:</p>\n<p>{% highlight html %}</p>\n<script>\n  import { geoAlbers, geoPath, geoProjection } from \"d3-geo\";\n  import { geoAlbersUk } from \"d3-composite-projections\";\n  import { scaleLinear } from \"d3-scale\";\n  import { extent } from \"d3-array\";\n  import { onMount } from \"svelte\";\n  import { feature } from \"topojson\";\n  import { tweened } from \"svelte/motion\";\n  import { interpolate } from \"d3-interpolate\";\n  import Feature from \"./Feature.svelte\";\n\n  let data = [];\n  let colorScale = () => {};\n  const width = \"960\";\n  const height = \"500\";\n  const projectionAlbers = geoAlbers()\n    .rotate([4.4, 0.8])\n    .center([0, 55.4])\n    .parallels([50, 60])\n    .scale(3800)\n    .translate([width / 2, (1.8 * height) / 2]);\n\n  const projectionAlbersUk = geoAlbersUk()\n    .translate([width / 2, (1.85 * height) / 2])\n    .scale(5200);\n\n  const projectionTween = (projection0, projection1) => {\n    return function(t) {\n      function project(λ, φ) {\n        (λ *= 180 / Math.PI), (φ *= 180 / Math.PI);\n        var p0 = projection0([λ, φ]),\n          p1 = projection1([λ, φ]);\n        if (!p0 || !p1) return [0, 0];\n        return [(1 - t) * p0[0] + t * p1[0], (1 - t) * -p0[1] + t * -p1[1]];\n      }\n\n      return geoProjection(project)\n        .scale(1)\n        .translate([0, 0]);\n    };\n  };\n\n  const currentProj = tweened(projectionAlbers, {\n    duration: 1000,\n    interpolate: projectionTween\n  });\n\n  $: path = geoPath().projection($currentProj);\n\n  const opacity = tweened(0, {\n    duration: 1000\n  });\n\n  onMount(async function() {\n    const response = await fetch(\n      \"https://gist.githubusercontent.com/rveciana/27272a581e975835aaa321ddf816d726/raw/c40062a328843322208b8e98c2104dc8f6ad5301/uk-counties.json\"\n    );\n    const json = await response.json();\n    const topoData = feature(json, json.objects.UK);\n    const land = {\n      ...topoData,\n      features: topoData.features.filter(\n        d => d.properties.NAME_1 === \"Scotland\"\n      )\n    };\n\n    const namesExtent = extent(land.features, d => d.properties.NAME_2.length);\n    colorScale = scaleLinear()\n      .domain(namesExtent)\n      .range([\"#feedde\", \"#fd8d3c\"]);\n    data = land.features;\n  });\n</script>\n\n<style>\n  svg {\n    width: 960px;\n    height: 500px;\n    background-color: \"#eeeeee\";\n  }\n  .borders {\n    fill: #ddd;\n  }\n</style>\n\n<p>&lt;button\non:click={() =&gt; {\ncurrentProj.set($currentProj === projectionAlbers ? projectionAlbersUk : projectionAlbers);\n    opacity.set($currentProj === projectionAlbers ? 1 : 0);\n}}&gt;\nChange\n</button>\n<svg width=\"960\" height=\"500\">\n<path\n    class=\"borders\"\n    d={projectionAlbersUk.getCompositionBorders()}\n    style=\"opacity: {$opacity}\" />\n{#each data as feature}\n<Feature\n      featurePath={path(feature)}\n      initialColor={colorScale(feature.properties.NAME_2.length)} />\n{/each}</p>\n</svg>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections\">projectionAlbersUk</a> is a composite projection that makes the Shetland islands closer to the mainland. <a href=\"http://www.legislation.gov.uk/asp/2018/12/contents\">Be careful, this can&#39;t be illegal! ;)</a></li>\n<li><em>projectionTween</em> makes the magic. It takes two projections and creates the interpolated projection. The return value is a function of t. t can be a value from 0 to 1. This way, the interpolation can run from 0 to 1, and the path will be recalculated with these intermediate projections. See how is used in the <em>currentProj</em> variable. It&#39;s a cool demonstration that <em>tweened</em> can interpolate anything if you give the proper function to do it</li>\n<li><em>opacity</em> is another tweened store used to add and remove the rectangle indicator. There is a fade option in Svelte that makes it even easier</li>\n<li>Note that now, instead of adding an SVG path, many <em>Feature</em> components are added so they can handle their behaviour independently. Doing it altogether in the main component is terribly complicated and ugly</li>\n</ul>\n<h2 id=\"adding-circles\">Adding circles</h2>\n<p>The last example is just to show that the usual extra data can be added without any problem.</p>\n<img width=\"50%\" src=\"{{ site.baseurl }}/images/d3/mapping-svelte/example4.png\"/>\n\n<p>I won&#39;t put all the code, since it&#39;s very similar to the previous one. <a href=\"https://bl.ocks.org/rveciana/653784cfab5d859610926733cfb14773\">Check the example here</a></p>\n<ul>\n<li>cities.js has an array with the locations and the populations. The sizes of the circles are calculated using the d3 <em>scaleSqrt</em> scale, so the area is proportional to the population, not the radius.</li>\n<li>An each block is used to draw each circle as in the second example. Since they have no individual behaviour, no extra components are needed</li>\n</ul>\n<p>cities.js:</p>\n<p>{% highlight html %}\nexport const cities = [\n{ name: &quot;Perth&quot;, lat: 56.396999, lon: -3.437, population: 47180 },\n{ name: &quot;Glasgow&quot;, lat: 55.860916, lon: -4.251433, population: 598830 },\n{ name: &quot;Dundee&quot;, lat: 56.462002, lon: -2.9707, population: 148270 },\n{ name: &quot;Dundee&quot;, lat: 56.462002, lon: -2.9707, population: 148270 },\n{ name: &quot;Elgin&quot;, lat: 57.653484, lon: -3.335724, population: 23128 },\n{ name: &quot;Edinburgh&quot;, lat: 55.953251, lon: -3.188267, population: 482005 },\n{ name: &quot;Edinburgh&quot;, lat: 55.953251, lon: -3.188267, population: 482005 },\n{ name: &quot;Inverness&quot;, lat: 57.477772, lon: -4.224721, population: 46870 },\n{ name: &quot;Lerwick&quot;, lat: 60.154167, lon: -1.148611, population: 6958 }\n];\n{% endhighlight %}</p>\n<h2 id=\"final-thoughts\">Final thoughts</h2>\n<p>Although I have experience with React, I am really new to Svelte. Besides loving how is done, what impressed me the most is how easy is to make all the <em>traditional</em> D3js visualizations, but with the power of having an organized framework with components, stores, that is really fast and produces small bundles, etc.</p>\n<p>I&#39;m sure I&#39;ve made many errors and that the code can be better, but I would spend a lot of hours replicating data visualizations into Svelte if I had time. Give it a try!</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://bl.ocks.org/rveciana/4071d3c6a0b58f98893fb311306b038c\">Example 1: Basic map</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/9026255839233498dbe979ea69ad3af2\">Example 2: Multiple geometries and color scale</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/a8f24ce0ea98e403e266dfb4f9b6b2e9\">Example 3: Adding transitions</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/653784cfab5d859610926733cfb14773\">Example 4: Adding circles</a></li>\n<li><a href=\"https://svelte.dev/\">Svelte web site</a></li>\n<li><a href=\"https://svelte.dev/blog/virtual-dom-is-pure-overhead\">Virtual DOM is pure overhead</a></li>\n<li><a href=\"https://svelte.dev/tutorial/tweened\">Svelte&#39;s Tweened function</a></li>\n<li><a href=\"https://github.com/topojson/topojson-client/blob/master/README.md#feature\">Topojson feature function</a></li>\n<li><a href=\"https://observablehq.com/@rveciana/use-composite-projections-scotland\">Scotland map Observable example</a></li>\n<li><a href=\"https://github.com/d3/d3-geo#geoAlbers\">The geoAlbers projection</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections\">d3-composite-projections</a></li>\n<li><a href=\"http://www.legislation.gov.uk/asp/2018/12/contents\">Islands (Scotland) Act 2018</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Mapping with Svelte and D3js",
      "date": "2019-12-08T00:00:00.000Z",
      "categories": "other",
      "tags": [
        "svelte",
        "projections",
        "svg"
      ],
      "teaser": "mapping-svelte.png",
      "description": "Some examples about mapping with Svelte",
      "thumbnail": "/images/d3/mapping-svelte/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p><a href=\"https://svelte.dev/\">Svelte</a> is a very nice framework for building user interfaces. I wanted to learn more about it, and loved that the <em>d3-like</em> transitions are included and well documented, and much easier than in React, that is my daily library.</p>",
      "meta": {
        "relativePath": "posts\\d3\\2019-12-08-mapping-svelte.html",
        "createdAt": "2021-05-05T21:42:45.233Z",
        "lastModified": "2021-05-05T21:42:45.233Z",
        "size": 16267,
        "formattedSize": "15.9 KB"
      }
    },
    {
      "id": "posts\\python\\2014-10-11-basemap-raster-clipping",
      "contents": "<p>Basemap is a great library for mapping faster than other python options, but there are some usual things I couldn&#39;t find how to do. Clipping a raster using a shape is one of them. Here&#39;s how do I do it:</p>\n<p>As usual, all the code can be found at <a href=\"https://github.com/rveciana/geoexamples/tree/master/python/basemap_clipping\">GitHub</a></p>\n<h2 id=\"getting-some-data\">Getting some data</h2>\n<p>The example plots some elevation data, taken from the SRTM. After looking for some options, the easiest to work with was this one: <a href=\"http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp\">http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp</a>\nThe shapefile will be the border of Andorra, taken from Natural Earth\nThe result is a little poor because the resolution is low, but works well for the example.</p>\n<img src=\"{{ site.baseurl }}/images/python/basemapclipping.png\" width=\"50%\"/>\n\n<h2 id=\"the-script\">The script</h2>\n<p>{% highlight python linenos %}\nfrom mpl_toolkits.basemap import Basemap<br>from matplotlib.path import Path<br>from matplotlib.patches import PathPatch<br>import matplotlib.pyplot as plt<br>from osgeo import gdal<br>import numpy<br>import shapefile</p>\n<p>fig = plt.figure()<br>ax = fig.add_subplot(111)</p>\n<p>sf = shapefile.Reader(&quot;ne_10m_admin_0_countries&quot;)</p>\n<p>for shape_rec in sf.shapeRecords():<br> if shape_rec.record[3] == &#39;Andorra&#39;:<br> vertices = []<br> codes = []<br> pts = shape_rec.shape.points<br> prt = list(shape_rec.shape.parts) + [len(pts)]<br> for i in range(len(prt) - 1):<br> for j in range(prt[i], prt[i+1]):<br> vertices.append((pts[j][0], pts[j][1]))<br> codes += [Path.MOVETO]<br> codes += [Path.LINETO] * (prt[i+1] - prt[i] -2)<br> codes += [Path.CLOSEPOLY]<br> clip = Path(vertices, codes)<br> clip = PathPatch(clip, transform=ax.transData)</p>\n<p>m = Basemap(llcrnrlon=1.4,<br> llcrnrlat=42.4,<br> urcrnrlon=1.77,<br> urcrnrlat=42.7,<br> resolution = None,\nprojection = &#39;cyl&#39;)</p>\n<p>ds = gdal.Open(&#39;srtm_37_04.tif&#39;)<br>data = ds.ReadAsArray()</p>\n<p>gt = ds.GetGeoTransform()<br>x = numpy.linspace(gt[0], gt[0] + gt[1] _ data.shape[1], data.shape[1])<br>y = numpy.linspace(gt[3], gt[3] + gt[5] _ data.shape[0], data.shape[0])</p>\n<p>xx, yy = numpy.meshgrid(x, y)</p>\n<p>cs = m.contourf(xx,yy,data,range(0, 3600, 200))</p>\n<p>for contour in cs.collections:<br> contour.set_clip_path(clip)</p>\n<p>plt.show()\n{% endhighlight %}</p>\n<ul>\n<li>I used the pyshp library for reading the shapefile, since Fiona and GDAL don&#39;t work well together, and OGR was longer</li>\n<li>Lines 14 to 27 create the path. A Matplotlib path is made by two arrays. One with the points (called vertices in the script), and the other with the functions for every point (called codes)<ul>\n<li>In our case, only straight lines have to be used, so there will be a MOVETO to indicate the beginning of the polygon, many LINETO to create the segments and one CLOSEPOLY for closing it</li>\n<li>Of course, only the polygon for Andorra has to be used. I get it from the shapefile attributes</li>\n<li>The prt array is for managing multipolygons, which is not the case, but the code will create correct clipping for multipolygons</li>\n<li>The path is created using the Path function, and then added to a PathPatch, to be able to use it as a closed polygon. Note the trasnform=ax.transData attribute. This assumes the polygon coordinates to be the ones used in the data (longitudes and latitudes in our case). More information here</li>\n</ul>\n</li>\n<li>Next code lines draw the map as usual. I have used a latlon projection, so all the values for the raster and shapefile can be used directly. If the output raster was in an other projection, the shapefile coordinates should be appended to the path using the output projection (m(pts[j][0], pts[j][1]))</li>\n<li>The x and y coordinates are calculated from the GDAL geotransform, and then turned into a matrix using meshgrid</li>\n<li>The clipping itself is made in the lines 48 and 49. For each drawn element, the method set_clip_path is applied</li>\n</ul>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://srtm.csi.cgiar.org/SELECTION/inputCoord.asp\">SRTM data download</a></li>\n<li><a href=\"http://matplotlib.org/users/path_tutorial.html\">Matplotlib path tutorial</a></li>\n<li><a href=\"http://matplotlib.org/examples/pylab_examples/image_clip_path.html\">Clipping an image in Basemap</a></li>\n<li><a href=\"http://matplotlib.org/users/transforms_tutorial.html\">Understanding Basemap transformations</a></li>\n<li><a href=\"http://geospatialpython.com/2011/02/clip-raster-using-shapefile.html\">Clipping a raster with GDAL python</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Basemap raster clipping with a shapefile",
      "date": "2014-10-11T00:00:00.000Z",
      "categories": "python",
      "tags": [
        "basemap",
        "GDAL"
      ],
      "teaser": "basemapclipping.png",
      "excerpt": "<p>Basemap is a great library for mapping faster than other python options, but there are some usual things I couldn&apos;t find how to do. Clipping a raster using a shape is one of them. Here&apos;s how do I do it:</p>",
      "meta": {
        "relativePath": "posts\\python\\2014-10-11-basemap-raster-clipping.html",
        "createdAt": "2021-05-05T21:42:45.238Z",
        "lastModified": "2021-05-05T21:42:45.238Z",
        "size": 4441,
        "formattedSize": "4.3 KB"
      }
    },
    {
      "id": "posts\\python\\2014-08-16-shortest-distance-to-geometry",
      "contents": "<p>Looking at <a href=\"http://knowmore.washingtonpost.com/2014/05/22/if-youre-on-the-beach-this-map-shows-you-whats-across-the-ocean/\">this map</a>, I wondered how to calculate which geometry in a set is the closest to a point in a given direction.</p>\n<p>Usually, the problem is finding the closest geometry in general, which is easy using the <a href=\"http://www.gdal.org/classOGRGeometry.html#a24fb51e9b419e97f14964e5a00ae3fb4\">distance function</a>, but I couldn&#39;t find a solution for this other.</p>\n<p>So I put me this problem: Which is the closest country that I have at each direction, knowing my geographical coordinates?</p>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-1.png\" width=\"70%\"/>\n\n<p>All the source code is, as usual, <a href=\"https://github.com/rveciana/geoexamples/tree/master/python/closest_polygon\">at GitHub</a></p>\n<h2 id=\"the-algorithm\">The algorithm</h2>\n<p>The main idea is:</p>\n<ol>\n<li>Create an infinite line from the point towards the desired direction.</li>\n<li>Calculate the difference geometry between the line and each polygon</li>\n</ol>\n<ul>\n<li>If the polygon and the line actually intersect, the result will be a multi-line. The first line length of the multi-line is the distance we are looking for</li>\n</ul>\n<p>So this would be the initial situation:</p>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-2.png\" width=\"70%\"/>\n\n<p>And the distance to the polygon 1 would be calculated as:</p>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-3.png\" width=\"70%\"/>\n\n<p>The main problem is how to calculate the difference between the two geometries, but fortunately, shapely comes with <a href=\"http://toblerity.org/shapely/manual.html#object.difference\">this function</a>, so coding it is not so difficult:</p>\n<p>{% highlight python linenos %}\nfrom shapely.geometry import Polygon<br>from shapely.geometry import LineString<br>from math import cos<br>from math import sin<br>from math import pi</p>\n<p>def closest_polygon(x, y, angle, polygons, dist = 10000):</p>\n<pre><code>angle = angle * pi / 180.0\nline = LineString([(x, y), (x + dist * sin(angle), y + dist * cos(angle))])\n\ndist_min = None\nclosest_polygon = None\nfor i in range(len(polygons)):\n    difference = line.difference(polygons[i])\n    if difference.geom_type == &#39;MultiLineString&#39;:\n        dist = list(difference.geoms)[0].length\n        if dist_min is None or dist_min &gt; dist:\n            dist_min = dist\n            closest_polygon = i\n\n\n\nreturn {&#39;closest_polygon&#39;: closest_polygon, &#39;distance&#39;: dist_min}</code></pre><p>if <strong>name</strong> == &#39;<strong>main</strong>&#39;:</p>\n<pre><code>polygons = []\npolygons.append(Polygon([(4, 2), (4, 4), (6, 4), (6, 2)]))\npolygons.append(Polygon([(7, 2), (7, 4), (9, 4), (9, 2)]))\n\n\nprint closest_polygon(3, 3, 90, polygons)</code></pre><p>{% endhighlight %}</p>\n<ul>\n<li><p>The main section creates the two squares <a href=\"http://toblerity.org/shapely/manual.html#polygons\">using shapely</a></p>\n</li>\n<li><p>The closest_polygon function calculates the closest polygon and its distance:</p>\n<ul>\n<li>A LineString to the desired direction is calculated. The dist is in the units used by the polygons. An infinite line isn&#39;t possible, so the distance must be larger than the further</li>\n<li>For each of the polygons to analyze, the difference is calculated using the shapely difference method</li>\n<li>Then, if the line and the polygon intersect (and the line is long enough), a MultilineString will be the result of the difference operation. The first String in the MultilineString is the one that connects our point with the polygon. Its length is the distance we are looking for</li>\n</ul>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-4.png\"  width=\"70%\"/>\n<caption>The example schema, drawn with the script draw_closest.py</caption>\n\n</li>\n</ul>\n<h2 id=\"calculating-the-closest-country-in-each-direction\">Calculating the closest country in each direction</h2>\n<p>After getting the formula for calculating the closest polygon, the next step would be using it for something. So:</p>\n<pre><code> Which country do I have in all directions?</code></pre><p>To create the script, some things have to be considered:</p>\n<ul>\n<li>The projection should be <a href=\"http://en.wikipedia.org/wiki/Azimuthal_equidistant_projection\">azimuthal equidistant</a> so the distances can be compared in all the directions from the given point</li>\n<li>I&#39;ve used the BaseMap library to draw the maps. I find it a bit tricky to use, but the code will be shorter</li>\n</ul>\n<p>The script is used this way:</p>\n<pre><code>usage: closest_country.py [-h] [-n num_angles] [-o out_file] [-wf zoom_factor] lon lat\n\nCreates a map with the closest country in each direction\n\n positional arguments:\n   lon              The point longitude\n   lat              The point latitude\n\n optional arguments:\n   -h, --help       show this help message and exit\n   -n num_angles    Number of angles\n   -o out_file      Out file. If present, saves the file instead of showing it\n   -wf zoom_factor  The width factor. Use it to zoom in and out. Use &gt; 1 to\n                    draw a bigger area, and &lt;1 for a smaller one. By default is\n                    1</code></pre><p>For example:</p>\n<pre><code> python closest_country.py -n 100 -wf 2.0 5 41</code></pre><p>The code has some functions, but the main one is draw_map:\n{% highlight python linenos %}\ndef draw_map(self, num_angles = 360, width_factor = 1.0):</p>\n<pre><code>#Create the map, with no countries\nself.map = Basemap(projection=&#39;aeqd&#39;,\n            lat_0=self.center_lat,lon_0=self.center_lon,resolution =None)\n#Iterate over all the angles:\nself.read_shape()\nresults = {}\ndistances = []\nfor num in range(num_angles):\n    angle = num * 360./num_angles\n    closest, dist = self.closest_polygon(angle)\n    if closest is not None:\n        distances.append(dist)\n        if (self.names[closest] in results) == False:\n            results[self.names[closest]] = []\n\n        results[self.names[closest]].append(angle)\n\n#The map zoom is calculated here,\n#taking the 90% of the distances to be drawn by default\nwidth = width_factor * sorted(distances)[\n        int(-1 * round(len(distances)/10.))]\n\n#Create the figure so a legend can be added\nplt.close()\nfig = plt.figure()\nax = fig.add_subplot(111)\ncmap = plt.get_cmap(&#39;Paired&#39;)\n\n\nself.map = Basemap(projection=&#39;aeqd&#39;, width=width, height=width,\n            lat_0=self.center_lat,lon_0=self.center_lon,resolution =None)\nself.read_shape()\n\n#Fill background.\nself.map.drawmapboundary(fill_color=&#39;aqua&#39;)\n\n#Draw parallels and meridians to give some references\nself.map.drawparallels(range(-80, 100, 20))\nself.map.drawmeridians(range(-180, 200, 20))\n\n\n#Draw a black dot at the center.\nxpt, ypt = self.map(self.center_lon, self.center_lat)\nself.map.plot([xpt],[ypt],&#39;ko&#39;)\n\n#Draw the sectors\nfor i in range(len(results.keys())):\n    for angle in results[results.keys()[i]]:\n        anglerad = float(angle) * pi / 180.0\n        anglerad2 = float(angle + 360./num_angles) * pi / 180.0\n        polygon = Polygon([(xpt, ypt), (xpt + width * sin(anglerad), ypt + width * cos(anglerad)), (xpt + width * sin(anglerad2), ypt + width * cos(anglerad2))])\n        patch2b = PolygonPatch(polygon, fc=cmap(float(i)/(len(results) - 1)), ec=cmap(float(i)/(len(results) - 1)), alpha=1., zorder=1)\n        ax.add_patch(patch2b)\n\n\n#Draw the countries\nfor polygon in self.polygons:\n    patch2b = PolygonPatch(polygon, fc=&#39;#555555&#39;, ec=&#39;#787878&#39;, alpha=1., zorder=2)\n    ax.add_patch(patch2b)\n\n#Draw the legend\ncmap = self.cmap_discretize(cmap, len(results.keys()))\nmappable = cm.ScalarMappable(cmap=cmap)\nmappable.set_array([])\nmappable.set_clim(0, len(results))\ncolorbar = plt.colorbar(mappable, ticks= [x + 0.5 for x in range(len(results.keys()))])\ncolorbar.ax.set_yticklabels(results.keys())\n\nplt.title(&#39;Closest country&#39;)</code></pre><p>{% endhighlight %}</p>\n<ul>\n<li><p>The first steps are used to calculate the closest country in each direction, storing the result in a dict. The distance is calculated using the closest_polygon method, explained in the previous section..</p>\n</li>\n<li><p>The actual map size is then calculated, taking the distance where the 90% of the polygons will appear. The width_factor can change this, because some times the result is not pretty enough. Some times has to much zoom and some, too few. Note that the aeqd i.e., <a href=\"http://en.wikipedia.org/wiki/Azimuthal_equidistant_projection\">Azimuthal Equidistant projection</a> is used, since is the one that makes the distances in all directions comparable.</p>\n</li>\n<li><p>Next steps are to actually drawing the map</p>\n<ul>\n<li>The sectors (the colors indicating the closest country) are drawn using the <a href=\"https://pypi.python.org/pypi/descartes\">Descartes library</a> and it&#39;s PolygonPatch</li>\n<li>The legend needs to change the color map to a discrete color map. I used a function called cmap_discretize, found here, to do it</li>\n<li>The legend is created using the examples found <a href=\"http://sensitivecities.com/so-youd-like-to-make-a-map-using-python-EN.html#.VWEBgLyYr0q\">in this cookbook</a></li>\n</ul>\n<p>Some outputs:</p>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-5.png\"  width=\"70%\"/>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-6.png\"  width=\"70%\"/>\n<img src=\"{{ site.baseurl }}/images/python/shortest-distance-7.png\"  width=\"70%\"/>\n\n</li>\n</ul>\n<h2 id=\"next-steps-whats-across-the-ocean\">Next steps: What&#39;s across the ocean</h2>\n<p>Well, my original idea was creating a map like <a href=\"http://knowmore.washingtonpost.com/2014/05/22/if-youre-on-the-beach-this-map-shows-you-whats-across-the-ocean/\">this one</a>, showing the closest country when you are at the beach. Given a point and a direction (east or west in the example), calculating the country is easy, and doing it for each point in the coast is easy too. The problem is that doing it automatic is far more difficult, since you have to know the best direction (not easy in many places like islands), which countries to take as the origin, etc.</p>\n<p>An other good thing would be doing the same, but with d3js, since the point position could become interactive. I found some libraries like <a href=\"http://turfjs.org/\">turfjs</a>, <a href=\"https://github.com/chelm/shapely.js/\">shapely.js</a> or <a href=\"https://github.com/bjornharrtell/jsts\">jsts</a>, but I think that they still don&#39;t implement the difference operation that we need.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://github.com/rveciana/geoexamples/tree/master/python/closest_polygon\">The post examples source code</a></li>\n<li><a href=\"http://knowmore.washingtonpost.com/2014/05/22/if-youre-on-the-beach-this-map-shows-you-whats-across-the-ocean/\">If you’re on the beach, this map shows you what’s across the ocean: The map that made me think about this problem</a></li>\n<li><a href=\"https://www.linkedin.com/grp/post/49657-99114904\">A LinkedIn discussion that gave me some ideas</a></li>\n</ul>\n<p>Basemap links</p>\n<ul>\n<li><a href=\"http://ilessendata.blogspot.com.es/2014/02/making-maps-python.html\">How to install Basemap</a> (you can use a <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\">virtual environment</a> to test it without installing it in the whole system). Be sure to have pip installed, and the python-dev package in case you are using Ubuntu. Some distributions have Basemap as a system package too.</li>\n<li>How to create an <a href=\"http://matplotlib.org/basemap/users/aeqd.html\">Azimuthal equidistant map with Basemap</a> - <a href=\"http://en.wikipedia.org/wiki/Azimuthal_equidistant_projection\">The Azimuthal Equidistant projection</a></li>\n<li><a href=\"http://matplotlib.org/basemap/users/examples.html\">Some simple and useful Basemap examples</a></li>\n<li><a href=\"http://sensitivecities.com/so-youd-like-to-make-a-map-using-python-EN.html#.VWEEabyYr0p\">Advanced Basemap tricks</a> that helped me to add the legend and much more</li>\n<li><a href=\"http://wiki.scipy.org/Cookbook/Matplotlib/ColormapTransformations\">How to discretize a color map</a></li>\n<li><a href=\"https://pypi.python.org/pypi/descartes\">Descartes</a>: Drawing polygons in Matplotlib</li>\n</ul>\n",
      "layout": "post",
      "title": "Shortest distance to a geometry in a specified direction using Python",
      "date": "2014-08-16T00:00:00.000Z",
      "categories": "python",
      "tags": [
        "basemap",
        "geometry",
        "OGR"
      ],
      "teaser": "shortest-distance-to-geometry.png",
      "excerpt": "<p>Looking at <a href=\"http://knowmore.washingtonpost.com/2014/05/22/if-youre-on-the-beach-this-map-shows-you-whats-across-the-ocean/\">this map</a>, I wondered how to calculate which geometry in a set is the closest to a point in a given direction.</p>",
      "meta": {
        "relativePath": "posts\\python\\2014-08-16-shortest-distance-to-geometry.html",
        "createdAt": "2021-05-05T21:42:45.238Z",
        "lastModified": "2021-05-05T21:42:45.238Z",
        "size": 12028,
        "formattedSize": "11.7 KB"
      }
    },
    {
      "id": "posts\\python\\2014-11-26-basemap-tutorial",
      "contents": "<p>Basemap is a great tool for creating maps using python in a simple way. It&#39;s a <a href=\"http://matplotlib.org/\">matplotlib</a> extension, so it has got all its features to create data visualizations, and adds the geographical projections and some datasets to be able to plot coast lines, countries, and so on directly from the library.</p>\n<p>Basemap has got <a href=\"http://matplotlib.org/basemap/index.html\">some documentation</a>, but some things are a bit more difficult to find. I started a readthedocs page to extend a little the original documentation and examples, but it grew a little, and now covers many of the basemap possibilities.</p>\n<img src=\"{{ site.baseurl }}/images/python/basemaptutorial.png\" width=\"50%\"/>\n\n<p>Some of the examples from the tutorial</p>\n<p>The tutorial can be found at <a href=\"http://basemaptutorial.readthedocs.org/\">http://basemaptutorial.readthedocs.org/</a>, and all the examples and its source code, at GitHub and it&#39;s available for sharing or being modified by adding the attribution.</p>\n<p>The tutorial covers:</p>\n<ul>\n<li>An introductory chapter, showing the basic functionalities, and how to work with the included methods for reading shapefiles</li>\n<li>The explanation and an example for each of the basemap methods</li>\n<li>A section with more advanced examples, such as 3D maps, multiplots or WRF examples</li>\n</ul>\n<p>I would really appreciate some feedback, the comments are open!</p>\n",
      "layout": "post",
      "title": "Basemap tutorial",
      "date": "2014-11-26T00:00:00.000Z",
      "categories": "python",
      "tags": [
        "basemap",
        "tutorial"
      ],
      "teaser": "basemaptutorial.png",
      "excerpt": "<p>Basemap is a great tool for creating maps using python in a simple way. It&apos;s a <a href=\"http://matplotlib.org/\">matplotlib</a> extension, so it has got all its features to create data visualizations, and adds the geographical projections and some datasets to be able to plot coast lines, countries, and so on directly from the library.</p>",
      "meta": {
        "relativePath": "posts\\python\\2014-11-26-basemap-tutorial.html",
        "createdAt": "2021-05-05T21:42:45.239Z",
        "lastModified": "2021-05-05T21:42:45.239Z",
        "size": 1505,
        "formattedSize": "1.5 KB"
      }
    },
    {
      "id": "posts\\python\\2016-02-15-code-coverage-pylint-pycharm-community",
      "contents": "<p>I&#39;ve using Eclipse and <a href=\"http://www.pydev.org/\">PyDev</a> for some years now, but I always wanted to switch to <a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>. The main problem I found was the integration with coverage.py and pylint, which are very easy in Pydev, but not available with the Community version of PyCharm.</p>\n<p>This is the solution for both tools using PyCharm 5 in a python3 project:</p>\n<h1 id=\"pylint\">pylint</h1>\n<p>Let&#39;s do the easier one first. PyCharm comes with the <em>pep8.py</em> and other syntax checks, but I like <a href=\"https://www.pylint.org/\">pylint</a> because it gives some indications about number of class methods, variables in a function, etc.</p>\n<p>Install pylint if you don&#39;t have it in your system:\n{% highlight bash %}\nsudo pip install pylint\n{% endhighlight %}\nThen, open <em>File-&gt;Settings-&gt;Tools-&gt;External tools</em> and click the <em>+</em> button. You will get a window that has to be filled like this:</p>\n<img src=\"{{ site.baseurl }}/images/python/pycharm-coverage/pylint.png\"/>\n\n<ul>\n<li>Remember to check the <em>Show console when a message is printed to standard output stream</em> and the same with errors. If not, the <a href=\"https://www.pylint.org/\">pylint</a> output won&#39;t be shown.</li>\n<li><em>Program</em> is the path to the program to be executed. No parameters can be passed here</li>\n<li>The <em>params</em> section gives the parameters to the executed program. <em>$FilePath$</em> is a <em>macro</em>. All the available macros can be selected with the right button. <em>$FilePath$</em> is changed to the selected file path when the fuinction is launched</li>\n<li>The <em>working directory</em> section indicates the directory the order will be executed from. I&#39;ve set it with a macro to the project root path</li>\n</ul>\n<p>You can run the pylint script by going to <em>tools-&gt;External tools-&gt;pylint</em> when you have a file open or right clicking the file name at the project pane.</p>\n<h1 id=\"coverage\">coverage</h1>\n<p><a href=\"https://coverage.readthedocs.org/en/coverage-4.0.3/\">coverage.py</a> is a tool to check if all the lines are executed in a module when a test for this module is run. With it is easy to know if all the coded possibilities have been tested. We could use the script directly, but since PyCharm uses <a href=\"https://nose.readthedocs.org/en/latest/\">nose</a> to run the tests and gives a nice output and nose can <a href=\"http://nose.readthedocs.org/en/latest/plugins/cover.html\">integrate the coverage.py script</a>, I&#39;ve configured the later to give the test result and coverage at once.</p>\n<p>To run the test with the coverage option, some flags have to be applied (all the options <a href=\"http://nose.readthedocs.org/en/latest/plugins/cover.html\">here</a>):</p>\n<ul>\n<li>--with-coverage enables the coverage</li>\n<li>--cover-package restricts the coverage to the specified packages (more than one can be specified separating with commas). When the flag is not enable, all the dependencies will be checked, with all the libraries used, so the result can be difficult to read. This is the point that gave me some troubles</li>\n<li>--cover-tests Covers the modules and tests. Can be useful to check if all the test has been run (if you use some condition inside them, for instance)</li>\n<li>--cover-erase Reset the results before running the tests. If tests are not erased, the output results can be confusing if the changed code is not covered but it was in a previous version</li>\n</ul>\n<p>I didn&#39;t find a really satisfactory way to integrate coverage in PyCharm community, so I&#39;ll show three ways to do it:</p>\n<h2 id=\"modifying-the-run-parameters\">Modifying the run parameters</h2>\n<p>Once a test is created, go to <em>Run-&gt;Edit Configurations</em> and find the configuration for the test you want to use. Edit it and add to the <em>params</em> text box:</p>\n<p><em>--with-coverage --cover-erase --cover-package package_name</em></p>\n<p>Now, when running the test, the console will output the coverage result</p>\n<ul>\n<li>Pros: The output keeps the test result view</li>\n<li>Cons: You have to configure it for each test. The package name has to be changed each times</li>\n</ul>\n<h2 id=\"adding-an-external-tool\">Adding an external tool</h2>\n<p>As in the pylint case, an external tool can be set: Open <em>File-&gt;Settings-&gt;Tools-&gt;External tools</em> and click the <em>+</em> button.</p>\n<img src=\"{{ site.baseurl }}/images/python/pycharm-coverage/coverage1.png\"/>\n\n<ul>\n<li>The program is <em>nosetests3</em> in my case, since I&#39;m running a python3 project</li>\n<li>The parameters are the same as in the other case, but calling the macro <em>$Prompt$</em> to give the name of the packages. This will open a window to ask which packages to check</li>\n</ul>\n<p>You can call the coverage script using <em>tools-&gt;External tools-&gt;noseCoverage</em></p>\n<ul>\n<li>Pros: The tool can be called from any test</li>\n<li>Cons: The package name has to be written every time. The output is only at the console, without the test pane.</li>\n</ul>\n<h2 id=\"calling-a-script-from-an-external-tool\">Calling a script from an external tool</h2>\n<p>The external tool way could be improved if the packages where automatically called instead of opening a window. Unfortunately, I haven&#39;t been able to execute code inside the <em>parameters</em> field, so the solution is creating an external file with the following command:\n{% highlight bash %}\nnosetests3 --with-coverage --cover-erase --cover-tests --cover-package <code>echo */|sed &#39;s/\\///g&#39;|sed &#39;s/ /,/g&#39;</code>\n{% endhighlight %}\nAnd then, create the <em>external tool</em> this way:</p>\n<img src=\"{{ site.baseurl }}/images/python/pycharm-coverage/coverage2.png\"/>\n\n<ul>\n<li>All the available packages are passed to the <em>--cover-package</em> option so no prompt is needed</li>\n<li>Since the <em>working directory</em> is set to the project root, the paths are at the correct point</li>\n</ul>\n<p>I haven&#39;t been able to pass the <em>echo</em> part inside the parameters field, PyCharm avoids executing it.</p>\n<ul>\n<li>Pros: The most automatic way I have found to do it</li>\n<li>Cons: Requires an external script, which I don&#39;t like</li>\n</ul>\n",
      "layout": "post",
      "title": "Code coverage and pylint with PyCharm community",
      "date": "2016-02-15T00:00:00.000Z",
      "categories": "python",
      "tags": [
        "PyCharm",
        "coverage",
        "lint"
      ],
      "teaser": "pycharm-coverage.png",
      "excerpt": "<p>I&apos;ve using Eclipse and <a href=\"http://www.pydev.org/\">PyDev</a> for some years now, but I always wanted to switch to <a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>. The main problem I found was the integration with coverage.py and pylint, which are very easy in Pydev, but not available with the Community version of PyCharm.</p>",
      "meta": {
        "relativePath": "posts\\python\\2016-02-15-code-coverage-pylint-pycharm-community.html",
        "createdAt": "2021-05-05T21:42:45.239Z",
        "lastModified": "2021-05-05T21:42:45.239Z",
        "size": 5808,
        "formattedSize": "5.7 KB"
      }
    },
    {
      "id": "posts\\python\\2017-03-09-GDALReproject-NoData",
      "contents": "<p>from osgeo import gdal\nfrom osgeo import osr</p>\n<p>driver = gdal.GetDriverByName(&#39;GTiff&#39;)</p>\n<p>ds_in = gdal.Open(&#39;/DADES/MODELS/PRESCAT/2017/01/01/PRESCAT-2017010100_0.tiff&#39;)</p>\n<p>proj_in = ds_in.GetProjection()</p>\n<p>ds_out = driver.Create(&#39;/tmp/out.tiff&#39;, 675, 655,\n4, gdal.GDT_Float32)</p>\n<p>ds_out.SetGeoTransform([260000, 400, 0, 4750000, 0, -400])</p>\n<p>proj_out = osr.SpatialReference()\nproj_out.ImportFromEPSG(25831)\nproj_out = proj_out.ExportToWkt()</p>\n<p>ds_out.SetProjection(proj_out)</p>\n<p>method = gdal.GRA_Cubic</p>\n<p>gdal.ReprojectImage(ds_in, ds_out,\nproj_in, proj_out,\nmethod)</p>\n<p>//////////////////</p>\n<p>from osgeo import gdal\nfrom osgeo import osr</p>\n<p>driver = gdal.GetDriverByName(&#39;GTiff&#39;)</p>\n<p>ds_in = gdal.Open(&#39;/DADES/MODELS/PRESCAT/2017/01/01/PRESCAT-2017010100_0.tiff&#39;)</p>\n<p>proj_in = ds_in.GetProjection()</p>\n<p>proj_out = osr.SpatialReference()\nproj_out.ImportFromEPSG(25831)\nproj_out = proj_out.ExportToWkt()</p>\n<p>reproj_file = gdal.AutoCreateWarpedVRT( ds_in, ds_in.GetProjection(), proj_out )</p>\n<p>driver = gdal.GetDriverByName(&quot;GTiff&quot;)\ndest_file = driver.CreateCopy(&quot;/tmp/t.tiff&quot;, reproj_file, 0)</p>\n<p>/////VRT//// --&gt; <Option name=\"INIT_DEST\">0</Option></p>\n<VRTDataset rasterXSize=\"80\" rasterYSize=\"74\" subClass=\"VRTWarpedDataset\">\n  <SRS>PROJCS[\"ETRS89 / UTM zone 31N\",GEOGCS[\"ETRS89\",DATUM[\"European_Terrestrial_Reference_System_1989\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6258\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4258\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",3],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"25831\"]]</SRS>\n  <GeoTransform>  2.4390661575654868e+05,  3.7262015453620070e+03,  0.0000000000000000e+00,  4.7562398508180482e+06,  0.0000000000000000e+00, -3.7262015453620070e+03</GeoTransform>\n  <VRTRasterBand dataType=\"Float32\" band=\"1\" subClass=\"VRTWarpedRasterBand\">\n    <Metadata>\n      <MDI key=\"GRIB_ELEMENT\">PRECIPITACIO</MDI>\n      <MDI key=\"GRIB_REF_TIME\">1483228800</MDI>\n      <MDI key=\"GRIB_SHORT_NAME\">SFC</MDI>\n      <MDI key=\"GRIB_UNIT\">%</MDI>\n      <MDI key=\"GRIB_VALID_TIME\">1483228800</MDI>\n      <MDI key=\"STATISTICS_MAXIMUM\">14,285714149475</MDI>\n      <MDI key=\"STATISTICS_MEAN\">2,1959420650101</MDI>\n      <MDI key=\"STATISTICS_MINIMUM\">0</MDI>\n      <MDI key=\"STATISTICS_STDDEV\">3,4693737669996</MDI>\n    </Metadata>\n    <NoDataValue>-9.99000000000000E+02</NoDataValue>\n    <ColorInterp>Red</ColorInterp>\n    <Histograms>\n      <HistItem>\n        <HistMin>-0,007142857074737548</HistMin>\n        <HistMax>14,29285700654984</HistMax>\n        <BucketCount>1000</BucketCount>\n        <IncludeOutOfRange>0</IncludeOutOfRange>\n        <Approximate>0</Approximate>\n        <HistCounts>1861|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|6|0|0|0|0|0|0|0|0|0|0|0|0|0|156|0|0|0|0|0|0|0|0|0|0|0|0|0|0|578|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|34|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|136|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|26|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|57</HistCounts>\n      </HistItem>\n    </Histograms>\n  </VRTRasterBand>\n  <VRTRasterBand dataType=\"Float32\" band=\"2\" subClass=\"VRTWarpedRasterBand\">\n    <Metadata>\n      <MDI key=\"GRIB_ELEMENT\">TMAX</MDI>\n      <MDI key=\"GRIB_REF_TIME\">1483228800</MDI>\n      <MDI key=\"GRIB_SHORT_NAME\">SFC</MDI>\n      <MDI key=\"GRIB_UNIT\">C</MDI>\n      <MDI key=\"GRIB_VALID_TIME\">1483228800</MDI>\n      <MDI key=\"STATISTICS_MAXIMUM\">18,936731338501</MDI>\n      <MDI key=\"STATISTICS_MEAN\">10,682648704348</MDI>\n      <MDI key=\"STATISTICS_MINIMUM\">0</MDI>\n      <MDI key=\"STATISTICS_STDDEV\">3,6697751457734</MDI>\n    </Metadata>\n    <NoDataValue>-9.99000000000000E+02</NoDataValue>\n    <ColorInterp>Green</ColorInterp>\n    <Histograms>\n      <HistItem>\n        <HistMin>-0,009468365669250488</HistMin>\n        <HistMax>18,94619970417023</HistMax>\n        <BucketCount>1000</BucketCount>\n        <IncludeOutOfRange>0</IncludeOutOfRange>\n        <Approximate>0</Approximate>\n        <HistCounts>180|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2|0|0|0|0|0|1|0|0|0|0|1|0|0|0|0|0|0|0|2|3|0|0|0|3|0|0|0|0|0|0|0|0|0|2|0|0|0|0|0|3|0|0|1|1|0|0|2|0|0|1|0|0|0|1|2|0|1|1|1|1|0|2|2|2|1|2|0|2|2|0|0|0|0|1|1|0|0|1|1|1|0|1|0|1|3|0|0|0|2|0|2|3|1|3|0|0|2|2|1|0|1|3|1|3|3|4|6|3|1|8|12|2|6|9|7|5|9|11|1|6|13|5|7|2|7|10|8|10|4|5|14|5|6|15|10|10|7|9|10|11|12|12|13|16|9|9|14|9|8|5|17|12|11|17|10|15|13|9|11|12|10|10|5|12|16|5|9|11|14|10|9|11|10|13|6|7|7|12|8|9|13|10|6|4|11|12|9|7|8|17|8|12|7|9|9|5|10|7|13|7|12|5|10|7|9|2|3|10|9|6|11|5|6|5|9|6|8|9|9|5|9|3|6|8|4|6|7|13|7|3|11|5|3|3|4|2|6|6|2|7|7|7|9|3|5|14|5|6|6|5|7|4|10|7|3|7|6|4|3|1|5|4|2|7|0|5|4|5|2|5|6|2|1|4|3|5|3|2|0|1|3|2|5|5|5|6|4|4|4|4|4|3|3|2|2|4|1|3|1|4|6|5|5|6|4|4|1|6|6|1|3|3|3|3|1|7|4|7|3|3|10|4|5|6|4|1|3|4|4|9|3|7|2|2|7|8|2|3|3|4|5|9|2|7|3|5|7|6|9|7|3|5|6|5|1|4|4|7|5|8|4|1|2|2|5|6|7|6|6|6|5|6|7|5|5|8|3|6|6|6|3|9|1|6|10|4|7|4|8|9|6|1|8|5|9|5|1|12|6|6|9|5|7|10|6|5|4|8|6|12|6|6|13|9|14|7|1|5|9|7|2|4|7|4|8|10|10|3|5|6|6|6|4|7|6|6|3|4|2|8|4|7|5|5|4|5|12|4|5|7|6|6|7|6|5|5|6|5|7|10|10|13|9|9|7|6|13|3|12|4|5|8|9|1|3|3|8|2|8|4|4|9|6|4|6|6|2|9|5|6|3|1|6|3|1|5|2|3|6|2|0|8|1|1|0|2|6|3|0|8|4|3|3|3|3|0|2|2|5|1|2|0|0|0|3|0|0|0|2|2|0|0|1|1|2|0|0|1|0|3|1|0|0|0|1|2|0|0|1|1|0|0|0|1|0|2|0|1|0|0|0|1|0|0|0|0|2|0|2|0|1|0|0|0|1|1|0|1|0|0|3|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|3|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1</HistCounts>\n      </HistItem>\n    </Histograms>\n  </VRTRasterBand>\n  <VRTRasterBand dataType=\"Float32\" band=\"3\" subClass=\"VRTWarpedRasterBand\">\n    <Metadata>\n      <MDI key=\"GRIB_ELEMENT\">TMIN</MDI>\n      <MDI key=\"GRIB_REF_TIME\">1483228800</MDI>\n      <MDI key=\"GRIB_SHORT_NAME\">SFC</MDI>\n      <MDI key=\"GRIB_UNIT\">C</MDI>\n      <MDI key=\"GRIB_VALID_TIME\">1483228800</MDI>\n      <MDI key=\"STATISTICS_MAXIMUM\">9,4128904342651</MDI>\n      <MDI key=\"STATISTICS_MEAN\">-0,14479932243621</MDI>\n      <MDI key=\"STATISTICS_MINIMUM\">-5,2890510559082</MDI>\n      <MDI key=\"STATISTICS_STDDEV\">2,6801332980903</MDI>\n    </Metadata>\n    <NoDataValue>-9.99000000000000E+02</NoDataValue>\n    <ColorInterp>Blue</ColorInterp>\n    <Histograms>\n      <HistItem>\n        <HistMin>-5,29640202665329</HistMin>\n        <HistMax>9,420241405010223</HistMax>\n        <BucketCount>1000</BucketCount>\n        <IncludeOutOfRange>0</IncludeOutOfRange>\n        <Approximate>0</Approximate>\n        <HistCounts>2|1|0|0|0|0|0|0|1|2|0|1|0|1|0|1|0|2|1|1|4|2|1|4|2|0|7|1|1|2|2|0|2|1|1|0|3|1|3|1|1|4|2|2|0|6|2|0|4|2|0|2|4|5|1|3|9|4|6|3|5|7|5|2|6|5|4|6|2|1|5|2|9|2|4|2|3|4|6|6|2|2|8|5|2|3|1|5|3|0|3|4|6|6|2|4|5|4|3|8|4|2|4|3|6|5|6|5|2|4|2|2|5|2|5|3|7|3|4|6|2|1|2|3|5|7|6|4|2|3|5|2|8|4|4|7|4|5|1|5|10|5|2|2|9|3|5|2|4|0|3|7|2|3|3|3|5|8|10|9|5|7|4|5|9|1|3|2|4|7|6|4|2|7|1|4|4|6|3|1|7|5|4|1|5|3|2|5|1|1|3|3|5|6|3|9|3|4|2|4|4|2|1|2|2|6|5|2|1|4|7|3|3|7|5|1|1|4|6|0|1|3|3|2|4|1|8|7|1|4|4|4|2|2|5|4|5|4|5|2|5|3|3|4|3|2|8|7|4|3|3|5|1|5|3|5|8|1|8|5|3|0|2|9|3|3|3|3|6|2|6|4|7|6|5|4|8|3|1|2|8|5|1|4|5|4|10|10|3|2|3|4|7|8|5|7|5|5|5|9|6|11|8|4|8|7|6|8|6|3|7|9|5|4|5|5|9|4|3|3|8|7|6|4|5|8|3|7|4|7|6|11|3|8|6|12|5|7|10|10|8|7|3|7|4|6|10|5|6|5|8|6|7|7|2|6|6|3|5|186|5|4|6|3|5|7|1|9|9|5|4|8|1|4|5|7|1|6|4|3|4|0|4|9|3|2|8|5|9|6|5|3|4|3|1|4|1|9|5|3|6|5|0|6|5|2|4|4|2|3|6|2|5|9|3|3|2|3|0|3|6|5|2|4|4|1|5|6|2|0|7|5|3|3|5|2|3|8|4|7|1|10|2|3|2|3|2|5|4|6|6|6|2|4|3|7|3|2|4|2|5|0|3|5|3|4|5|4|5|1|7|6|3|4|10|5|1|2|4|3|6|3|3|3|3|5|6|5|9|6|5|1|6|12|4|1|5|6|2|2|5|3|3|4|6|2|4|2|0|2|5|1|3|2|6|5|5|2|4|4|2|3|4|2|2|3|3|2|6|4|0|5|6|2|1|4|1|1|3|3|1|5|0|2|4|3|3|3|10|1|0|4|9|4|0|3|2|7|0|4|0|0|6|0|3|2|3|7|3|2|3|1|0|1|7|4|4|2|1|3|1|2|5|3|1|1|1|1|7|3|7|3|0|2|6|5|5|1|0|4|3|0|5|2|0|0|5|3|6|6|7|1|2|5|3|3|5|4|4|5|1|0|2|1|0|2|2|1|3|2|5|0|1|1|2|3|3|3|3|2|2|2|1|3|2|0|2|2|0|2|2|5|3|1|1|0|2|1|2|2|0|5|1|3|0|3|1|3|4|4|0|2|0|1|5|1|1|1|3|2|2|6|0|4|0|0|0|0|0|0|1|4|2|2|1|2|2|0|3|2|0|1|0|3|3|5|2|3|0|2|2|3|1|2|1|0|2|3|1|0|0|1|1|3|2|0|3|2|1|0|1|1|0|2|0|1|2|0|0|0|0|1|2|0|0|0|2|4|0|0|0|2|1|1|0|1|0|1|2|0|1|1|1|0|0|0|0|0|0|0|0|0|0|1|2|0|0|1|0|1|2|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|0|0|0|1|2|0|0|0|1|0|1|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|1|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1</HistCounts>\n      </HistItem>\n    </Histograms>\n  </VRTRasterBand>\n  <VRTRasterBand dataType=\"Float32\" band=\"4\" subClass=\"VRTWarpedRasterBand\">\n    <Metadata>\n      <MDI key=\"GRIB_ELEMENT\">ESTATCEL</MDI>\n      <MDI key=\"GRIB_REF_TIME\">1483228800</MDI>\n      <MDI key=\"GRIB_SHORT_NAME\">SFC</MDI>\n      <MDI key=\"GRIB_UNIT\">--</MDI>\n      <MDI key=\"GRIB_VALID_TIME\">1483228800</MDI>\n      <MDI key=\"STATISTICS_MAXIMUM\">3</MDI>\n      <MDI key=\"STATISTICS_MEAN\">1,2654991243433</MDI>\n      <MDI key=\"STATISTICS_MINIMUM\">0</MDI>\n      <MDI key=\"STATISTICS_STDDEV\">0,80600888335785</MDI>\n    </Metadata>\n    <NoDataValue>-9.99000000000000E+02</NoDataValue>\n  </VRTRasterBand>\n  <BlockXSize>80</BlockXSize>\n  <BlockYSize>74</BlockYSize>\n  <GDALWarpOptions>\n    <WarpMemoryLimit>6.71089e+07</WarpMemoryLimit>\n    <ResampleAlg>NearestNeighbour</ResampleAlg>\n    <WorkingDataType>Float32</WorkingDataType>\n    <Option name=\"INIT_DEST\">0</Option>\n    <Option name=\"UNIFIED_SRC_NODATA\">YES</Option>\n    <Option name=\"EXTRA_ELTS\">1</Option>\n    <Option name=\"EXTRA_ELTS\">1</Option>\n    <SourceDataset relativeToVRT=\"0\">/DADES/MODELS/PRESCAT/2017/01/01/PRESCAT-2017010100_0.tiff</SourceDataset>\n    <Transformer>\n      <GenImgProjTransformer>\n        <SrcGeoTransform>-0.0199999511241912842,0.0399999991059303284,0,42.9200007356703281,0,-0.0399999991059303284</SrcGeoTransform>\n        <SrcInvGeoTransform>0.49999878928062591,25.000000558793559,0,1073.00004237517805,0,-25.000000558793559</SrcInvGeoTransform>\n        <DstGeoTransform>243906.615756548679,3726.20154536200698,0,4756239.85081804823,0,-3726.20154536200698</DstGeoTransform>\n        <DstInvGeoTransform>-65.4571720792018255,0.000268369809798586279,0,1276.4311841204958,0,-0.000268369809798586279</DstInvGeoTransform>\n        <ReprojectTransformer>\n          <ReprojectionTransformer>\n            <SourceSRS>GEOGCS[\"ED50\",DATUM[\"European_Datum_1950\",SPHEROID[\"International 1924\",6378388,297.000000000005,AUTHORITY[\"EPSG\",\"7022\"]],AUTHORITY[\"EPSG\",\"6230\"]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433],AUTHORITY[\"EPSG\",\"4230\"],EXTENSION[\"CENTER_LONG\",1.74]]</SourceSRS>\n            <TargetSRS>PROJCS[\"ETRS89 / UTM zone 31N\",GEOGCS[\"ETRS89\",DATUM[\"European_Terrestrial_Reference_System_1989\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY[\"EPSG\",\"6258\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4258\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",3],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"25831\"]]</TargetSRS>\n          </ReprojectionTransformer>\n        </ReprojectTransformer>\n      </GenImgProjTransformer>\n    </Transformer>\n    <BandList>\n      <BandMapping src=\"1\" dst=\"1\">\n        <SrcNoDataReal>-999</SrcNoDataReal>\n        <SrcNoDataImag>0</SrcNoDataImag>\n        <DstNoDataReal>-999</DstNoDataReal>\n        <DstNoDataImag>0</DstNoDataImag>\n      </BandMapping>\n      <BandMapping src=\"2\" dst=\"2\">\n        <SrcNoDataReal>0</SrcNoDataReal>\n        <SrcNoDataImag>0</SrcNoDataImag>\n        <DstNoDataReal>0</DstNoDataReal>\n        <DstNoDataImag>0</DstNoDataImag>\n      </BandMapping>\n      <BandMapping src=\"3\" dst=\"3\">\n        <SrcNoDataReal>0</SrcNoDataReal>\n        <SrcNoDataImag>0</SrcNoDataImag>\n        <DstNoDataReal>0</DstNoDataReal>\n        <DstNoDataImag>0</DstNoDataImag>\n      </BandMapping>\n      <BandMapping src=\"4\" dst=\"4\">\n        <SrcNoDataReal>0</SrcNoDataReal>\n        <SrcNoDataImag>0</SrcNoDataImag>\n        <DstNoDataReal>0</DstNoDataReal>\n        <DstNoDataImag>0</DstNoDataImag>\n      </BandMapping>\n    </BandList>\n  </GDALWarpOptions>\n</VRTDataset>\n\n<hr>\n<p>./gdalwarp --config GDAL_DATA &quot;../data/&quot; -t_srs &quot;EPSG:25831&quot; /DADES/MODELS/PRESCAT/2017/01/01/PRESCAT-2017010100_0.tiff /tmp/l.tiff</p>\n<p>./configure\nmake\ncd swig/python\npython setup install</p>\n<p>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/tmp/gdal-2.1.0/.libs:/usr/lib64\nexport LD_LIBRARY_PATH\nGDAL_DATA=/tmp/gdal-2.1.0/data\nexport GDAL_DATA</p>\n<hr>\n<h2 id=\"links\">Links</h2>\n<p><a href=\"http://www.gdal.org/warptut.html\">http://www.gdal.org/warptut.html</a>\n<a href=\"http://www.gdal.org/gdal_tutorial.html\">http://www.gdal.org/gdal_tutorial.html</a></p>\n<p><a href=\"https://github.com/rouault/gdal2/blob/trunk/gdal/swig/python/scripts/gdal2tiles.py\">https://github.com/rouault/gdal2/blob/trunk/gdal/swig/python/scripts/gdal2tiles.py</a></p>\n<p><a href=\"http://gis.stackexchange.com/questions/143966/why-is-gdalwarp-changing-value-in-nodata-pixels\">http://gis.stackexchange.com/questions/143966/why-is-gdalwarp-changing-value-in-nodata-pixels</a>\n<a href=\"http://trac.osgeo.org/gdal/ticket/5675\">http://trac.osgeo.org/gdal/ticket/5675</a></p>\n<p><a href=\"https://gist.github.com/cspanring/5680334\">https://gist.github.com/cspanring/5680334</a></p>\n<p>Install gdal 2.1.0</p>\n",
      "layout": "post",
      "title": "Shortest distance to a geometry in a specified direction using Python",
      "date": "2014-08-16T00:00:00.000Z",
      "categories": "python",
      "tags": [
        "GDAL",
        "projections",
        "raster"
      ],
      "teaser": "shortest-distance-to-geometry.png",
      "description": "The API for gdalwarp in Python using NoData values",
      "thumbnail": "/images/d3/d3-shaded-relief/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>from osgeo import gdal\nfrom osgeo import osr</p>",
      "meta": {
        "relativePath": "posts\\python\\2017-03-09-GDALReproject-NoData.html",
        "createdAt": "2021-05-05T21:42:45.239Z",
        "lastModified": "2021-05-05T21:42:45.239Z",
        "size": 16174,
        "formattedSize": "15.8 KB"
      }
    },
    {
      "id": "posts\\python\\2017-04-20-pycharm-cython",
      "contents": "<p>Some time ago, I explained [how to use coverage and pylint with PyCharm community][coverage]. <a href=\"http://cython.org/\">Cython</a> is also covered by PyCharm professional, but not the community edition, which makes working with cython a bit uncomfortable.</p>\n<p>Here is how I managed to do it.</p>\n<h2 id=\"syntax-hightlighting\">Syntax hightlighting</h2>\n<p>cython files end with <em>.pyx</em>. The syntaxis is similar to python, but the program doesn&#39;t recognize the file. Also, it has some special words that would give error in python, such as <em>cdef</em>. So a new file type must be created. Go to <em>File-&gt;Settings-&gt;Editor-&gt;File Types</em> and add a file type:</p>\n<img src=\"{{ site.baseurl }}/images/python/pycharm-cython/pyx.png\"/>\n\n<p>Then, edit it to make it good for the cython syntax:</p>\n<img src=\"{{ site.baseurl }}/images/python/pycharm-cython/cython.png\"/>\n\n<p>Since there are many words to add, and no way to do it fast, I have exported my settings in [this file][settings], which you can import from <em>File-&gt;Import Settings</em>. I&#39;ll try to keep it updated by adding more keywords.</p>\n<h2 id=\"compiling-the-cython-file\">Compiling the cython file</h2>\n<p>As explained in the <a href=\"http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html\">official cython basic tutorial</a>, the best way to compile the files is creating a <em>setup.py</em> file with the compilation options:</p>\n<p>{% highlight python %}\nfrom distutils.core import setup\nfrom Cython.Build import cythonize</p>\n<p>setup(\next_modules = cythonize(&quot;helloworld.pyx&quot;)\n)\n{% endhighlight %}</p>\n<p>The compilation is then made by running:</p>\n<pre><code>python setup.py build_ext --inplace</code></pre><p>Is possible to automatize this with an <em>external tool</em>:</p>\n<p>Open <em>File-&gt;Settings-&gt;Tools-&gt;External tools</em> and click the <em>+</em> button. You will get a window that has to be filled like this:</p>\n<img src=\"{{ site.baseurl }}/images/python/pycharm-cython/tool.png\"/>\n\n<p>You can run the compilation by going to <em>tools-&gt;External tools-&gt;cython compile</em> any moment or right clicking the file name at the project pane. Then, re-run it by clicking on the play button on the lower pane.</p>\n<p>Usually, all the cython files will be compiled at once with the <em>setup.py</em>, so there is no need for creating special configurations depending on the file.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li>[The settings file][settings]</li>\n<li>[Coverage with Pycharm community][coverage]</li>\n<li><a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a></li>\n<li><a href=\"http://cython.org/\">Cython</a></li>\n<li><a href=\"http://docs.cython.org/en/latest/src/tutorial/cython_tutorial.html\">Cython basic tutorial</a></li>\n<li><a href=\"https://www.jetbrains.com/help/pycharm/2016.3/new-file-type.html\">New file types in PyCharm</a></li>\n</ul>\n<p>[coverage]: {{ site.baseurl }}{% post_url /python/2016-02-15-code-coverage-pylint-pycharm-community %}\n[settings]: {{ site.baseurl }}/images/python/pycharm-cython/settings.jar</p>\n",
      "layout": "post",
      "title": "Cython with PyCharm community",
      "date": "2017-04-20T00:00:00.000Z",
      "categories": "python",
      "tags": [
        "PyCharm",
        "cython"
      ],
      "teaser": "pycharm-coverage.png",
      "excerpt": "<p>Some time ago, I explained [how to use coverage and pylint with PyCharm community][coverage]. <a href=\"http://cython.org/\">Cython</a> is also covered by PyCharm professional, but not the community edition, which makes working with cython a bit uncomfortable.</p>",
      "meta": {
        "relativePath": "posts\\python\\2017-04-20-pycharm-cython.html",
        "createdAt": "2021-05-05T21:42:45.240Z",
        "lastModified": "2021-05-05T21:42:45.240Z",
        "size": 2909,
        "formattedSize": "2.8 KB"
      }
    },
    {
      "id": "posts\\python\\2019-01-19-srtm-download",
      "contents": "<p>The <a href=\"https://en.wikipedia.org/wiki/Shuttle_Radar_Topography_Mission\">SRTM mission</a> gives a global coverage web data. It&#39;s not easy to download it, although certain web sites give tools to do it. One of them, <a href=\"http://srtm.csi.cgiar.org/\">the SRTM 90m DEM Digital Elevation Database</a>, allows to do it in 5x5 degrees tiles.</p>\n<p>I made this script to download an arbitrary region that can be re-projected.</p>\n<h2 id=\"complete-code\">Complete code</h2>\n<p>{% highlight python %}\n#!/usr/bin/env python\n&#39;&#39;&#39;Creates a DEM file downloading the SRTM data and clipping it to the\nspecified bounding box\n&#39;&#39;&#39;\nimport argparse\nimport zipfile\nfrom io import BytesIO\nfrom math import ceil, floor\nfrom os.path import exists</p>\n<p>import gdal\nimport numpy\nimport osr\nimport urllib3</p>\n<p>def dem_creator(out_file, epsg, bbox, res):</p>\n<pre><code>latlon = osr.SpatialReference()\nlatlon.ImportFromEPSG(4326)\n\nusr_srs = osr.SpatialReference()\nusr_srs.ImportFromEPSG(epsg)\n\ntransf = osr.CoordinateTransformation(usr_srs, latlon)\n\nlon0, lat1, _ = transf.TransformPoint(bbox[0], bbox[1])\nlon1, lat0, _ = transf.TransformPoint(bbox[2], bbox[3])\n\ntile_x0 = 1 + floor((lon0 + 180) / 5)\ntile_x1 = 1 + ceil((lon1 + 180) / 5)\n\ntile_y0 = 1 + floor((60 - lat0) / 5)\ntile_y1 = 1 + ceil((60 - lat1) / 5)\n\nout_data = numpy.empty((6001 * (tile_y1 - tile_y0),\n                       6001 * (tile_x1 - tile_x0)))\npos_x = 0\npos_y = 0\nfor i in range(tile_x0, tile_x1):\n    for j in range(tile_y0, tile_y1):\n        data = get_data(i, j)\n        out_data[6001 * pos_y:6001 * pos_y + 6001,\n                 6001 * pos_x:6001 * pos_x + 6001] = data\n        pos_y += 1\n    pos_x += 1\n\ndriver = gdal.GetDriverByName(&#39;MEM&#39;)\nd_s = driver.Create(&#39;&#39;, 6001 * (tile_x1 - tile_x0),\n                    6001 * (tile_y1 - tile_y0), 1, gdal.GDT_Int32)\nd_s.GetRasterBand(1).WriteArray(out_data)\nd_s.SetGeoTransform((-180 + 5*(tile_x0-1), 0.000833333333333, 0,\n                     60 - 5*(tile_y0 - 1), 0, -0.000833333333333))\n\nsrs = osr.SpatialReference()\nsrs.ImportFromEPSG(4326)\nd_s.SetProjection(srs.ExportToWkt())\nd_s.GetRasterBand(1).SetNoDataValue(-32768)\n\ngdal.Warp(out_file, d_s, format=&#39;GTIFF&#39;, dstSRS=&#39;EPSG:{}&#39;.format(epsg),\n          outputBounds=bbox,\n          xRes=res[0], yRes=res[1])</code></pre><p>def get<em>data(i, j):\nurl = &quot;<a href=\"http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm\">http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/srtm</a></em>{:02d}<em>{:02d}.zip&quot;.format(i, j)\nout_file = &quot;/tmp/srtm</em>{:02d}_{:02d}.tif&quot;.format(i, j)\nif not exists(out_file):\nprint(&quot;Downloading: &quot; + url)\nhttp = urllib3.PoolManager()\nr = http.request(&#39;GET&#39;, url)</p>\n<pre><code>    if r.status == 404:\n        return -32768 * numpy.ones((6001, 6001))\n\n    zipdata = BytesIO()\n    zipdata.write(r.data)\n    zip_file = zipfile.ZipFile(zipdata)\n    zip_file.extractall(&quot;/tmp&quot;)\n    r.release_conn()\n\nd_s = gdal.Open(out_file)\nreturn d_s.ReadAsArray()</code></pre><p>if <strong>name</strong> == &#39;<strong>main</strong>&#39;:\nPARSER = argparse.ArgumentParser(description=&#39;Creates a DEM file &#39; +\n&#39;downloading the SRTM data and &#39; +\n&#39;splitting it to the specified &#39; +\n&#39; bounding box&#39;)\nPARSER.add_argument(&#39;out_file&#39;, type=str,\nhelp=&#39;The out GeoTIFF file&#39;)\nPARSER.add_argument(&#39;epsg&#39;, type=int,\nhelp=&#39;The output file EPSG code&#39;)\nPARSER.add_argument(&#39;bbox&#39;, type=float, nargs=4,\nhelp=&#39;The output file bounding box: xmin ymin xmax ymax&#39;)\nPARSER.add_argument(&#39;resolution&#39;, type=float, nargs=2,\nhelp=&#39;The x and y resolution&#39;)\nARGS = PARSER.parse_args()</p>\n<pre><code>try:\n    dem_creator(ARGS.out_file, ARGS.epsg, ARGS.bbox, ARGS.resolution)\nexcept Exception as err:\n    print(&quot;An error occurred&quot;)\n    print(err)</code></pre><p>{% endhighlight %}</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Shuttle_Radar_Topography_Mission\">The SRTM Wikipedia web site</a></li>\n<li><a href=\"http://srtm.csi.cgiar.org/\">The SRTM 90m DEM Digital Elevation Database</a></li>\n</ul>\n<p>The <a href=\"https://es.m.wikipedia.org/wiki/Archivo:P_Space_Shuttle_grey.svg\">space shuttle icon was taken from the Wikipedia</a></p>\n",
      "layout": "post",
      "title": "SRTM data download",
      "date": "2019-01-19T00:00:00.000Z",
      "teaser": "srtm-download.png",
      "categories": "other",
      "tags": [
        "SRTM"
      ],
      "thumbnail": "/images/other/complex-gis-calculations-gpu/twitter.png",
      "twitter-card": "summary",
      "description": "Download and merge SRTM data to create a DEM",
      "excerpt": "<p>The <a href=\"https://en.wikipedia.org/wiki/Shuttle_Radar_Topography_Mission\">SRTM mission</a> gives a global coverage web data. It&apos;s not easy to download it, although certain web sites give tools to do it. One of them, <a href=\"http://srtm.csi.cgiar.org/\">the SRTM 90m DEM Digital Elevation Database</a>, allows to do it in 5x5 degrees tiles.</p>",
      "meta": {
        "relativePath": "posts\\python\\2019-01-19-srtm-download.html",
        "createdAt": "2021-05-05T21:42:45.241Z",
        "lastModified": "2021-05-05T21:42:45.241Z",
        "size": 4299,
        "formattedSize": "4.2 KB"
      }
    },
    {
      "id": "posts\\python\\2018-09-18-gpujs-mapping-performance",
      "contents": "<p>In the [last post][1] we explained how to make a little more complex calculations with [gpu.js][2]. But, how efficient is?</p>\n<p>The temperature calculation is a task I did many years ago, with pure python. Using pure python is a really bad idea in this case, having tools like numpy, cython, etc. The times were about 50 seconds or more, while gpu.js lasts about 1.5 seconds! More than an order of magnitude.</p>\n<h2 id=\"the-code\">The code</h2>\n<p>I made an [example script][3] to test the timing. The result should be the same [as in gpu.js][1], but I made the residuals interpolation calculations in different alternatives, two of them may be different.</p>\n<p>To run the script you will need two things:</p>\n<h3 id=\"dependencies\">Dependencies</h3>\n<p>My <em>pip list</em> command returns this:</p>\n<pre><code>cycler (0.10.0)\nCython (0.28.5)\nGDAL (2.3.1)\nmatplotlib (2.2.3)\nnumpy (1.15.1)\nscikit-learn (0.19.2)\nscipy (1.1.0)\nsklearn (0.0)</code></pre><p>Basically, scikit-learn, with numpy and scipy plus the cython library. Also, matplotlib to plot the data.</p>\n<p>To compile the cython part, there is a <em>setup.py</em> file that has to be run by:</p>\n<pre><code>python setup.py build_ext --inplace</code></pre><p>Now, by running</p>\n<pre><code>python calculate_temp.py</code></pre><p>You will get all the benchmarks</p>\n<h3 id=\"multi-linear-regression\">Multi linear regression</h3>\n<p>To get the regression coefficients, I used scikit-learn:\n{% highlight python %}\ndef calculate_regression(data_file):\nregr = LinearRegression()</p>\n<pre><code>with open(data_file) as f_p:\n    data = load(f_p)\n    temps = []\n    predictors = []\n    lats = []\n    lons = []\n    for station_data in data:\n        temps.append(station_data[&#39;temp&#39;])\n        predictors.append([station_data[&#39;alt&#39;], station_data[&#39;dist&#39;]])\n        lats.append(station_data[&#39;lat&#39;])\n        lons.append(station_data[&#39;lon&#39;])\n\n    regr.fit(predictors, temps)\n    score = regr.score(predictors, temps)\n    residuals = regr.predict(predictors) - temps\n\n    print(&quot;Multiple linear regression score: {}&quot;.format(score))\n    return {&#39;coefs&#39;: regr.coef_, &#39;intercept&#39;: regr.intercept_,\n            &#39;residuals&#39;: array(residuals),\n            &#39;lats&#39;: array(lats), &#39;lons&#39;: array(lons)}</code></pre><p>{% endhighlight %}</p>\n<p>Which is quite straightforward. Just prepare the data and [follow the docs][6].</p>\n<p>Note that the residuals are created applying the regression to the original data:</p>\n<pre><code>residuals = regr.predict(predictors) - temps</code></pre><p>It&#39;s a clean and fast way to do it and allows to access the results later in the script.</p>\n<h3 id=\"applying-the-regression\">Applying the regression</h3>\n<p>Applying the regression results is easy with numpy, since it&#39;s just adding several matrices:\n{% highlight python %}\ndef create*regression_field(regression, vars_file):\nd_s = gdal.Open(vars_file)\ndistances = d_s.GetRasterBand(1).ReadAsArray()\naltitudes = d_s.GetRasterBand(2).ReadAsArray()\ntemperature = (regression[&#39;intercept&#39;] +\naltitudes * regression[&#39;coefs&#39;][0] +\ndistances _ regression[&#39;coefs&#39;][1])\nreturn temperature\n{% endhighlight %}</p>\n<h3 id=\"interpolating-the-residuals\">Interpolating the residuals</h3>\n<p>Interpolating the residuals can be done in several ways. I&#39;ve tested three, two after looking example around and the original I used both at my workplace and in the gpu.js example.</p>\n<h4 id=\"rbf\">rbf</h4>\n<p>The [radial basis function][8] is the one most srecommended by scipy. The results can be a bit strange and the performance is poor, but:</p>\n<p>{% highlight python %}\ndef rbf(regression, dimensions):\nxi = linspace(regression[&#39;lons&#39;].min(), regression[&#39;lons&#39;].max(),\ndimensions[1])\nyi = linspace(regression[&#39;lats&#39;].min(), regression[&#39;lats&#39;].max(),\ndimensions[0])\nxi, yi = meshgrid(xi, yi)\nxi, yi = xi.flatten(), yi.flatten()\ninterp = Rbf(regression[&#39;lons&#39;], regression[&#39;lats&#39;],\nregression[&#39;residuals&#39;], function=&#39;linear&#39;)</p>\n<pre><code>residuals_field = interp(xi, yi).reshape(dimensions)\nreturn residuals_field</code></pre><p>{% endhighlight %}</p>\n<p>The code, basically prepares the data for the <em>Rbf</em> function.</p>\n<h3 id=\"idw\">idw</h3>\n<p>The inverse of the distance weighted code is [taken from a GitHub repo][9]. It&#39;s really efficient and the result is good, but more difficult to understand than the regular inverse of the distance. Also, maintains steep changes, which is not the best situation in our case, where we want a smooth residuals field all around, even if a single station has a different local value:</p>\n<p>{% highlight python %}\ndef idw(regression, dimensions):\nX1 = array(list(zip(regression[&#39;lons&#39;], regression[&#39;lats&#39;])))</p>\n<pre><code>idw_tree = tree(X1, regression[&#39;residuals&#39;])\n\nxi = linspace(regression[&#39;lons&#39;].min(), regression[&#39;lons&#39;].max(),\n              dimensions[1])\nyi = linspace(regression[&#39;lats&#39;].min(), regression[&#39;lats&#39;].max(),\n              dimensions[0])\nX2 = meshgrid(xi, yi)\nX2 = reshape(X2, (2, -1)).T\nz2 = idw_tree(X2)\n\nreturn z2.reshape(dimensions)</code></pre><p>{% endhighlight %}</p>\n<p>Again, the code is basically preparing the data for the function.</p>\n<h3 id=\"inverse-of-the-distance-using-cython\">Inverse of the distance using cython</h3>\n<p>This is the original code I used, and the one in the [previous post][1]. Calculating it with pure numpy was a bit difficult, so I made the original algorithm optimized with [cython][10], so it&#39;s as fast as coded in C. The code to call it is:</p>\n<p>{% highlight python %}\ndef cython_id(regression, dimensions):</p>\n<pre><code>data = {}\n\nfor i in range(len(regression[&#39;lons&#39;])):\n    data[i] = {&#39;x&#39;: regression[&#39;lons&#39;][i],\n               &#39;y&#39;: regression[&#39;lats&#39;][i],\n               &#39;value&#39;: regression[&#39;residuals&#39;][i]}\n\ngeotransform = [min(regression[&#39;lons&#39;]),\n    (max(regression[&#39;lons&#39;]) - min(regression[&#39;lons&#39;]))/dimensions[1],\n    0,\n    max(regression[&#39;lats&#39;]),\n    0,\n    (min(regression[&#39;lats&#39;]) - max(regression[&#39;lats&#39;]))/dimensions[0]\n]\n\nresult = interpolate_residuals(data, dimensions, geotransform)\nreturn result</code></pre><p>{% endhighlight %}\nNote that I used geotransform, which turns things properly.</p>\n<p>The cython code is:\n{% highlight python %}\n#cython: boundscheck=False, wraparound=False, nonecheck=False, cdivision=True</p>\n<p>import numpy as np\ncimport numpy as np\nfrom libc.math cimport sqrt\nfrom libc.math cimport pow\nfrom cpython cimport array\nimport array</p>\n<p>DTYPE = np.float64\nctypedef np.float64_t DTYPE_t</p>\n<p>def interpolate_residuals(residues, size, geotransform):\ncdef array.array da = array.array(&#39;d&#39;, [])\narray.resize(da, size[0] * size[1])\ncdef double[:] cda = da</p>\n<pre><code>xpos0 = []\nypos0 = []\nvalues0 = []\n\nfor key in residues.keys():\n    xpos0.append(residues[key][&#39;x&#39;])\n    ypos0.append(residues[key][&#39;y&#39;])\n    values0.append(residues[key][&#39;value&#39;])\n\ncdef int N\nN = len(xpos0)\n#http://cython.readthedocs.io/en/latest/src/tutorial/array.html\ncdef array.array xpos = array.array(&#39;d&#39;, xpos0)\ncdef double[:] cxpos = xpos\ncdef array.array ypos = array.array(&#39;d&#39;, ypos0)\ncdef double[:] cypos = ypos\ncdef array.array values = array.array(&#39;d&#39;, values0)\ncdef double[:] cvalues = values\n\ncdef int i, j\ncdef int xsize = size[1]\ncdef int ysize = size[0]\ncdef double y\ncdef double x\n\ncdef array.array geotransform0 = array.array(&#39;d&#39;, geotransform)\ncdef double[:] cgeotransform = geotransform0\n\nfor j in range(ysize):\n    y = cgeotransform[3] + j * cgeotransform[5]\n    for i in range(xsize):\n        x = cgeotransform[0] + i * cgeotransform[1]\n        cda[i + j * xsize] = point_residue(x, y, cxpos, cypos, cvalues, N)\n\ndata_array = np.array(cda)\nreturn data_array.reshape(size)</code></pre><p>cdef float point_residue(double x, double y, double[:] xpos, double[:] ypos, double[:] values, int N):\ncdef int power = 2\ncdef int smoothing = 0\ncdef double numerator = 0\ncdef int i\ncdef double denominator\ndenominator = 0</p>\n<pre><code>for i in range(N):\n    dist = sqrt((x - xpos[i]) ** 2 + (\n        y - ypos[i]) ** 2 + smoothing * smoothing)\n\n    if dist &lt; 0.00000000001:\n        return values[i]\n    numerator = numerator + (values[i] / pow(dist, power))\n    denominator = denominator + (1 / pow(dist, power))\n\nif denominator != 0:\n    return numerator / denominator</code></pre><p>{% endhighlight %}</p>\n<p>You have to run</p>\n<pre><code>python setup.py build_ext --inplace</code></pre><p>to compile it before running the script for the first time.</p>\n<h2 id=\"results\">Results</h2>\n<p>In my computer, which is not a new or powerful one, the times were, for the common steps:</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Elapsed time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Regression time</td>\n<td>3 ms</td>\n</tr>\n<tr>\n<td>Temperature field time</td>\n<td>44 ms</td>\n</tr>\n<tr>\n<td>Final field time</td>\n<td>2 ms</td>\n</tr>\n<tr>\n<td>Drawing time</td>\n<td>402 ms</td>\n</tr>\n</tbody></table>\n<p>With the different methods, the times were:</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Residuals field time</th>\n<th>Total time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Rbf</td>\n<td>4101 ms</td>\n<td>4551 ms</td>\n</tr>\n<tr>\n<td>idw</td>\n<td>881 ms</td>\n<td>1084 ms</td>\n</tr>\n<tr>\n<td>cython</td>\n<td>2571 ms</td>\n<td>2775 ms</td>\n</tr>\n</tbody></table>\n<p>So, in the first place, the residuals interpolation is, by far, the most expensive step. The IDW method I found is the fastest option, although I&#39;m not sure that the result is as good as the cython method with the classical inverse of the distance.</p>\n<p>The original gpu.js method lasted:</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Elapsed time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Multiple linear regression</td>\n<td>2 ms</td>\n</tr>\n<tr>\n<td>Calculate the regression field</td>\n<td>209 ms</td>\n</tr>\n<tr>\n<td>Calculate the residuals field</td>\n<td>1084 ms</td>\n</tr>\n<tr>\n<td>Calculate the final field</td>\n<td>52 ms</td>\n</tr>\n<tr>\n<td>Draw the regression field</td>\n<td>65 ms</td>\n</tr>\n<tr>\n<td>Draw residuals field</td>\n<td>70 ms</td>\n</tr>\n<tr>\n<td>Draw final result</td>\n<td>67 ms</td>\n</tr>\n<tr>\n<td><strong>Total time</strong></td>\n<td><strong>1549 ms</strong></td>\n</tr>\n</tbody></table>\n<p>So it&#39;s a really good performance if you think that it&#39;s run on the browser using a non compiled language (although using the GPU, of course!)</p>\n<p>Finally, it would be nice to check the performance against python + GPU, but I have never worked with it.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><p>[Last post: Complex GIS calculations with gpu.js: Temperature interpolation][1]</p>\n</li>\n<li><p>[The gpu.js web site][2]</p>\n</li>\n<li><p>[scikit-learn multiple linear regression][7]</p>\n</li>\n<li><p>[The example script][3]</p>\n</li>\n<li><p>[setup.py for cython][4]</p>\n</li>\n<li><p>[The cython function][5]</p>\n</li>\n<li><p>[idw file][6]</p>\n</li>\n<li><p>[The vars.tiff file][11]</p>\n</li>\n<li><p>[The station data file][12]</p>\n</li>\n<li><p>[radial basis function][8]</p>\n</li>\n<li><p>[IDW library][9]</p>\n</li>\n<li><p>[cython][10]</p>\n</li>\n</ul>\n<p>[1]: {{ site.baseurl }}/other/2018/09/17/gpujs-example.html\n[2]: <a href=\"http://gpu.rocks\">http://gpu.rocks</a>\n[3]: {{ site.baseurl }}/images/python/gpujs-performance/calculate_temp.py\n[4]: {{ site.baseurl }}/images/python/gpujs-performance/setup.py\n[5]: {{ site.baseurl }}/images/python/gpujs-performance/interpolate_residuals.pyx\n[6]: {{ site.baseurl }}/images/python/gpujs-performance/idw.py\n[7]: scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n[8]: <a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.Rbf.html\">https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.Rbf.html</a>\n[9]: <a href=\"https://github.com/paulbrodersen/inverse_distance_weighting\">https://github.com/paulbrodersen/inverse_distance_weighting</a>\n[10]: <a href=\"http://cython.org/\">http://cython.org/</a>\n[11]: {{ site.baseurl }}/images/python/gpujs-performance/vars.tiff\n[12]: {{ site.baseurl }}/images/python/gpujs-performance/station_data.json</p>\n",
      "layout": "post",
      "title": "gpu.js performance",
      "date": "2018-09-18T00:00:00.000Z",
      "teaser": "gpujs-performance.png",
      "categories": "other",
      "tags": [
        "GPU",
        "gpujs",
        "cython"
      ],
      "thumbnail": "/images/python/gpujs-performance/twitter.png",
      "twitter-card": "summary",
      "description": "Compare gpu.js with numpy and cython",
      "excerpt": "<p>In the [last post][1] we explained how to make a little more complex calculations with [gpu.js][2]. But, how efficient is?</p>",
      "meta": {
        "relativePath": "posts\\python\\2018-09-18-gpujs-mapping-performance.html",
        "createdAt": "2021-05-05T21:42:45.240Z",
        "lastModified": "2021-05-05T21:42:45.240Z",
        "size": 11550,
        "formattedSize": "11.3 KB"
      }
    },
    {
      "id": "posts\\svelte\\2020-05-08-xstate-svelte-I",
      "contents": "<p>I&#39;m learning <a href=\"https://xstate.js.org/\">XState</a>. Every time I&#39;ve used redux I find myself getting bugs because the site state becames more and more complex and I don&#39;t handle the transitions and possible states properly.</p>\n<p>Also, I love Svelte. Doing the stuff I like in D3js with it is always possible, but coding with a framework that allows much more complex apps.</p>\n<p>But I didn&#39;t find many documentation on using both, so I decided to do this post to show it.</p>\n<p>I&#39;ve using CodeSandbox for all the examples so the result is visible and editable by yourself if you want to.</p>\n<h1 id=\"using-xstate-and-svelte\">Using XState and Svelte</h1>\n<p>The first thing to do is using the XState state instead of the regular svelte store.</p>\n<p>I started the project copying the standard Svelte template from codesandbox, but if working locally, you could just:</p>\n<pre><code>npx degit sveltejs/template my-svelte-project</code></pre><p>and install XState by running</p>\n<pre><code>npm install --save xstate</code></pre><p>Start the project running</p>\n<pre><code>npm install\nnpm run dev</code></pre><p>Now we can create one of the simplest state machine taken from the docs, that just toggles between two states:</p>\n<p>{% highlight js %}\nimport { Machine } from &quot;xstate&quot;;</p>\n<p>export const toggleMachine = Machine(\n{\nid: &quot;toggle&quot;,\ninitial: &quot;inactive&quot;,\nstates: {\ninactive: {\non: { TOGGLE: &quot;active&quot; }\n},\nactive: {\non: { TOGGLE: &quot;inactive&quot; }\n}\n}\n}\n);\n{% endhighlight %}</p>\n<p>As you can see, the initial state would be <em>inactive</em> and can be changed to <em>active</em> by sending the <em>TOGGLE</em> action. Let&#39;s see the javascript file that does this:</p>\n<p>{% highlight js %}</p>\n<script>\n  import { useMachine } from \"./useMachine\";\n  import { toggleMachine } from \"./toggleMachine\";\n\n  const { state, send } = useMachine(toggleMachine);\n  function handleClick() {\n    send(\"TOGGLE\");\n  }\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n</style>\n\n<main>\n  <h1>Hello {$state.value}</h1>\n  <button on:click={handleClick}>Toggle</button>\n</main>\n{% endhighlight %}\n\n<p>As all the svelte projects, every component has three parts with the javsascript, the css and the html template.</p>\n<ul>\n<li>The <em>useMachine</em> will be explained later, but gives access to the current state and the function to send actions. When the state changes, the rendered component will change too. It&#39;s as easy as this!</li>\n<li>To render the value, use <em>{$state.value}</em>. <a href=\"https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values\">The $ indicates that <em>state</em> is a store and the value has to be accessed this way</a>.</li>\n<li><em>handleClick</em> sends the action when the button is pressed. ote the <em>on:click</em> in the button element</li>\n</ul>\n<p>This is the result:</p>\n<iframe\n     src=\"https://codesandbox.io/embed/traffic-lights-hello-xstate-zd2yl?fontsize=14&hidenavigation=1&module=%2FApp.svelte&theme=light\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"traffic-lights-hello-xstate\"\n     allow=\"\"\n     sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n   ></iframe>\n\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://xstate.js.org/\">XState website</a></li>\n<li><a href=\"https://svelte.dev/docs#4_Prefix_stores_with_$_to_access_their_values\">Accessing a readable store value in Svelte</a></li>\n</ul>\n",
      "layout": "post",
      "title": "XState and Svelte I: initial setup",
      "date": "2020-05-08T00:00:00.000Z",
      "categories": "svelte",
      "teaser": "xpath-svelte1.png",
      "tags": [
        "xstate"
      ],
      "excerpt": "<p>I&apos;m learning <a href=\"https://xstate.js.org/\">XState</a>. Every time I&apos;ve used redux I find myself getting bugs because the site state becames more and more complex and I don&apos;t handle the transitions and possible states properly.</p>",
      "meta": {
        "relativePath": "posts\\svelte\\2020-05-08-xstate-svelte-I.html",
        "createdAt": "2021-05-05T21:42:45.241Z",
        "lastModified": "2021-05-05T21:42:45.241Z",
        "size": 3505,
        "formattedSize": "3.4 KB"
      }
    },
    {
      "id": "posts\\svelte\\2020-08-05-svelte-konva-mapping",
      "contents": "<p>After some attempts <a href=\"https://geoexamples.com/other/2019/12/08/mapping-svelte.html\">mapping with Svelte</a>, I missed using canvas instead of SVG. SVG has the advantage that integrates very well with Svelte, since it&#39;s an XML and the nodes can be managed as if they were HTML. On the other hand, Canvas is more efficient, but it has to be generated entirely with JavaScript.</p>\n<p>At the same time, I found <a href=\"https://konvajs.org/\">Konva</a>, a promising library to draw Canvas elements and make them interactive in an easy way. It allows animations, Drag and Drop, actions, filters, etc. so it&#39;s possible to do the same things as in SVG. I didn&#39;t find any example of Konva for drawing maps, so here we&#39;ll find a declarative way to do it, using Svelte.</p>\n<h1 id=\"using-konva-with-svelte\">Using Konva with Svelte</h1>\n<p>Let&#39;s see first how to plot <em>something</em> using Konva and Svelte. <a href=\"https://svelte.dev/repl/75082b2a3383482d969f99b509f9b7a4?version=3.24.1\">You can check the source code at Svelte REPL</a>. Be patient, since it has to load the npm modules!</p>\n<p>The code here is short, and we have only one component:</p>\n<p>{% highlight js %}</p>\n<script>\n    import {onMount} from 'svelte';\n    import Konva from 'konva';\n\n    let container;\n    onMount(() => {\n    const stage = new Konva.Stage({\n        container: container,\n        width: 400,\n        height: 400,\n    });\n    const layer = new Konva.Layer();\n    const simpleText = new Konva.Text({\n        x: stage.width() / 2,\n        y: 15,\n        text: 'Hello Konva',\n        fontSize: 30,\n        fontFamily: 'Calibri',\n        fill: 'green',\n      });\n        layer.add(simpleText);\n        stage.add(layer);\n    });\n</script>\n\n<div bind:this={container} />\n{% endhighlight %}\n\n<ul>\n<li>Note how the <em>div</em> container is binded to the variable</li>\n<li>Since the component has to be binded, we&#39;ll have to wait until the component is mounted to create the Konva elements</li>\n<li>Konva needs a <em>Stage</em> (cimilar to the Canvas element), one or more <em>Layer</em>, where you can actually draw the objects, and any shape, text or whatever we want to draw.</li>\n</ul>\n<h1 id=\"konva-as-svelte-components\">Konva as Svelte components</h1>\n<p>The example is not bad, but it&#39;s not using any Svelte style coding. It would be cool declaring things like:\n{% highlight html %}\n<Stage>\n<Layer>\n<Element x=100 y=100/>\n<Layer>\n</Stage>\n{% endhighlight %}</p>\n<p>Then, we could use a store to put as many elements as we wanted, for instance. Let&#39;s see how to to that. <a href=\"https://svelte.dev/repl/db922f45dff8483082e18d6555ad5b50?version=3.24.1\">Check the interactive example here</a></p>\n<img src=\"{{ site.baseurl }}/images/svelte/svelte-konva-mapping/circles.png\"/>\n\n<p>We&#39;ll create a component for the Stage, another for the Layer and finally, a Circle component that acually draws a circle.</p>\n<p>The Stage component is like this:</p>\n<p>{% highlight js %}</p>\n<script>\n    import Konva from 'konva';\n    import { onMount, setContext } from 'svelte';\n\n    setContext(\"konva\", {\n        getStage: () => stage\n    });\n\n    let container;\n    let stage; \n    onMount(() => {\n     stage = new Konva.Stage({\n        container: container,\n        width: 400,\n        height: 400,\n    });\n\n    });\n    </script>\n\n<pre><code>&lt;div bind:this={container}&gt;\n    {#if container}\n        &lt;slot&gt;&lt;/slot&gt;\n    {/if}</code></pre></div>\n{% endhighlight %}\n\n<ul>\n<li>As in the other case, you&#39;ll see that we need to create the node where we&#39;ll add all the stuff, plus the binding.</li>\n<li>The slot will allow us to add children components. Layers in this case.</li>\n<li>We create a context. This way, the Layer component will have access to the <em>Konva stage</em> object without passing it in the props. Since this component won&#39;t be touched when creating new drawings, it&#39;s much cleaner.</li>\n</ul>\n<p>Then the Layer component:</p>\n<p>{% highlight js %}</p>\n<script>\n    import Konva from 'konva';\n    import { getContext, setContext } from 'svelte';\n    const { getStage } = getContext(\"konva\");\n    setContext(\"konva_layer\", {\n        getLayer: () => layer\n    });\n    const stage = getStage();\n    let layer = new Konva.Layer();\n    stage.add(layer);\n</script>\n\n<p><slot></slot>\n{% endhighlight %}</p>\n<ul>\n<li>This one is much simpler, since we don&#39;t have to create HTML elements.</li>\n<li>We create another context for the layer, so its children can have access to it.</li>\n</ul>\n<p>Finally, the Circle component is:</p>\n<p>{% highlight js %}</p>\n<script>\n    import Konva from 'konva';\n    import { getContext, onDestroy } from 'svelte';\n\n    export let x = 0;\n    export let y = 0;\n    export let r = 1;\n    export let fill = \"black\";\n    export let stroke = \"black\";\n    export let strokeWidth = 1;\n\n    const { getLayer } = getContext(\"konva_layer\");\n    const layer = getLayer();\n\n    const circle = new Konva.Circle({\n        x: x,\n        y: y,\n        radius: r,\n        fill: fill,\n        stroke: stroke,\n        strokeWidth: strokeWidth,\n      });\n    layer.add(circle);\n    layer.draw();\n    onDestroy(() => circle.destroy());\n</script>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>We export most of the parameters so they can be used as props, although they have a default value</li>\n<li>We have to call <em>layer.draw()</em> or the object won&#39;t be drawn. That&#39;s because we are creating it before the layer is added into the stage.</li>\n<li>We have to destroy the object on deleting the component, or we&#39;ll have memory leaks. Think if we had hundreds of circles appearing and disappearing when a store value changes...</li>\n</ul>\n<p>And now the cool part. To create the drawing, we only call:</p>\n<p>{% highlight js %}\n<Stage>\n<Layer>\n<Circle x=100 y=100 r=23 fill=\"red\" strokeWidth=3/>\n<Circle x=200 y=200 r=13 fill=\"green\" strokeWidth=3/>\n</Layer>\n</Stage>\n{% endhighlight %}</p>\n<h1 id=\"creating-a-map\">Creating a map</h1>\n<p>So now, with the knowledge from the previous examples, we can create a map. <a href=\"https://svelte.dev/repl/7c3e009c6f82414aa011a313b76a5eeb?version=3.24.1\">I created an intermediate (simpler) version of the map, in case somebody wants to take a look</a>. <a href=\"https://svelte.dev/repl/8f38e2c895284c13a3e3f534d01dd171?version=3.24.1\">The final version is here</a>.</p>\n<img src=\"{{ site.baseurl }}/images/svelte/svelte-konva-mapping/map.png\"/>\n\n<p>Let&#39;s start from the other side now! The App.svelte file is this one:</p>\n<p>{% highlight js %}</p>\n<script>\n    import {onMount} from 'svelte';\n    import Stage from './Stage.svelte';\n    import Layer from './Layer.svelte';\n    import Marker from './Marker.svelte';\n    import BackgroundMap from './BackgroundMap.svelte';\n    import { message } from './store.js';\n\n    let message_value;\n    message.subscribe(value => {\n        message_value = value;\n    });\n</script>\n\n<Stage>\n    <Layer>\n        <BackgroundMap />\n    </Layer>\n    <Layer>\n        <Marker lon=-43.1 lat=-22.9068 fill=\"green\" markerMessage=\"Marker: Rio de Janeiro\"/>\n        <Marker lon=2 lat=41 fill=\"green\" markerMessage=\"Marker: Barcelona\"/>\n    </Layer>\n</Stage>\n<p>\n    {message_value}\n</p>\n{% endhighlight %}\n\n<ul>\n<li>We are using a <em>BackgroundMap</em> component and as many <em>Marker</em> components as we want.</li>\n<li>There&#39;s a writable store where the children will put the name of the hovered feature. In the App component we&#39;ll just render it.</li>\n<li>I use two layers because when using one, the markers can&#39;t be detected if they are over a country. z-index is not well managed in konvas.</li>\n</ul>\n<p>The projection and D3 GeoPath are defined in their own file so they can be accessed from all the components:</p>\n<p>{% highlight js %}\nimport { geoPath } from &#39;d3-geo&#39;;\nimport { geoAitoff } from &#39;d3-geo-projection&#39;;</p>\n<p>const width = 600;\nconst height = 400;</p>\n<p>export const projection = geoAitoff()\n.translate([width / 2, height / 2])\n.scale(110);</p>\n<p>export const path = geoPath().projection(projection);\n{% endhighlight %}</p>\n<ul>\n<li>The size and zooms are fixed. If we wanted a more complex map, we could make this a store and then chenge the values from a slider or a mouse event</li>\n</ul>\n<p>The BackgroundMap component is:</p>\n<p>{% highlight js %}</p>\n<script>\nimport Konva from 'konva';\nimport { getContext, onMount } from 'svelte';\nimport { feature } from \"topojson\";\nimport { path } from './projection';\nimport { message } from './store.js';\n\nconst { getLayer } = getContext(\"konva_layer\");\nconst layer = getLayer();\n\nonMount(async function() {\nconst response = await fetch(\n      \"https://gist.githubusercontent.com/denisemauldin/a2fa29af082e85dfaf27d100be01fa47/raw/6b3a5b9b29151739964612c8a7cff23707386d84/readme-world-110m.json\"\n    );\n    const json = await response.json();\n    const topoData = feature(json, json.objects.countries);\n    const data = topoData.features;\n    data.forEach(country =>{\n        const konvaPath = new Konva.Path({\n\n        data: path(country),\n        stroke: 'black',\n            strokeWidth: 0.5\n\n            });\n        konvaPath.on('mouseover', function () {\n        message.set(country.id)\n     });\n        layer.add(konvaPath);\n\n    })\n\n        layer.draw();\n});\n</script>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>We can only draw when the file with the data is downloaded, so we&#39;ll put this in an <em>onMount</em> element</li>\n<li>We iterate for each country and create a Konva element for it. So we&#39;ll have hundreds of them here.</li>\n<li>Note how Konva handles the <em>mouseover</em> event.</li>\n</ul>\n<p>Finally, the markers with animation:</p>\n<p>{% highlight js %}</p>\n<script>\n    import Konva from 'konva';\n    import { projection } from './projection';\n  import { message } from './store.js';\n    import { getContext, onDestroy } from 'svelte';\n\n    export let lon = 0;\n    export let lat = 0;\n    export let fill = \"black\";\n    export let markerMessage = \"Marker\";\n    const coords = projection([lon, lat]);\n\n    const { getLayer } = getContext(\"konva_layer\");\n    const layer = getLayer();\n\n    const konvaPath = new Konva.Star({\n        x: coords[0],\n        y: coords[1],\n        fill: fill,\n            strokeWidth: 0.5,\n        numPoints: 5,\n        innerRadius: 5,\n        outerRadius: 10,\n\n            });\n    konvaPath.on('mouseover', function () {\n        message.set(markerMessage)\n     });\n    layer.add(konvaPath);\n\n    const angularSpeed = 30;\n      const anim = new Konva.Animation(function (frame) {\n        var angleDiff = (frame.timeDiff * angularSpeed) / 1000;\n        konvaPath.rotate(angleDiff);\n      }, layer);\n\n      anim.start();\n\n    layer.draw();\n    onDestroy(() => konvaPath.destroy());\n</script>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>Very similar to the circle case, but with a Star element in this case.</li>\n<li>The animation is a rotation in this case. But the color can be changed too, the size, etc.</li>\n<li>I checked using a path instead of a star and a scale must be applied unless your icon has the proper size. Then, an animation that changes this size can&#39;t be used easily. Also, the scale is difficult to find. There&#39;s a width and height prop that isn&#39;t used.</li>\n</ul>\n<h1 id=\"conclusions\">Conclusions</h1>\n<p>I&#39;m very happy with the result. In not many hours, I could make a base for mapping in an easy way with all the Svelte capabilities. Svelte is awesome!</p>\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://svelte.dev/repl/75082b2a3383482d969f99b509f9b7a4?version=3.24.1\">First example</a> First example: Svelte and Konva</li>\n<li><a href=\"https://svelte.dev/repl/db922f45dff8483082e18d6555ad5b50?version=3.24.1\">Second example</a> Second example: Using components</li>\n<li><a href=\"https://svelte.dev/repl/7c3e009c6f82414aa011a313b76a5eeb?version=3.24.1\">Intermediate third example</a> Intermediate third example</li>\n<li><a href=\"https://svelte.dev/repl/8f38e2c895284c13a3e3f534d01dd171?version=3.24.1\">Third example</a> Second example: Mapping with actions and animations</li>\n<li><a href=\"https://geoexamples.com/other/2019/12/08/mapping-svelte.html\">Mapping with Svelte</a></li>\n<li><a href=\"https://konvajs.org/\">Konva web site</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Mapping with Svelte and Konva",
      "date": "2020-08-05T00:00:00.000Z",
      "categories": "svelte",
      "teaser": "svelte-konva.png",
      "tags": [
        "konva"
      ],
      "thumbnail": "/images/svelte/svelte-konva-mapping/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>After some attempts <a href=\"https://geoexamples.com/other/2019/12/08/mapping-svelte.html\">mapping with Svelte</a>, I missed using canvas instead of SVG. SVG has the advantage that integrates very well with Svelte, since it&apos;s an XML and the nodes can be managed as if they were HTML. On the other hand, Canvas is more efficient, but it has to be generated entirely with JavaScript.</p>",
      "meta": {
        "relativePath": "posts\\svelte\\2020-08-05-svelte-konva-mapping.html",
        "createdAt": "2021-05-05T21:42:45.242Z",
        "lastModified": "2021-05-05T21:42:45.242Z",
        "size": 11427,
        "formattedSize": "11.2 KB"
      }
    },
    {
      "id": "posts\\svelte\\2020-05-23-xstate-svelte-II",
      "contents": "<p>In the <a href=\"/svelte/2020/04/08/gpujs-example.html\">last post</a>, the <a href=\"https://xstate.js.org/\">XState</a> machine combined with Svelte was explained.\nNow, let&#39;s check how to prepare a semaphore to show the library capabilities in a nice way.</p>\n<p>Let&#39;s see a simple way draw a semaphore:\n{% highlight html %}</p>\n<script>\n    export let width = 150;\n    export let height = 150;\n    export let status = \"green\";\n</script>\n\n<p>&lt;svg {width} {height} viewBox=&quot;0 0 120 320&quot;&gt;\n<rect x=\"10\" y=\"10\"  width=\"100\" height=\"300\" rx=\"10\" ry=\"10\" stroke-width=\"10\" stroke=\"black\" />\n&lt;circle r=&quot;40&quot; fill={status===&quot;red&quot;?&quot;red&quot;:&quot;grey&quot;} cx=&quot;60&quot; cy=&quot;60&quot; /&gt;\n&lt;circle r=&quot;40&quot; fill={status===&quot;yellow&quot;?&quot;yellow&quot;:&quot;grey&quot;} cx=&quot;60&quot; cy=&quot;160&quot; /&gt;\n&lt;circle r=&quot;40&quot; fill={status===&quot;green&quot;?&quot;lime&quot;:&quot;grey&quot;} cx=&quot;60&quot; cy=&quot;260&quot; /&gt;\n</svg>\n{% endhighlight %}\nBasically, <code>status</code> can be <code>green</code>, <code>yellow</code> and <code>red</code>. This is what will decide for each light, if it&#39;s gray or coloured. The size can be changed too, so we can create as many traffic lights as we want with the needed size.</p>\n<p>But this semaphore changed the values too fast. To make it more realistic, the lights should turn off and on with a short transition. This can be done with a <a href=\"https://svelte.dev/tutorial/tweened\">svelte tweened motion</a>:</p>\n<p>{% highlight html %}</p>\n<script>\n  import { interpolateLab } from \"d3-interpolate\";\n  import { tweened } from \"svelte/motion\";\n  export let width = 150;\n  export let height = 150;\n  export let status = \"green\";\n\n  const colorRed = tweened(\"rgb(128,128,128)\", {\n    duration: 200,\n    interpolate: interpolateLab\n  });\n\n  const colorYellow = tweened(\"rgb(128,128,128)\", {\n    duration: 200,\n    interpolate: interpolateLab\n  });\n\n  const colorGreen = tweened(\"rgb(128,128,128)\", {\n    duration: 200,\n    interpolate: interpolateLab\n  });\n\n  $: switch (status) {\n    case \"green\":\n      colorYellow.set(\"rgb(128,128,128)\");\n      colorGreen.set(\"rgb(0, 255, 0)\");\n      colorRed.set(\"rgb(128,128,128)\");\n      break;\n    case \"yellow\":\n      colorYellow.set(\"rgb(255, 255, 0)\");\n      colorGreen.set(\"rgb(128,128,128)\");\n      colorRed.set(\"rgb(128,128,128)\");\n      break;\n    case \"red\":\n      colorYellow.set(\"rgb(128,128,128)\");\n      colorGreen.set(\"rgb(128,128,128)\");\n      colorRed.set(\"rgb(255, 0, 0)\");\n      break;\n  }\n</script>\n\n<p>&lt;svg {width} {height} viewBox=&quot;0 0 120 320&quot;&gt;\n<rect x=\"10\" y=\"10\"  width=\"100\" height=\"300\" rx=\"10\" ry=\"10\" stroke-width=\"10\" stroke=\"black\" />\n<circle r=\"40\" fill={$colorRed} cx=\"60\" cy=\"60\" />\n<circle r=\"40\" fill={$colorYellow} cx=\"60\" cy=\"160\" />\n<circle r=\"40\" fill={$colorGreen} cx=\"60\" cy=\"260\" />\n</svg>\n{% endhighlight %}</p>\n<ul>\n<li>First, define the <code>tweened</code> motion for each light. We set the initial value to grey. The interpolation is taken from the d3js library, because it&#39;s a nice way to interpolate colors. Any function that does this would work.</li>\n<li>Then, a reactive function is set. Depending on the status, the colors are set as needed. The motion will do its magic, and the colors will change with a short (200ms) animation.</li>\n</ul>\n<p>Well, but what about controlling the lights? Now that we can draw the lights, we can create a simple function with the states:</p>\n<p>{% highlight html %}</p>\n<script>\n    import TrafficLight from \"./TrafficLight.svelte\";\n    import TrafficLightAnimated from \"./TrafficLightAnimated.svelte\";\n    let status = \"green\";\n\n    function handleClick() {\n      switch (status) {\n        case \"green\":\n          status = \"yellow\";\n          break;\n        case \"yellow\":\n          status = \"red\";\n          break;\n        case \"red\":\n          status = \"green\";\n          break;\n        default:\n          throw new Error(`Bad status: ${status}`);\n      }\n    }\n</script>\n<main>\n    <button on:click={handleClick}>\n        Change\n    </button>\n    <TrafficLight status={status}/>\n    <TrafficLightAnimated status={status}/>\n</main>\n{% endhighlight %}\n\n<p>Of course, XState could be used as well, we&#39;ll se it later.</p>\n<p>The result is this one:</p>\n<iframe\n     src=\"https://codesandbox.io/embed/traffic-lights-the-lights-ohnru?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"traffic-lights-the-lights\"\n     allow=\"\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n<p>The pedestrian lights are similar. The basic difference is that the <em>yellow state</em> is the binking green state:</p>\n<p>{% highlight html %}</p>\n<script>\n   import AmpelmannGrun from \"./AmpelmannGrun.svelte\";\n   import AmpelmannRot from \"./AmpelmannRot.svelte\";\n   export let width = 150;\n   export let height = 150;\n   export let status = \"green\";\n\n   $: greenStatus =\n     status === \"green\" ? \"on\" : status === \"yellow\" ? \"blink\" : \"off\";\n   $: redStatus = status === \"red\" ? \"on\" : \"off\";\n</script>\n\n<p>&lt;svg {width} {height} viewBox=&quot;0 0 120 220&quot;&gt;\n<rect x=\"10\" y=\"10\"  width=\"100\" height=\"200\" rx=\"10\" ry=\"10\" stroke-width=\"10\" stroke=\"black\" />\n<circle r=\"40\" fill=\"#555555\" cx=\"60\" cy=\"60\" />\n<g transform=\"translate(23, 25)\">\n<AmpelmannRot status={redStatus} width=\"70\" height=\"70\"/>\n</g>\n<circle r=\"40\" fill=\"#555555\" cx=\"60\" cy=\"160\" />\n<g transform=\"translate(28, 125)\">\n<AmpelmannGrun status={greenStatus} width=\"70\" height=\"70\"/>\n</g>\n</svg>\n{% endhighlight %}</p>\n<ul>\n<li>Since the SVG is more complicated (source: Wikipedia), the two <em>Ampelmann</em> are included from separete files</li>\n<li>The green light has three states now: <code>on</code>, <code>off</code> and <code>blink</code>. The blink effect is done with svg animations. Check <a href=\"https://codesandbox.io/s/traffic-lights-pedestrian-1ky4d?file=/App.svelte\">the original file on the project</a></li>\n</ul>\n<p>The part of the svg to animate is on line 199:</p>\n<p>{% highlight html %}\n{#if status===&quot;blink&quot;}\n<animate attributeName=\"stop-color\" values=\"{color1}; {colorGrey1}; {color1}\" dur=\"1s\" repeatCount=\"indefinite\"></animate>\n{/if}\n{% endhighlight %}</p>\n <iframe\n     src=\"https://codesandbox.io/embed/traffic-lights-pedestrian-1ky4d?autoresize=1&fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"traffic-lights-pedestrian\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n<p>Finally, we can <a href=\"https://codesandbox.io/s/traffic-lights-state-nodes-9w9n6?file=/App.svelte\">see how xstate can help to coordinate both lights</a>. Let&#39;s look at the <em>machine</em>. I&#39;ve added a <em>message</em> property to each state to understand what are they. There are more than what can seem at first sight:</p>\n<p>{% highlight js %}\nimport { Machine } from &quot;xstate&quot;;</p>\n<p>export const trafficLightsMachine = Machine({\nid: &quot;trafficLights&quot;,\ninitial: &quot;gtrp&quot;,\nstates: {\ngtrp: {\non: { NEXT: &quot;ytrp&quot; },\nmeta: {\nmessage: &quot;Green for traffic, red for pedestrians&quot;\n}\n},\nytrp: {\non: { NEXT: &quot;rtrp&quot; },\nmeta: {\nmessage: &quot;Yellow for traffic, red for pedestrians&quot;\n}\n},\nrtrp: {\non: { NEXT: &quot;rtgp&quot; },\nmeta: {\nmessage: &quot;Red for traffic, red for pedestrians&quot;\n}\n},\nrtgp: {\non: { NEXT: &quot;rtyp&quot; },\nmeta: {\nmessage: &quot;Red for traffic, green for pedestrians&quot;\n}\n},\nrtyp: {\non: { NEXT: &quot;rtrp2&quot; },\nmeta: {\nmessage: &quot;Red for traffic, blinking for pedestrians&quot;\n}\n},\nrtrp2: {\non: { NEXT: &quot;gtrp&quot; },\nmeta: {\nmessage: &quot;Red for traffic, red for pedestrians&quot;\n}\n}\n}\n});\n{% endhighlight %}</p>\n<p>Now, let&#39;s see how do we control the lights:</p>\n<p>{% highlight html %}</p>\n<script>\n        import TrafficLight from \"./TrafficLight.svelte\";\n        import PedestrianLights from \"./PedestrianLights.svelte\";\n        import { useMachine } from \"./useMachine\";\n        import { trafficLightsMachine } from \"./trafficLightsMachine\";\n\n        const { state, send } = useMachine(trafficLightsMachine);\n        function handleClick() {\n          send(\"NEXT\");\n        }\n        $: trafficState =\n          $state.value.indexOf(\"gt\") >= 0\n            ? \"green\"\n            : $state.value.indexOf(\"yt\") >= 0\n            ? \"yellow\"\n            : \"red\";\n\n        $: pedestrianState =\n          $state.value.indexOf(\"gp\") >= 0\n            ? \"green\"\n            : $state.value.indexOf(\"yp\") >= 0\n            ? \"yellow\"\n            : \"red\";\n</script>\n<main>\n\n<pre><code>&lt;TrafficLight status={trafficState}/&gt;\n&lt;PedestrianLights height={100} status={pedestrianState}/&gt;\n&lt;div&gt;\n    &lt;div&gt;{#each Object.keys($state.meta) as thing}\n        {$state.meta[thing].message}\n    {/each}\n    &lt;/div&gt;\n    &lt;button on:click={handleClick}&gt;\n        Change\n    &lt;/button&gt;\n&lt;/div&gt;</code></pre></main>\n\n<style>\n</style>\n\n<p>{% endhighlight %}</p>\n<ul>\n<li>We just have to mainain two reactive statements that read the state. Depending on its value, they set the status for the two different actual traffic lights we have.</li>\n<li>Then, the lights are added as in the previous examples</li>\n</ul>\n<p>As you can see, it&#39;s really easy to control when the states are well defined</p>\n<iframe\n     src=\"https://codesandbox.io/embed/traffic-lights-state-nodes-9w9n6?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:300px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"traffic-lights-state-nodes\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://xstate.js.org/\">XState website</a></li>\n<li><a href=\"/svelte/2020/04/08/gpujs-example.html\">XState and Svelte I: initial setup</a></li>\n<li><a href=\"https://codesandbox.io/s/traffic-lights-the-lights-ohnru\">First example on CodeSandbox</a></li>\n<li><a href=\"https://codesandbox.io/s/traffic-lights-pedestrian-1ky4d?file=/App.svelte\">Second example on CodeSandbox</a></li>\n<li><a href=\"https://codesandbox.io/s/traffic-lights-state-nodes-9w9n6?file=/App.svelte\">Third example on CodeSandbox</a></li>\n<li><a href=\"https://svelte.dev/tutorial/tweened\">svelte tweened motion</a></li>\n</ul>\n",
      "layout": "post",
      "title": "XState and Svelte II: Creating the traffic lights",
      "date": "2020-05-23T00:00:00.000Z",
      "categories": "svelte",
      "teaser": "xpath-svelte2.png",
      "tags": [
        "xstate"
      ],
      "excerpt": "<p>In the <a href=\"/svelte/2020/04/08/gpujs-example.html\">last post</a>, the <a href=\"https://xstate.js.org/\">XState</a> machine combined with Svelte was explained.\nNow, let&apos;s check how to prepare a semaphore to show the library capabilities in a nice way.</p>",
      "meta": {
        "relativePath": "posts\\svelte\\2020-05-23-xstate-svelte-II.html",
        "createdAt": "2021-05-05T21:42:45.242Z",
        "lastModified": "2021-05-05T21:42:45.242Z",
        "size": 10174,
        "formattedSize": "9.9 KB"
      }
    },
    {
      "id": "posts\\svelte\\2021-01-10-svelte-overpass",
      "contents": "<p>It&#39;s been quite a long time since I wanted to play with the OVerpass API, so I made an example app. I wanted to do it with Svelte too. Finally, the API options I use are quite simple and most of it is done with canvas, but here&#39;s what I learnt!</p>\n<h1 id=\"the-app\">The App</h1>\n<p>You can check the App <a href=\"https://geoexamples.com/svelte-overpass/\">here</a>. As you can see in the picture, it shows the nearest bars (and more!) around you, taking the data from the Overpass API. It&#39;s a <a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">PWA</a>, so you can install it as a mobile phone application just by clicking a button.</p>\n<p><a href=\"https://geoexamples.com/svelte-overpass/\"><img src=\"{{ site.baseurl }}/images/svelte/svelte-overpass/app.gif\" width=\"300\"/></a></p>\n<p>The final code can be found at the <a href=\"https://github.com/rveciana/svelte-overpass\">GitHub repo</a>.</p>\n<h1 id=\"overpass\">Overpass</h1>\n<p>The <a href=\"https://wiki.openstreetmap.org/wiki/Overpass_API#:~:text=The%20Overpass%20API%20(formerly%20known,that%20corresponds%20to%20the%20query.\">Overpass API</a> is a read-only API that server data from the OpenStreetMap project using different query languages. Using it, the whole map for a region could be drawn on the browser (or the backend).</p>\n<p>I&#39;ve used the <a href=\"https://overpass.kumi.systems/\">Kumi</a> site for the data, since it doesn&#39;t have limitations and I saw that other sites were using it successfully.</p>\n<p>The used query id this one:</p>\n<pre><code>const address = `https://overpass.kumi.systems/api/interpreter?data=[out:json][timeout:25000];node[&quot;amenity&quot;=&quot;${amenity}&quot;](around:${radius},${lat},${lng});out body;&gt;;out skel qt;`</code></pre><p>All the text after the <code>data=</code> part is an <a href=\"https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL\">Overpass QL query</a>. It&#39;s a simple one, and quite easy to understand:</p>\n<ul>\n<li>Output format is set to JSON (it can be XML, CSV, etc)</li>\n<li>A timeout is set (I don&#39;t know if this is strictly necessary)</li>\n<li>After the semicolon (that indicates a new statement), the nodes that are of type <code>amenity=bar</code> are queried.<ul>\n<li>This could be a path, instead of a node</li>\n<li>The output is send to the <em>default set</em></li>\n<li>A filter must be added so we don&#39;t download all OSM database! So we only download the data around a radius.</li>\n</ul>\n</li>\n<li>The final statements set the output format<ul>\n<li><code>out body</code> asks to put all the information to use the data. This is the tags associated to each node in the OSM database (name of the bar, address, website, etc). We will be using the name.</li>\n<li><code>out skel</code> prints all the data for geometry</li>\n<li><code>qt</code> sorts by <code>quadtile</code>, a geometry index that makes it faster. I took the queries from examples, and removing it doesn&#39;t change the result.</li>\n</ul>\n</li>\n</ul>\n<p>There are libraries to convert the data into a GeoJSON, but since we are using points, taking the longitude and latitude is really easy. The format is:</p>\n<p>{% highlight json %}\n{\n&quot;version&quot;: 0.6,\n&quot;generator&quot;: &quot;Overpass API 0.7.56.8 7d656e78&quot;,\n&quot;osm3s&quot;: {\n&quot;timestamp_osm_base&quot;: &quot;2021-01-09T16:31:03Z&quot;,\n&quot;copyright&quot;: &quot;The data included in this document is from <a href=\"http://www.openstreetmap.org\">www.openstreetmap.org</a>. The data is made available under ODbL.&quot;\n},\n&quot;elements&quot;: [</p>\n<p>{\n&quot;type&quot;: &quot;node&quot;,\n&quot;id&quot;: 1305366218,\n&quot;lat&quot;: 41.3937290,\n&quot;lon&quot;: 2.1495210,\n&quot;tags&quot;: {\n&quot;addr:street&quot;: &quot;Diagonal&quot;,\n&quot;amenity&quot;: &quot;bar&quot;,\n&quot;name&quot;: &quot;Bar Teo&quot;,\n&quot;outdoor_seating&quot;: &quot;yes&quot;,\n&quot;toilets:wheelchair&quot;: &quot;no&quot;,\n&quot;wheelchair&quot;: &quot;no&quot;\n}\n},\n...\n]\n}\n{% endhighlight %}</p>\n<p>So for each object in <code>elements</code> we can find all the information for one of the results. The code to process the data is:</p>\n<p>{% highlight js %}\n.then(data =&gt;{features = data.elements.map(d=&gt;{\nconst {easting: dataX, northing: dataY} = fromLatLon(d.lat, d.lon);\nconst dist = Math.sqrt((dataX - utmX)<strong>2 + (dataY - utmY)</strong>2);\nconst dir = (180/Math.PI) * Math.atan2((dataX - utmX)/dist, (dataY - utmY)/dist)\nreturn{name: d.tags.name, lng: d.lon, lat: d.lat, dist, dir}\n}).filter(d=&gt; d.name!==undefined).sort((a, b)=&gt; a.dist - b.dist);\n})\n{% endhighlight %}</p>\n<ul>\n<li>fromLatLon is a small library that converts from latlon to utm coordinates. This way, we can calculate distances and directions from our current position (see <em>compass</em> section)</li>\n</ul>\n<h1 id=\"the-svelte-app\">The Svelte App</h1>\n<p>I created the app using the instructions from the <a href=\"https://svelte.dev/blog/svelte-and-typescript\">Svelte TypeScript post</a>. I had to touch a pair of things</p>\n<ul>\n<li><p>The paths on <code>index.html</code> to <code>bundle.js</code>, <code>bundle.css</code> and so on are by default on the root path. If you don&#39;t have a dedicated domain, this will make the app fail when deployed, since <em>Svelte</em> doesn&#39;t have a <em>basepath</em> option as <em>sapper</em> (or I didn&#39;t find it). Luckily, just making the paths relative works, so:</p>\n<p>&lt;script defer src=&#39;/build/bundle.js&#39;&gt;&lt;/script&gt;</p>\n</li>\n</ul>\n<p>becomes</p>\n<pre><code>&lt;script defer src=&#39;/build/bundle.js&#39;&amp;gt;&amp;lt;/script&gt;</code></pre><ul>\n<li>I added several tags so <em>lighthouse</em> improves the score. Like <code>apple-touch-icon</code>, <code>Description</code>, etc. The default template misses several things of this style.</li>\n</ul>\n<p>The App.svelte file is quite simple. It has only the canvas element and the selector. All the other stuff is to initialize the PWA and compass, as we will see. The data is drawn in a separate file.</p>\n<ul>\n<li><p>I struggled a little with the canvas component, because I was setting the size. When doing so, the app got stuck depending on the situation. So the best is creating it like:</p>\n  <canvas bind:this={canvas}>\n\n</li>\n</ul>\n<p>and getting the desired size in a reactive variable like:</p>\n<pre><code>$: canvasSize = Math.min(containerWidth&gt;containerHeight?containerHeight:containerWidth, 500);</code></pre><p>This makes the size to be always adjusted to the container shortest size with a max of 500px. To get the container size, the <code>clientWidth</code> property can be bound on the container element:</p>\n<pre><code>&lt;main bind:clientWidth={containerWidth} bind:clientHeight={containerHeight}&gt;</code></pre><p>Svelte is so cool ;)!</p>\n<h1 id=\"the-compass\">The compass</h1>\n<p>The nice part of the app is the moving compass. To get it, we need three things:</p>\n<ul>\n<li>Getting the geograpgical coordinates</li>\n<li>Getting the device orientation (the geographical one) and the screen orientation (landscape or portrait)</li>\n<li>Drawing the data</li>\n</ul>\n<p>Getting the location is quite standard, just listening to <code>navigator.geolocation.watchPosition</code> and calling a callback. The browser will ask for permission.</p>\n<p>The orientation seemed easy too, but it&#39;s not. I found a <a href=\"https://lamplightdev.github.io/compass/\">compass example</a> (with an error, always points to the initial device position) but many browsers require special configurations to allow the orientation to be read.</p>\n<p>The event to listen to is <code>window.addEventListener(&quot;deviceorientationabsolute&quot;, setHeading);</code> (not a navigator event!?). And it&#39;s using a callback too. In this case, an angle has to be added if the device is in landscape mode (and it can have two positions in landscape mode). The screen orientation lives in the <code>screen</code> object.</p>\n<p>{% highlight js %}</p>\n<p>const screenOrientation = (screen?.orientation?.type??&quot;portrait-primary&quot;).split(&quot;-&quot;);</p>\n<p>const adjustment = screenOrientation[0] === &quot;portrait&quot; ? 0 : 90;\nconst adjustment2 = screenOrientation[1] === &quot;secondary&quot; ? adjustment - 180: adjustment;\nheading = adjustment2 - ev.alpha;</p>\n<p>{% endhighlight %}</p>\n<p>Again, Svelte makes really easy everything. If something in the function arguments change, the function is called. It&#39;s like the <code>useEffect</code> in react, but better!</p>\n<pre><code>$: drawCompass(canvas, canvasSize, features, heading);</code></pre><p>The same hapens to fire the fetch data function. If <code>amenity</code>, <code>lon</code> or <code>lat</code> change, the code is run again.</p>\n<p>To draw the data, I separated the code to a function <code>drawCompass</code> with its own file <code>draw-compass.ts</code>. The funtion uses the typical functions for canvas, so I won&#39;t copy all the code here.</p>\n<h1 id=\"pwa\">PWA</h1>\n<p>This web is a clear candidate to become a PWA since it&#39;s much better on a mobile device that has orientation sensor. To do it I found a <a href=\"https://github.com/NileshSP/personalprofile/blob/master/src/components/biodetails.svelte\">single example</a> in Svelte.</p>\n<p>The first thing was adding the following line to <code>public/index.html</code>:</p>\n<p>&lt;link rel=&#39;manifest&#39; href=&#39;manifest.json&#39;&gt;</p>\n<p>And create the <code>manifest.json</code> file in the same folder:</p>\n<p>{% highlight json %}\n{\n&quot;background_color&quot;: &quot;#ffffff&quot;,\n&quot;theme_color&quot;: &quot;#ffebcd&quot;,\n&quot;name&quot;: &quot;Svelte Overpass&quot;,\n&quot;short_name&quot;: &quot;overpass&quot;,\n&quot;display&quot;: &quot;standalone&quot;,\n&quot;start_url&quot;: &quot;./&quot;,\n&quot;icons&quot;: [\n{\n&quot;src&quot;: &quot;images/svelte-overpass-192.png&quot;,\n&quot;sizes&quot;: &quot;192x192&quot;,\n&quot;type&quot;: &quot;image/png&quot;,\n&quot;purpose&quot;: &quot;any maskable&quot;\n},\n{\n&quot;src&quot;: &quot;images/svelte-overpass-512.png&quot;,\n&quot;sizes&quot;: &quot;512x512&quot;,\n&quot;type&quot;: &quot;image/png&quot;\n}\n],\n&quot;splash_pages&quot;: null\n}\n{% endhighlight %}</p>\n<p>Some lines seem unnecessary but if they are not there, the browser won&#39;t allow the user to save the app on the desktop.</p>\n<p>The next step is adding the service worker. This is also necessary. It must have the <code>fetch</code> method, that many times is omitted.</p>\n<p>{% highlight js %}</p>\n<p>var cacheName = &quot;svelte-overpass-cache-&quot; + Date.now();\nvar filesToCache = [\n&quot;/&quot;,\n&quot;./index.html&quot;,\n&quot;./build/bundle.css&quot;,\n&quot;./build/bundle.js&quot;\n];\nself.addEventListener(&quot;install&quot;, function(e) {\ne.waitUntil(\ncaches.open(cacheName).then(function(cache) {\nreturn cache.addAll(filesToCache);\n})\n);\n});</p>\n<p>self.addEventListener(&quot;activate&quot;, e =&gt; {\ne.waitUntil(\ncaches.keys().then(function(cacheNames) {\nreturn Promise.all(\ncacheNames.map(function(thisCacheName) {\nif (thisCacheName !== cacheName) {\nreturn caches.delete(thisCacheName);\n}\n})\n);\n})\n);\n});</p>\n<p>self.addEventListener(&quot;fetch&quot;, e =&gt; {\ne.respondWith(\n(async function() {\nconst response = await caches.match(e.request);\nreturn response || fetch(e.request);\n})()\n);\n});\n{% endhighlight %}</p>\n<ul>\n<li>Be careful with the paths on the cache! If something fails, the service worker is not installed.</li>\n<li>There&#39;s a dedicated section to check that in the dev tools (first two on the <code>application</code> tab)</li>\n</ul>\n<p>Once this is done, the site must listen to the <code>beforeunnstallprompt</code> event:</p>\n<pre><code>window.addEventListener(&quot;beforeinstallprompt&quot;,handleInstall);</code></pre><p>Once the event is stored, it&#39;s possible to call it when clicking a button. Here the function to prepare and the one that actually installs:</p>\n<p>{% highlight js %}\nconst handleInstall = (e:Event) =&gt; {\nconsole.log(<code>app install called</code>)\ne.preventDefault();\ndeferredPrompt = e;\nbtnInstallAppVisible = true;\nconsole.log(<code>app install call complete</code>)\n};</p>\n<p>const installApp = (e:Event) =&gt; {\nbtnInstallAppVisible = false;\ndeferredPrompt.prompt();\ndeferredPrompt.userChoice\n.then((choiceResult) =&gt; {\nif (choiceResult.outcome === &#39;accepted&#39;) {\nbtnInstallAppVisible = false;\nconsole.log(&#39;User accepted the A2HS prompt&#39;);\n} else {\nconsole.log(&#39;User dismissed the A2HS prompt&#39;);\n}\ndeferredPrompt = null;</p>\n<pre><code>    });</code></pre><p>};\n{% endhighlight %}</p>\n<ul>\n<li>Unistall app before trying again! I was stuck on this and it&#39;s really frustrating because nothing happens and it&#39;s difficult to know why... To uninstall, open the app and click on the second icon at the top when in a computer.</li>\n<li>If the <code>handleInstall</code> function is not logging anything, check the dev tools for some tip.</li>\n<li><code>btnInstallAppVisible</code> is the variable that hides the button when the app is installed and the button is not needed anymore.</li>\n</ul>\n<h1 id=\"deploying-to-github\">Deploying to GitHub</h1>\n<p>I have the blog hosted on GitHub pages. It&#39;s easy and everything works in a single account. I never deployed svelte apps there before, so here&#39;s how:</p>\n<p><code>npm install gh-pages</code></p>\n<p>On <code>package.json</code>, add a <code>deploy</code> script:</p>\n<p><code>&quot;deploy&quot;: &quot;gh-pages -d public/&quot;</code></p>\n<p>Run it at any moment with:</p>\n<p><code>npm run deploy</code></p>\n<p>This will build tha app and deploy a <code>gh-pages</code> branch with everything inside <code>public</code> to the repo. What GitHub needs to show the site.</p>\n<h1 id=\"browsers\">Browsers</h1>\n<p>The app shoud work in most modern browsers. But I&#39;ve found at least, problems with:</p>\n<ul>\n<li>Safari: It&#39;s supposed to work with some permissions. <a href=\"https://github.com/aframevr/aframe/issues/3976\">Found in an issue</a></li>\n<li>Brave: Works with enabling <code>Motion sensors</code> and <code>Location</code> and then changing device orientation. <a href=\"https://github.com/brave/brave-browser/issues/7964\">Found in an issue</a></li>\n</ul>\n<h1 id=\"final-thoughts\">Final thoughts</h1>\n<p>The possibilities are realy cool, but some browsers don&#39;t accept the orientation by default, meaning that most of their users will leave the app without giving the seconds to solve issues. I thing that converting it to a native app shouldn&#39;t be that difficult and would work. Adding the &quot;works better with Chrome&quot; text in an alert is a workaround, but i hate these messages...</p>\n<p>Svelte with typescript it&#39;s still compicated to configure for VSCode. I hope that the new <a href=\"https://svelte.dev/blog/whats-the-deal-with-sveltekit\">SvelteKit</a> is better.</p>\n<p>And it&#39;s a really fast example, the errors should be handled, I&#39;m sure there&#39;s some bug, etc. Don&#39;t test it too much...</p>\n<h1 id=\"links\">Links</h1>\n<ul>\n<li><a href=\"https://geoexamples.com/svelte-overpass/\">App Link</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">PWA</a></li>\n<li><a href=\"https://github.com/rveciana/svelte-overpass\">GitHub repo</a></li>\n<li><a href=\"https://wiki.openstreetmap.org/wiki/Overpass_API#:~:text=The%20Overpass%20API%20(formerly%20known,that%20corresponds%20to%20the%20query.\">Overpass API</a></li>\n<li><a href=\"https://overpass.kumi.systems/\">Kumi Overpass Site</a></li>\n<li><a href=\"https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL\">Overpass QL</a></li>\n<li><a href=\"https://svelte.dev/blog/svelte-and-typescript\">Svelte TypeScript</a></li>\n<li><a href=\"https://svelte.dev/blog/whats-the-deal-with-sveltekit\">SvelteKit</a></li>\n<li><a href=\"https://lamplightdev.github.io/compass/\">Compass example app</a></li>\n<li><a href=\"https://github.com/NileshSP/personalprofile/blob/master/src/components/biodetails.svelte\">PWA example</a></li>\n<li><a href=\"https://github.com/aframevr/aframe/issues/3976\">Safari Issue</a></li>\n<li><a href=\"https://github.com/brave/brave-browser/issues/7964\">Brave Issue</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Playing with OSM Overpass and Svelte",
      "date": "2021-01-10T00:00:00.000Z",
      "categories": "svelte",
      "teaser": "overpass-svelte.png",
      "tags": [
        "osm",
        "overpass"
      ],
      "excerpt": "<p>It&apos;s been quite a long time since I wanted to play with the OVerpass API, so I made an example app. I wanted to do it with Svelte too. Finally, the API options I use are quite simple and most of it is done with canvas, but here&apos;s what I learnt!</p>",
      "meta": {
        "relativePath": "posts\\svelte\\2021-01-10-svelte-overpass.html",
        "createdAt": "2021-05-05T21:42:45.242Z",
        "lastModified": "2021-05-05T21:42:45.242Z",
        "size": 13509,
        "formattedSize": "13.2 KB"
      }
    },
    {
      "id": "posts\\svelte\\2021-05-05-migrating-jekyll-to-svelte",
      "contents": "<p>Five years ago I changed my <a href=\"http://geoexamples.blogspot.com/\">old blogger blog</a> to Jekyll. Now I&#39;ve changed to Svelte, and here you have the steps and issues I found. You can find <a href=\"https://github.com/rveciana/geoexamples-blog\">the blog code repo here</a>.</p>\n<h3 id=\"toc\">TOC</h3>\n<ul>\n<li><a href=\"#why\">Why?</a></li>\n<li><a href=\"#technologies-used\">Technologies used</a></li>\n<li><a href=\"#starting-the-project\">Starting the project</a></li>\n<li><a href=\"#packagejson\">package.json</a></li>\n<li><a href=\"#markdown-config-json\">markdown-config-json</a></li>\n<li><a href=\"#svelte-config\">Svelte config</a></li>\n<li><a href=\"#apphtml-and-layoutsvelte\">app.html and $layout.svelte</a></li>\n<li><a href=\"#endpoints\">Endpoints</a></li>\n<li><a href=\"#getting-the-data\">Getting the data</a></li>\n<li><a href=\"#components\">Components</a></li>\n<li><a href=\"#routes\">Routes</a></li>\n<li><a href=\"#deploying\">Deploying</a></li>\n<li><a href=\"#links\">Links</a></li>\n</ul>\n<h2 id=\"why\">Why?</h2>\n<p>There are many reasons to change an old Jekyll blog (but mine is, honestly, that I wanted to learn Svelte-Kit!).</p>\n<ul>\n<li>Jekyll is getting old, so the possibilities with more modern JavaScript tools is poor</li>\n<li>It&#39;s really slow when processing changes</li>\n<li>It&#39;s made in Ruby, which is fine, but not a language I know, so modifying it becomes hard for me</li>\n</ul>\n<p>You have more reasons and explanations in <a href=\"https://ghostinspector.com/blog/rebuilding-jekyll-website-next-js-theme-ui/\">this post</a>.</p>\n<p>I could use some of the react based solutions, but I like Svelte and I couldn&#39;t find docs for doing it, so I chose ir. Also, svelte-kit seems a really nice solution, although is still very new.</p>\n<h2 id=\"technologies-used\">Technologies used</h2>\n<ul>\n<li><a href=\"https://kit.svelte.dev/docs\">svelte-kit</a>: All the site functionality is done in svelte, and svelte-kit converts all the routes to static html pages that can be uploaded anywhere</li>\n<li><a href=\"https://github.com/klaytonfaria/markdown-json#readme\">markdown-json</a>: I&#39;ll keep all the entries written in markdown, so they have to be converted to html somehow. This library does it really well, although some files that Jekyll accepted are not correct for markdown-json</li>\n<li><a href=\"https://github.com/PrismJS/prism#readme\">prismjs</a>: The previous library doesn&#39;t transform the code into highlighted html. Prismjs is the library I used to do it. Configuring it it&#39;s not that easy because it doesn&#39;t include python highlighting by default</li>\n<li><a href=\"https://handlebarsjs.com/\">handlebars</a> to replace the Jekyll placeholders with values</li>\n<li><a href=\"https://sass-lang.com/\">Sass</a>: Svelte itself can use SaSS, which is very convenient since I was already using it in Jekyll, so I didn&#39;t change the styles at all</li>\n<li><a href=\"https://pages.github.com/\">GitHub pages</a>: There are better options now, but I didn&#39;t want to change the domain configuration, so the site is stored directly on GitHub. The generated html has to be in the master branch, while Jekyll was deployed directly by GitHub. It&#39;s a point against using this solution.</li>\n</ul>\n<h2 id=\"starting-the-project\">Starting the project</h2>\n<p>Starting the project is as easy as:</p>\n<p>npm init svelte@next my-blog</p>\n<ul>\n<li>We&#39;ll need to create a folder for the blog posts and Jekyll pages pages (I called it content)</li>\n<li>On src/static, I copied the <em>images</em> folder I already had on Jekyll, the favicon, the manifest file and the CNAME file that enables my domain on GitHub pages</li>\n</ul>\n<p>And that&#39;s it. Now, all the code has to be written so the blog renders the markdown entries</p>\n<h2 id=\"packagejson\">package.json</h2>\n<p>{% highlight json %}\n&quot;scripts&quot;: {\n&quot;dev&quot;: &quot;svelte-kit dev&quot;,\n&quot;build&quot;: &quot;npm run contentGen &amp;&amp; svelte-kit build&quot;,\n&quot;start&quot;: &quot;svelte-kit start&quot;,\n&quot;lint&quot;: &quot;prettier --check . &amp;&amp; eslint --ignore-path .gitignore .&quot;,\n&quot;format&quot;: &quot;prettier --write .&quot;,\n&quot;contentGen&quot;: &quot;markdown-json -c markdown-config.json&quot;,\n&quot;watch-md&quot;: &quot;nodemon -e md -x &quot;npm run contentGen&quot;&quot;,\n&quot;dev-md&quot;: &quot;concurrently &quot;npm run dev&quot; &quot;npm run watch-md&quot;&quot;\n}\n{% endhighlight %}</p>\n<ul>\n<li><em>npm run dev will</em> start the main svelte server, and reload the content when the Svelte files change. The result can be seen on <em>localhost:3000</em> by default</li>\n<li><em>npm run contentGen</em> will process the markdown files</li>\n<li><em>npm run watch-md</em> will rerun the previous script every time that a markdown file changes</li>\n<li><em>npm run dev-md</em> will run both the Svelte server ans the markdown generator. Stopping it doesn&#39;t work very well (tha console has to be closed to free the port), it&#39;s a point to improve</li>\n</ul>\n<h2 id=\"markdown-config-json\">markdown-config-json</h2>\n<p>This is where the markdown files are rendered into a JSON object with the html to show on the site. The important part is setting the <em>src</em> directory where the markdown lives and a <em>dist</em> pat where we will get all the data from</p>\n<p>{% highlight json %}\n  {\n    &quot;name&quot;: &quot;markdown-json&quot;,\n    &quot;cwd&quot;: &quot;./&quot;,\n    &quot;src&quot;: &quot;content/&quot;,\n    &quot;filePattern&quot;: &quot;<em>*/</em>.m*&quot;,\n    &quot;ignore&quot;: &quot;&quot;,\n    &quot;dist&quot;: &quot;src/lib/data.json&quot;,\n    &quot;metadata&quot;: true,\n    &quot;server&quot;: false\n}\n{% endhighlight %}</p>\n<p>The result, for each entry, is something like this:</p>\n<p>{% highlight json %}\n{\n      &quot;id&quot;: &quot;An id that also matches the markdown path&quot;,\n      &quot;contents&quot;: &quot;The rendered HTML&quot;,\n      &quot;excerpt&quot;: &quot;The first part of the rendered HTML so it can be shown&quot;,\n      &quot;layout&quot;: &quot;post&quot;,\n      &quot;title&quot;: &quot;Post or page title&quot;,\n      &quot;date&quot;: &quot;&quot;,\n      &quot;categories&quot;: &quot;&quot;,\n      &quot;tags&quot;: [],\n      &quot;teaser&quot;: &quot;d3-composite-projections.png&quot;,\n      &quot;meta&quot;: {\n        &quot;relativePath&quot;: &quot;posts\\d3\\2015-05-12-d3-composite-projections.html&quot;,\n        &quot;createdAt&quot;: &quot;2021-04-11T18:28:06.923Z&quot;,\n        &quot;lastModified&quot;: &quot;2021-04-11T18:28:06.923Z&quot;,\n        &quot;size&quot;: 2668,\n        &quot;formattedSize&quot;: &quot;2.6 KB&quot;\n      }\n    }\n{% endhighlight %}</p>\n<p>The first three fields and the metadata will always appear, while the other fields will match the <a href=\"https://jekyllrb.com/docs/front-matter/\">front matter section</a> of your Jekyll file:</p>\n<pre><code>---\nproperty: value\ntags: [first, second, third]\n-npm--</code></pre><p>Those properties are necessary to classify and sort the posts and pages.</p>\n<h2 id=\"svelte-config\">Svelte config</h2>\n<p>The svelte config I used is the following, prepared to generate the static site:</p>\n<p>{% highlight js %}\nconst sveltePreprocess = require(&quot;svelte-preprocess&quot;);\nconst nodeStatic = require(&quot;@sveltejs/adapter-static&quot;);\nconst pkg = require(&quot;./package.json&quot;);\nmodule.exports = {\n    preprocess: sveltePreprocess(),\n    kit: {\n        adapter: nodeStatic({ pages: &quot;../build&quot;, assets: &quot;../build&quot; }),\n        appDir: &quot;staticApp&quot;,\n        target: &quot;#svelte&quot;,\n        vite: {\n            ssr: {\n                noExternal: Object.keys(pkg.dependencies || {})\n            }\n        }\n    }\n};{% endhighlight %}</p>\n<ul>\n<li>appDir generates a static site</li>\n<li>adapter needs to set the build directory as specified. I needed using different repos for the build and the svelte app, so that&#39;s the way you can get a build in another directory</li>\n</ul>\n<h2 id=\"apphtml-and-layoutsvelte\">app.html and $layout.svelte</h2>\n<ul>\n<li><p>All svelte-kit projects have the app.html which is the place to import libraries (I didn&#39;t, better do it with an import inside the svelte files), add meta tags and so on. The meta tags can be added later, but the fixed ones can go here.</p>\n</li>\n<li><p>$layout.svelte is the base to our page, its where the header and footer are added. Let&#39;s see it, as it&#39;s similar to the other svelte files:\n{% highlight html %}</p>\n<script lang=\"ts\" context=\"module\">\n  import type { PageSummary } from '$lib/model';\n  export async function load({ fetch }) {\n      const resultPages = await fetch('/summary_pages.json');\n\n      const pages = (await resultPages.json()) as PageSummary[];\n      return {\n          props: { pages }\n      };\n  }\n</script>\n<script lang=\"ts\">\n  import '../app.scss';\n\n  import Footer from '$lib/components/Footer.svelte';\n  import Header from '$lib/components/Header.svelte';\n  export let pages: PageSummary[] = [];\n</script>\n<Header {pages} />\n<main class=\"page-content\">\n  <div class=\"wrapper\">\n      <slot />\n  </div>\n</main>\n<Footer />\n{% endhighlight %}\n</li>\n<li><p>We have to define all the scripts as typescript or we&#39;ll get errors</p>\n</li>\n<li><p>Note that there are two scripts:</p>\n<ul>\n<li>When adding <em>context=&quot;module&quot;</em>, will run before the component is rendered. In our case, we&#39;ll use it to call the async functions that call the endpoints.</li>\n<li>The other script imports the components and exports the variables that we want to use in the template part (the links to the pages in our case)</li>\n</ul>\n</li>\n<li><p>The <em>slot</em> tag is where the actual pages will put their content</p>\n</li>\n</ul>\n<h2 id=\"endpoints\">Endpoints</h2>\n<p>You can create as many endpoints as you want by adding *ts files to the routes. These files return json objects. It&#39;s a good practice to add the json to the name so they are called as json files in the path.</p>\n<p><em>data.json.ts</em> could be like:</p>\n<p>{% highlight js %}\nexport function get() {\n    return { body: {value: 42}, status: 200 };\n}\n{% endhighlight %}</p>\n<p>The get function sets the get HTTP method, and returns the body of the response and the status. Playing with this is possible to create a complete REST API easily</p>\n<h2 id=\"getting-the-data\">Getting the data</h2>\n<p>A real endpoint using the data created with <em>markdown-json</em> is using this function to do it (<em>get_contents.ts</em>):</p>\n<p>{% highlight js %}\nimport { data } from &#39;$lib/data.json&#39;;\nimport type { PostSummary } from &#39;./model&#39;;</p>\n<p>export const getContents = (num_posts: string | undefined): PostSummary[] =&gt;\n    Object.values(data)\n        .filter((value) =&gt; value.layout === &quot;post&quot;)\n        .sort((a, b) =&gt; new Date(b.date).getTime() - new Date(a.date).getTime())\n        .slice(0, num_posts ? parseInt(num_posts) : undefined)\n        .map((post) =&gt; {\n            const postDate = new Date(post.date);\n            const htmlPath = post.meta.relativePath\n                .replace(/\\/g, &quot;/&quot;)\n                .split(&quot;/&quot;)\n                .pop()\n                .split(&quot;-&quot;)\n                .slice(3)\n                .join(&quot;-&quot;);\n            return {\n                title: post.title,\n                date: post.date,\n                tags: post.tags,\n                categories: post.categories,\n                teaser: post.teaser,\n                slug: <code>/${post.categories}/${postDate.getFullYear()}/${postDate.toLocaleDateString(\n                    &quot;en-US&quot;,\n                    {\n                        month: &quot;2-digit&quot;\n                    }\n                )}/${postDate.toLocaleDateString(&quot;en-US&quot;, { day: &quot;2-digit&quot; })}/${htmlPath}</code>\n            };\n        });{% endhighlight %}</p>\n<p>This is the function that converts the <em>data.json</em> file into the object we need. </p>\n<ul>\n<li>First, the data is filtered so we take only posts and not pages, sorted and ony the first <em>num_posts</em> are returned</li>\n<li>The rest of the function just converts the paths and other Jekyll information into the one we need to show the list of posts</li>\n</ul>\n<h2 id=\"components\">Components</h2>\n<p>Using svelte-kit, the routes can have most of the component, so as separate components I used only one for the header, another for the footer (copied more or less directly from Jekyll) and one for the main page, that renders the image, title and tag for each blog post.</p>\n<h2 id=\"routes\">Routes</h2>\n<p>Routing is one of the nice svelte-kit features. The only problem I found is that using a static build, query strings don&#39;t work, so all the requests must be only with the path.</p>\n<p>There are some routes that don&#39;t have variable, like <em>blog.svelte</em></p>\n<p>{% highlight js %}<script lang=\"ts\" context=\"module\">\n    export async function load({ fetch }) {\n        const resultPosts = await fetch('blog.json');\n        const posts = (await resultPosts.json()) as PostSummary[];\n        const resultTagsAndCategories = await fetch('tags-and-categories.json');\n        const tagsAndCategories = (await resultTagsAndCategories.json()) as TagsAndCategories[];\n        return {\n            props: { posts, tagsAndCategories }\n        };\n    }\n</script></p>\n<script lang=\"ts\">\n    import PostCard from '$lib/components/PostCard.svelte';\n    import type { PostSummary, TagsAndCategories } from '$lib/model';\n    export let posts: PostSummary[] = [];\n    export let tagsAndCategories: TagsAndCategories = { tags: [], categories: [] };\n</script>\n<h1>Categories</h1>\n{#each tagsAndCategories.categories as category, i}<a href=\"/categories/{category}\">{category}</a>\n    {#if i < tagsAndCategories.categories.length - 1},{' '}{/if}\n{/each}\n<h1>Tags</h1>\n<div class=\"tagcloud\">\n    {#each tagsAndCategories.tags as tag}\n        <a\n            href=\"/tags/{tag.label}\"\n            style=\"font-size: {`${\n                70 +\n                100 *\n                    ((tag.occurrences - 1) / Math.max(...tagsAndCategories.tags.map((d) => d.occurrences)))\n            }%`}\">{tag.label}</a\n        >{' '}\n    {/each}\n</div>\n<article class=\"post-content\">\n    <h1>Posts</h1>\n    <ul class=\"post-list\">\n        {#each posts as post}\n            <li>\n                <PostCard {post} />\n            </li>\n        {/each}\n    </ul>\n</article>\n<p class=\"rss-subscribe\">subscribe <a href=\"http://feeds.feedburner.com/Geoexamples\">via RSS</a></p>\n{% endhighlight %}\n\n<p>Only 50 lines to show all entries and a tag cloud! Again, a <em>module</em> context script is run before the component is mounted and provides the data.</p>\n<p>The tags cloud could be in another component, but this was a migration and there were many things to change.</p>\n<p>Each blog entry takes from Jekyll a category and a date in the form:</p>\n<p>  [category]/[year]/[month]/[date]/[slug]</p>\n<p>The file, then, has to go into an identical path and can use the <em>page</em> variable in the <em>load</em> function:</p>\n<p>{% highlight js %}</p>\n<script lang=\"ts\" context=\"module\">\n    export async function load({ page, fetch }) {\n        const resultPosts = await fetch(`${page.params.slug}.json`);\n        const post = (await resultPosts.json()) as Post[];\n        return {\n            props: { post }\n        };\n    }\n</script>\n<p>{% endhighlight %}</p>\n<p>Using it gives us the value of the path. When generating the static web, each possible call will be rendered and we&#39;ll have the json and the html file.</p>\n<p>The endpoint will then have the same path but finished in <em>json.ts</em>. The important part is that the text stored in the data file has to be translated into the final html. This includes replacing the Jekyll placeholders and using <em>Prism</em> to translate the code:</p>\n<p>{% highlight js %}import { configuration } from &#39;$lib/config&#39;;\nimport Handlebars from &#39;handlebars&#39;;\nimport Prism from &#39;prismjs&#39;;</p>\n<p>export const md2html = (mdContent: string): string =&gt; {\n    const template = Handlebars.compile(mdContent);</p>\n<pre><code>const text = template(configuration);\n\nconst codeMatches = text.match(/{% highlight [a-z]* %}(.|\\n)*?{% endhighlight %}/g);\n\nconst formattedCode = codeMatches?.map((d) =&gt; {\n    const lang = d\n        .match(/{% highlight [a-z]* %}/g)[0]\n        .replace(/{% highlight /g, &#39;&#39;)\n        .replace(/ %}/g, &#39;&#39;);\n    const code = d\n        .replace(/&lt;p&gt;/g, &#39;\\n&#39;)\n        .replace(/&lt;\\/p&gt;/g, &#39;&#39;)\n        .replace(/&amp;quot;/gi, `&quot;`)\n        .replace(/&amp;lt;/gi, &#39;&lt;&#39;)\n        .replace(/&amp;gt;/gi, &#39;&gt;&#39;)\n        .replace(/{% highlight [a-z]* %}/g, &#39;&#39;)\n        .replace(/{% endhighlight %}/g, &#39;&#39;);\n\n    switch (lang) {\n        case &#39;js&#39;:\n            return `&lt;pre&gt;&lt;code&gt;${Prism.highlight(code, Prism.languages.javascript)}&lt;/code&gt;&lt;/pre&gt;`;\n        case &#39;json&#39;:\n            return `&lt;pre&gt;&lt;code&gt;${Prism.highlight(code, Prism.languages.javascript)}&lt;/code&gt;&lt;/pre&gt;`;\n        case &#39;html&#39;:\n            return `&lt;pre&gt;&lt;code&gt;${Prism.highlight(code, Prism.languages.html)}&lt;/code&gt;&lt;/pre&gt;`;\n        case &#39;python&#39;:\n            return `&lt;pre&gt;&lt;code&gt;${Prism.highlight(code, Prism.languages.js)}&lt;/code&gt;&lt;/pre&gt;`;\n        default:\n            return `&lt;pre&gt;&lt;code&gt;${Prism.highlight(code, Prism.languages.js)}&lt;/code&gt;&lt;/pre&gt;`;\n    }\n});\n\nreturn codeMatches?.reduce((acc, curr, i) =&gt; acc.replace(curr, formattedCode[i]), text) ?? text;</code></pre><p>};\n{% endhighlight %}</p>\n<ul>\n<li>The placeholders from Jekyll are replaced using handlebars. For instance {{author}} would be changed to the name in the configuration.</li>\n<li>Prism has to detect the language. The problem is that by default it doesn&#39;t include Python and I didn&#39;t find the way to do it in Svelte (instructions are for babel). Using the Javascript hightlighting for python doesn&#39;t give a bad result.</li>\n<li>HTML entities give some problems, so I had to replace them. Maybe there&#39;s a better way...</li>\n</ul>\n<h2 id=\"deploying\">Deploying</h2>\n<p>To make things faster I didn&#39;t want to change my GitHub hosting with gh-pages. To upload a site there, a repo with the name <em>username.github.io</em> has to be created. With Jekyll is cool because you can upload your Jekyll code directly there and GitHub creates the static site directly. In this case, we have the html and this is what has to go there, while the site code can go either in another branch or another repo (my option).</p>\n<p>To make the custom domain work, a file called <em>CNAME</em> with the domain as the content must be in the <em>static</em> folder.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://github.com/rveciana/geoexamples-blog\">Blog code repo</a></li>\n<li><a href=\"http://geoexamples.blogspot.com/\">Blogspot blog</a></li>\n<li><a href=\"https://ghostinspector.com/blog/rebuilding-jekyll-website-next-js-theme-ui/\">Migrating from Jekyll to Nextjs</a></li>\n<li><a href=\"https://kit.svelte.dev/docs\">svelte-kit</a></li>\n<li><a href=\"https://github.com/klaytonfaria/markdown-json#readme\">markdown-json</a></li>\n<li><a href=\"https://github.com/PrismJS/prism#readme\">prismjs</a></li>\n<li><a href=\"https://handlebarsjs.com/\">handlebars</a></li>\n<li><a href=\"https://sass-lang.com/\">Sass</a></li>\n<li><a href=\"https://pages.github.com/\">GitHub pages</a></li>\n<li><a href=\"https://jekyllrb.com/docs/front-matter/\">Front Matter</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Migrating a Jekyll blog to Svelte-kit",
      "date": "2021-05-05T20:00:00.000Z",
      "teaser": "migrate-jekyll-svelte.png",
      "categories": "svelte",
      "tags": [
        "jekyll",
        "svelte-kit",
        "markdown"
      ],
      "thumbnail": "/images/svelte/svelte-migrating-jekyll/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>Five years ago I changed my <a href=\"http://geoexamples.blogspot.com/\">old blogger blog</a> to Jekyll. Now I&apos;ve changed to Svelte, and here you have the steps and issues I found. You can find <a href=\"https://github.com/rveciana/geoexamples-blog\">the blog code repo here</a>.</p>",
      "meta": {
        "relativePath": "posts\\svelte\\2021-05-05-migrating-jekyll-to-svelte.html",
        "createdAt": "2021-05-05T21:57:01.123Z",
        "lastModified": "2021-05-05T21:57:01.123Z",
        "size": 16675,
        "formattedSize": "16.3 KB"
      }
    },
    {
      "id": "posts\\other\\2015-05-26-new-blog-address",
      "contents": "<p>After four years hosted at <a href=\"geoexamples.blogger.com\">blogger</a>, I decided to move the blog to its own domain:</p>\n<p><a href=\"http://geoexamples.com\">http://geoexamples.com</a> is here!</p>\n<img src=\"{{ site.baseurl }}/images/other/IMG_0987.jpg\"/>\n\n<p>The new blog uses <a href=\"http://jekyllrb.com/\">Jekyll</a>, so the interactive will work much better.</p>\n<p>The old posts are still available <a href=\"http://geoexamples.blogspot.com.es/\">at the original blogger site</a>.</p>\n",
      "layout": "post",
      "title": "The blog has moved!",
      "date": "2015-05-25T00:00:00.000Z",
      "categories": "other",
      "tags": [
        "jekyll"
      ],
      "excerpt": "<p>After four years hosted at <a href=\"geoexamples.blogger.com\">blogger</a>, I decided to move the blog to its own domain:</p>",
      "meta": {
        "relativePath": "posts\\other\\2015-05-26-new-blog-address.html",
        "createdAt": "2021-05-05T21:42:45.233Z",
        "lastModified": "2021-05-05T21:42:45.233Z",
        "size": 542,
        "formattedSize": "542 Bytes"
      }
    },
    {
      "id": "posts\\other\\2015-06-04-Jekyll-tags-plugin-gh-pages",
      "contents": "<p>Switching from <a href=\"http://www.blogger.com\">Blogger</a> to <a href=\"http://jekyllrb.com/\">Jekyll</a> was an amazing experience. Everything was quite easy (although not as fast as I thought, it&#39;s always the same). I found only one problem a bit difficult to solve:</p>\n<p>I wanted to use the <a href=\"https://pages.github.com/\">GitHub pages hosting</a>, uploading the Jekyll site source, not the final site, so I could have it everywhere just cloning the repo.</p>\n<p>At the same time, I wanted to have categories and tags pages (a page for each tag and category).</p>\n<p>I found two solutions to the problem:</p>\n<ul>\n<li>Using a plugin like <a href=\"https://github.com/recurser/jekyll-plugins\">this one</a>, which creates the pages. The problem is that GitHub doesn&#39;t accept custom plugins for security reasons.</li>\n<li>Creating the templates for each tag and category, as explained in <a href=\"http://www.minddust.com/post/tags-and-categories-on-github-pages/\">this post</a>. The solutions works perfectly on GitHub pages, but a new template has to be created manually every time a category or tag is added to the blog!</li>\n</ul>\n<p>So I decided creating a small plugin that pre-generates the templated needed by the second solution. You can create the posts locally, and the templated will be created by the plugin. Then, upload the new post and templates to GitHub and that&#39;s it.</p>\n<p>There are two problems:</p>\n<ul>\n<li>When the Jekyll server is started, new tags or categories won&#39;t be generated on the _site folder. You have to start it again. When adding new tags with the server running, works ok. This could be solved using <a href=\"http://jekyllrb.com/docs/plugins/#hooks\">hooks</a>, I guess, but this feature is not released yet.</li>\n<li>Files edited directly on GitHub won&#39;t run the plugin, so the new tags or categories won&#39;t appear until the site is generated locally. Without plugins running there, there is no solution for that.</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<p>Copy the following files to the <em>\\</em>layouts_ dir:</p>\n<p>blog_by_category.html</p>\n<p>{% highlight html %}</p>\n<h1>Articles by category :{{ page.category }}</h1>\n<div>\n    {{ \"{% if site.categories[page.category] \" }}%}\n        {{ \"{% for post in site.categories[page.category] \" }}%}\n            <a href=\"{{  post.url  }}\">{{ \"{{ post.title  }}\"}}</a>\n        {{ \"{% endfor \" }}%}\n    {{ \"{% else \" }}%}\n        <p>There are no posts for this category.</p>\n    {{ \"{% endif \" }}%}\n</div>\n\n<p>{% endhighlight %}</p>\n<p>blog_by_tag.html\n{% highlight html %}</p>\n<h1>Articles by tag :{{ page.tag }}</h1>\n<div>\n   {{ \"{% if site.tags[page.tag] \" }}%}\n        {{ \"{% for post in site.tags[page.tag] \" }}%}\n            <a href={{ post.url }}/>{{  post.title  }}</a>\n        {{ \"{% endfor \" }}%}\n    {{ \"{% else \" }}%}\n        <p>There are no posts for this tag.</p>\n    {{ \"{% endif \" }}%}\n</div>\n\n<p>{% endhighlight %}</p>\n<p>And the plugin to the <em>\\</em>plugins_ dir:</p>\n<p>categories_tags_generator.rb</p>\n<p>{% highlight ruby linenos %}\nmodule Jekyll\nclass TagsGenerator &lt; Generator</p>\n<pre><code>def generate(site)\n    tags_dir = Dir.pwd + &#39;/tags&#39;\n\n    if !Dir.exists?(tags_dir)\n        puts &quot;Creating tags dir&quot;\n        Dir.mkdir(tags_dir)\n    end\n    regenerate_flag = false\n\n    site.tags.each do |i|\n        if !File.exists?(tags_dir + &#39;/&#39; + i[0])\n            puts &quot;Creating tag page for: &quot; + i[0]\n            tag_file = File.new(tags_dir + &#39;/&#39; + i[0], &quot;w&quot;)\n            tag_file.puts(&quot;---\\nlayout: blog_by_tag\\ntag: &quot; + i[0] + &quot;\\npermalink: /tags/&quot; + i[0] + &quot;/\\n---&quot;)\n            tag_file.close\n\n            regenerate_flag = true\n        end\n    end\n\n    if regenerate_flag\n        FileUtils.touch Dir.pwd+&#39;/_config.yml&#39;\n    end\n\n\n\nend</code></pre><p>end\nend\n{% endhighlight %}</p>\n<p>Now you will have the url <em>/tags/[name_of_the_tag]</em> and <em>/categories/[name_of_teh_category]</em> pages accessible. There are many ways to create the links to them. To put an example, I create a category list and a tag word cloud using this code in the <em>blog</em> page:</p>\n<p>Next post will be about maps again!</p>\n",
      "layout": "post",
      "title": "Jekyll tags and categories plugin for gh-pages",
      "date": "2015-06-04T18:40:53.000Z",
      "teaser": "jekyll-tags-categories.png",
      "categories": "other",
      "tags": [
        "jekyll"
      ],
      "excerpt": "<p>Switching from <a href=\"http://www.blogger.com\">Blogger</a> to <a href=\"http://jekyllrb.com/\">Jekyll</a> was an amazing experience. Everything was quite easy (although not as fast as I thought, it&apos;s always the same). I found only one problem a bit difficult to solve:</p>",
      "meta": {
        "relativePath": "posts\\other\\2015-06-04-Jekyll-tags-plugin-gh-pages.html",
        "createdAt": "2021-05-05T21:42:45.234Z",
        "lastModified": "2021-05-05T21:42:45.234Z",
        "size": 4199,
        "formattedSize": "4.1 KB"
      }
    },
    {
      "id": "posts\\other\\2015-11-30-eurostat-data-cartodb",
      "contents": "<p>It&#39;s been a long time since I wanted to learn how to use CartoDB. Everybody around me is using it, even some colleagues are now working there, so I definitely had to know how to use it so I can talk with them!</p>\n<p>I had played a little with it, but without a small challenge it&#39;s difficult to go anywhere. So I&#39;ve made a map with the same EUROSTAT data used in the <a href=\"/d3/2015/09/25/d3-creating-EUROSTAT-maps.html\">previous post</a>. I&#39;m happy with the result, and it&#39;s really a good tool to create nice and useful maps very fast.</p>\n<p>I&#39;ll go really step-by-step (I&#39;m still a rookie), but it&#39;s really straight forward.</p>\n<h2 id=\"obtaining-the-data\">Obtaining the data</h2>\n<p>I wrote how to get the data in the <a href=\"/d3/2015/09/25/d3-creating-EUROSTAT-maps.html\">previous post</a>. To get a ma with CartoDB, merging the data file and the shapefiles is not necessary, since CartoDB can do it for you! So we only need the original <a href=\"http://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units\">NUTS regions shp file</a> and some sample data. We will use again the povertry rate, <a href=\"/d3/2015/09/25/d3-creating-EUROSTAT-maps.html\">learn how to download it</a>. The CSV header must be changed to:</p>\n<p>GEO,GEO(L)/TIME,rate_2010,rate_2011,rate_2012,rate_2013,rate_2014</p>\n<p>If the fields are a number, CartoDB will take the header as data and you will have to remove it later and put names to the columns. It&#39;s better to do it before.</p>\n<p>The shapefile must be in a zip file, since a Shapefile is a set of at least three files, and you can oly upload one at once.</p>\n<h2 id=\"uploading-the-data\">Uploading the data</h2>\n<p>Once you have both files, <em>nuts_rg_01m_2013.zip</em> and <em>povertry_rate.csv</em>, upload them into CartoDB:</p>\n<ul>\n<li>Login to CartoDB (or create an account. I did it directly with my Google account)</li>\n<li>At the main Dashboard, select <em>Your datasets</em> next to your user name at the top left side. Now, you will have something like this:</li>\n</ul>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/upload.png\"/>\n\n<p>If you open the <em>nuts_rg_01m_2013</em> dataset, you will get a table with all the shapefile fields. If you choose the <em>MAP VIEW</em> option, you can get a first view of the Shapefile:</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/nuts.png\"/>\n\n<p>Open now the <em>povertry_rate</em> dataset. There is a thing to do here. By default, the fields are all strings, and we want the povertry rates to be floats, since then CartoDB can order and color the values. This image shoes how to do it. We will use the rate_2013 field, since its the one that will match the NUTS file from 2013 and has all the data (unlike the 2014):</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/data_type.png\"/>\n\n<h2 id=\"merging-the-datasets\">Merging the datasets</h2>\n<p>There are two options to join both tables. The first one is to use the <em>merge datasets</em> button:</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/merge_button.png\"/>\n\n<p>It&#39;s maybe an easiest option, but not very convenient, since it will create a new table with the merged data. If you are using the free CartoDB version, this will make you run out of space very fast. The alternative is creating a good SQL query that joins the two tables dynamically. I&#39;ll explain it in the next section.</p>\n<h2 id=\"creating-the-map\">Creating the map</h2>\n<p>Creating a map is very easy. When you select a <em>dataset</em>, there&#39;s a button to do so. But in our case, we want to change the SQL, so we will create an independent map:</p>\n<p>Go to your account&#39;s maps section:</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/maps_section.png\"/>\n\n<p>Then, create a new map. At the <em>sql section</em>, paste the following code:</p>\n<p>{% highlight sql %}\nSELECT a.cartodb<em>id, a.the_geom_webmercator,\nb.rate_2013, b.geo_l_time as name\nFROM nuts_rg_01m_2013 a, povertry_rate b\nWHERE\nb.geo = a.nuts_id\nAND a.stat_levl</em> = 0\n{% endhighlight %}</p>\n<ul>\n<li>Note that the <em>SELECT</em> is a regular PosgreSQL/PostGIS query</li>\n<li>At the <em>FROM</em> part of the query I&#39;ve selected the two datasets</li>\n<li><em>a.cartodb_id</em> is necessary to make queries over the map (<em>onclick</em> and <em>onmouseover</em>)</li>\n<li><em>a.the_geom_webmercator</em> is necessary to get the geometries from the <em>nuts_rg_01m_2013</em> dataset. When joining two tables, CartoDB needs to know which is the geometry column from the result</li>\n<li>The other selected fields are the name and the povertry rate, necessary to put colors and create the <em>onclick</em> queries</li>\n<li>The <em>WHERE</em> section joins both tables and selects only the countries (NUTS0, stored at the <em>stat<em>levl</em></em> field)</li>\n</ul>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/sql_section.png\"/>\n\n<h2 id=\"formatting-the-map\">Formatting the map</h2>\n<p>Now, we only have to format the map a little. The first thing, let&#39;s create a choropleth map. Just put the settings as in the following image:</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/colours.png\"/>\n\n<p>This will color the map, but with the intervals set automatically. It&#39;s a nice start, but the intervals aren&#39;t the best ones. To change it, just change the <em>css</em> section:</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/colours.png\"/>\n\n<p>You can change the scale at the <em>scale section</em> under the <em>css section</em>. Finally, activate the <em>onclick</em> behaviour:</p>\n<img src=\"{{ site.baseurl }}/images/other/eurostat-cartodb/click.png\"/>\n\n<h2 id=\"the-result\">The result</h2>\n<p>At the top right corner, you can find how to publish the new map. Here you have the result:</p>\n<iframe width=\"100%\" height=\"520\" frameborder=\"0\" src=\"https://rveciana.cartodb.com/viz/5a239902-9074-11e5-a3da-0ecd1babdde5/embed_map\" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>\n\n<p>Once done the first time, creating new maps is really easy. I&#39;m impressed with it!</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"/d3/2015/09/25/d3-creating-EUROSTAT-maps.html\">Mapping EUROSTAT data with D3js</a></li>\n<li><a href=\"http://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units\">Download the NUTS regions file</a></li>\n<li><a href=\"http://docs.cartodb.com/\">CartoDB docs</a></li>\n<li><a href=\"http://docs.cartodb.com/cartodb-editor/\">CartoDB editor docs</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Mapping EUROSTAT data with CartoDB",
      "date": "2015-11-30T00:00:00.000Z",
      "categories": "other",
      "tags": [
        "EUROSTAT",
        "Open Data",
        "CartoDB"
      ],
      "teaser": "cartodb-eurostat.png",
      "excerpt": "<p>It&apos;s been a long time since I wanted to learn how to use CartoDB. Everybody around me is using it, even some colleagues are now working there, so I definitely had to know how to use it so I can talk with them!</p>",
      "meta": {
        "relativePath": "posts\\other\\2015-11-30-eurostat-data-cartodb.html",
        "createdAt": "2021-05-05T21:42:45.234Z",
        "lastModified": "2021-05-05T21:42:45.234Z",
        "size": 6136,
        "formattedSize": "6.0 KB"
      }
    },
    {
      "id": "posts\\other\\2015-12-22-npm_packages",
      "contents": "<p>Some months ago I created a D3js projection, and published it to NMP and Bower. I wanted to use the opportunity to learn about Nodejs, NPM and so on. I write this post to remember all the steps I followed, and maybe is interesting for someone else.</p>\n<h2 id=\"the-final-code\">The final code</h2>\n<p>The library I will talk about is explained in the <a href=\"/d3/2015/05/12/d3-composite-projections.html\">original d3-composite-projections post</a>. You can download it or take a look to the code at the <a href=\"https://github.com/rveciana/d3-composite-projections\">project&#39;s GitHub page</a>. If you already know how to use npm, just type <code>npm install d3-composite-projections</code>.</p>\n<p>I won&#39;t talk about the code itself, but about the tools I used to create it.</p>\n<h2 id=\"creating-the-nodejs-project\">Creating the nodejs project</h2>\n<p>To create a Nodejs project, the first thing is <a href=\"https://nodejs.org/en/download/\">installing Nodejs</a>, of course. In the same step, <a href=\"https://www.npmjs.com/\">npm</a> will be installed.</p>\n<p>The first thing is initializing the project:</p>\n<p>{% highlight bash %}\nnpm init\n{% endhighlight %}</p>\n<p>This will prompt some questions and save the information into a file called <em>package.json</em>. You can change the file whenever you want, so mistakes are not very important.</p>\n<p>This <em>package.json</em> file is important to publish the project, since it holds some information, but also for personal use, because stores the information about the dependencies of the project. You only keep your code, and using the command\n{% highlight bash %}\nnpm install\n{% endhighlight %}\nall the dependencies will be downloaded.</p>\n<p>To add a dependency, one of the following:\n{% highlight bash %}\nnpm install name_of_the package\nnpm install --save name_of_the package\nnpm install --save-dev name_of_the package\n{% endhighlight %}</p>\n<ul>\n<li>The first will install the dependency, but won&#39;t store it into <em>package.json</em>, so using npm install won&#39;t work in the future installations.</li>\n<li>The second options saves the dependency into the <em>dependencies</em> section, so it will be always downloaded</li>\n<li>The third option will save the dependency into the <em>devDependencies</em> section. This allows to avoid downloading them when you only want to use the library, without developing it. For instance, when other software depends on your library, those won&#39;t be installed.</li>\n</ul>\n<h2 id=\"managing-the-workflow-with-gulp\">Managing the workflow with gulp</h2>\n<p>A task manager is very useful when working with node. Since I&#39;m not using an IDE like Eclipse or NetBeans, all the tasks are run from the command line, and when the project grows a little, running all the commands can be long. Gulp helps you to do all this automatically creating what they call <em>tasks</em>. The tasks use <em>streams</em>, which are remember me a little the unix pipes.</p>\n<p>To <a href=\"https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md\">install gulp</a>, you have to type:\n{% highlight bash %}\nnpm install --global gulp\nnpm install --save-dev gulp\n{% endhighlight %}\nThis will install the dependency at the <em>package.json</em> file.</p>\n<p>Now, a <em>gulpfile.js</em> is needed to run gulp. A minimal one would be:\n{% highlight javascript %}\nvar gulp = require(&#39;gulp&#39;);</p>\n<p>gulp.task(&#39;default&#39;, function() {\n// place code for your default task here\n});\n{% endhighlight %}\nRun it by typing <em>gulp</em>. The task is named <em>default</em>, and is the one run by gulp if no parameter is given. If a task named <em>foo</em> is set, you can run just this one by typing <em>gulp foo</em>. This is useful if there are many tasks and you don&#39;t want to run them all.</p>\n<p>Gulp has many many plugins, that make almost everything you need to manage your files: testing, minifying, linting, moving, uploading, etc. Each plugin has to be installed using <em>npm install --save-dev plugin_name</em>.</p>\n<p>Let&#39;s see some tasks from the <a href=\"https://github.com/rveciana/d3-composite-projections/blob/master/gulpfile.js\">project gulpfile</a>:</p>\n<p>{% highlight javascript %}\ngulp.task(&#39;build&#39;, function(){\nreturn gulp.src([&#39;./src/*.js&#39;])\n.pipe(gp_newer(&#39;composite-projections.js&#39;), {extension: &#39;.js&#39;})\n.pipe(gp_strip())\n.pipe(gp_concat(&#39;composite-projections.js&#39;))\n.pipe(gulp.dest(&#39;./&#39;))\n.pipe(gp_rename(&#39;composite-projections.min.js&#39;))\n.pipe(gp_uglify())\n.pipe(gulp.dest(&#39;./&#39;));\n});\n{% endhighlight %}\nThis is one of the most common tasks. It takes several source files, removes the comments, merges them and, finally, minifies the resulting file.</p>\n<ul>\n<li>gulp.src sets the source files. In our case, all the files under the <em>src</em> folder</li>\n<li>gulp<em>newer adds a condition: Only act if the source is newer than the _composite-projections.js</em> file</li>\n<li>gulp_strip removes the comments so the output file is smaller</li>\n<li>gulp<em>concat merges all the files in one, named _composite-projections.js</em>. This will be the main file in our project</li>\n<li>gulp.dest sets the output folder to this stream. Now, the file is saved, but the stream is still open to do the following steps</li>\n<li>gulp_rename changes the name of the output</li>\n<li><a href=\"https://www.npmjs.com/package/gulp-uglify\">gulp_uglify</a> runs <a href=\"https://github.com/mishoo/UglifyJS\">UglifyJS</a>, which minifies the code, renaming all the variables, removing spaces and newlines, etc. so a compact and more efficient file is created</li>\n<li>gulp.dest will save this new minified file too</li>\n</ul>\n<p>To build again the file, just type <em>gulp build</em>. Of course, usually we want to run several tasks at once, and the tasks have their own dependencies too. Those dependencies are set this way:\n{% highlight javascript %}\ngulp.task(&#39;test&#39;, [&#39;build&#39;, &#39;build_separated&#39;, &#39;get_sample_data&#39;], function(){\nreturn gulp.src(&#39;./test/test.js&#39;, {read: false})\n.pipe(gp<em>mocha({reporter: &#39;nyan&#39;}));\n});\n{% endhighlight %}\nThis task, that will test the files as we&#39;ll see later, requires the tasks <em>&#39;build&#39;, &#39;build</em>separated&#39;</em> and <em>&#39;get_sample_data&#39;</em> to be run before it starts. It&#39;s logical, since no test can be done if the final file isn&#39;t built and the needed data is available. I like this method, since you only take care of the dependencies for each task, and the system decides what to run depending on the calculated final dependencies, which can be complicated.</p>\n<p>Usually, the <em>default</em> task will have several dependencies, so they run all, and in parallel when possible. The default task itself can be void:\n{% highlight javascript %}\ngulp.task(&#39;default&#39;, [&#39;lint&#39;,&#39;build&#39;, &#39;build_separated&#39;,&#39;test&#39;,&#39;license_year&#39;], function(){});\n{% endhighlight %}</p>\n<p>There are several libraries similar to gulp, <a href=\"http://gruntjs.com/\">grunt</a> is the most popular. I chose gulp after looking some comparisons, and because it was the last hype. I&#39;m happy with it, but the others seem nice too.</p>\n<h2 id=\"linting-the-code\">Linting the code</h2>\n<p>Using a <a href=\"https://en.wikipedia.org/wiki/Lint_%28software%29\">lint program</a> helps to code better by maintaining a nice code, using a good number of methods in the classes, etc. <a href=\"http://jshint.com/\">JSHint</a> is a program that flags suspicious usage in programs written in JavaScript. It can be used with gulp, by installing the <em>gulp-jshint</em> plugin. The created task looks like this:\n{% highlight javascript %}\nreturn gulp.src(&#39;./src/<em>.js&#39;)\n.pipe(gp_jshint())\n.pipe(gp_jshint.reporter(&#39;default&#39;));\n{% endhighlight %}\nWhich will run for all the files under the *src\\</em> folder (the original ones, with all the comments).\nLet&#39;s see an example, if I change\n{% highlight javascript %}\nreturn (y&gt;=-0.10779&amp;&amp;y&lt; 0.067673 &amp;&amp; x &gt;= -0.1866 &amp;&amp; x &lt; 0.0255 ? canaryIslands\n: iberianPeninsule).invert(coordinates);\n{% endhighlight %}\nto\n{% highlight javascript %}\nreturn (y&gt;=-.10779&amp;&amp;y&lt; .067673 &amp;&amp; x &gt;= -0.1866 &amp;&amp; x &lt; .0255 ? canaryIslands\n: iberianPeninsule).invert(coordinates);\n{% endhighlight %}\nI&#39;ll get messages like:\n{% highlight bash %}\nsrc/conicConformalSpain-proj.js: line 54, col 23, A leading decimal point can be confused with a dot: &#39;.10779&#39;.\n{% endhighlight %}\nSometimes, there are errors that you can&#39;t (or dont want to) avoid. In my case, I got the message:</p>\n<p><code>Expected an assignment or function call and instead saw an expression</code></p>\n<p>I google it and found a <a href=\"https://jslinterrors.com/expected-an-assignment-or-function-call\">nice explanation and solution</a>, which is adding:\n{% highlight javascript %}\n/_ jshint -W030 _/\n{% endhighlight %}\nin the function. I didn&#39;t change the code, since it was taken from the original Mike Bostock&#39;s one, and if he says it&#39;s better this way, I won&#39;t change it.</p>\n<h2 id=\"testing-with-mocha\">Testing with mocha</h2>\n<p>Wether you want to use the <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven developement</a> process or just test some results to your functions so the changes you make don&#39;t give wrong results, you need a test framework. <a href=\"https://mochajs.org/\">Mocha</a> is one of the available ones. It&#39;s got a gulp plugin too, so it can be integrated to the project without problems.</p>\n<p>First, I made a <em>test</em> directory to put all the test stuff. Then, installed mocha:\n{% highlight bash %}\nnpm install -g mocha\nnpm install --save-dev gulp-mocha\n{% endhighlight %}\nNow, you can run mocha from any project, or integrate it in your project. The tests are in the <em>./tests/test.js</em> file, which looks like:\n{% highlight javascript %}\nvar assert = require(&#39;assert&#39;);\ndescribe(&#39;Array&#39;, function() {\ndescribe(&#39;#indexOf()&#39;, function () {\nit(&#39;should return -1 when the value is not present&#39;, function () {\nassert.equal(-1, [1,2,3].indexOf(5));\nassert.equal(-1, [1,2,3].indexOf(0));\n});\n});\n});\n{% endhighlight %}\nYou can create as many tests as you want under <em>describe</em> and sub-tests under <em>it</em>.</p>\n<p>In the case of d3-composite-projections, I found two things a bit more difficult to test. One is creating a sample <em>svg</em> file for each projection without using the browser. I explained how to do it in the post <a href=\"/d3/2015/05/29/d3-maps-nodejs.html\">Creating maps using D3js and nodejs</a>.</p>\n<p>The other is using the created javascript files without including the libraries in the code. Using d3js with node implies requiring it at the begining with <code>require(&#39;d3&#39;);</code>. But my generated file doesn&#39;t have that. <a href=\"http://stackoverflow.com/a/8808162/1086633\">I found my solution at Stackoverflow</a>. Basically, you load the modules at <em>test.js</em> and pass it to the file as the context. In my example:\n{% highlight javascript %}\nvar execfile = require(&quot;./execfile.js&quot;);\nvar d3 = require(&#39;../node<em>modules/d3/d3.js&#39;);\nvar composite_projection = execfile(__dirname+&quot;/../composite-projections.js&quot;,\n{d3: d3, console: console});\n{% endhighlight %}\nThis will allow the functions in composite-projections.js to use _d3</em> ant the console if necessary.</p>\n<p>Mocha can do many other stuff, I have only used a very small part of it.</p>\n<h2 id=\"publishing-the-code-at-github\">Publishing the code at GitHub</h2>\n<p>The code must be published somewhere if you want to share it. The most popular place right now is GitHub, and the other tools will go there to get the code.</p>\n<p>You can either clone an existing repository before creating the code\n{% highlight bash %}\ngit clone <a href=\"https://github.com/user/repo.git\">https://github.com/user/repo.git</a>\n{% endhighlight %}\nor, if you already have the code, create a repository at GitHub and then:\n{% highlight bash %}\ngit init\ngit add .\ngit commit -m &quot;First commit&quot;\ngit remote add origin <a href=\"https://github.com/user/repo.git\">https://github.com/user/repo.git</a>\ngit remote -v\n{% endhighlight %}\nChanging the address to the created repository.</p>\n<p>You can now change the <em>package.json</em> file adding the new repository, so NPM can work. In the case of -d3-composite-projections, the lines are:</p>\n<p>{% highlight json %}\n&quot;repository&quot;: {\n&quot;type&quot;: &quot;git&quot;,\n&quot;url&quot;: &quot;<a href=\"https://github.com/rveciana/d3-composite-projections.git&quot;\">https://github.com/rveciana/d3-composite-projections.git&quot;</a>\n},\n&quot;bugs&quot;: {\n&quot;url&quot;: &quot;<a href=\"https://github.com/rveciana/d3-composite-projections/issues&quot;\">https://github.com/rveciana/d3-composite-projections/issues&quot;</a>\n},\n{% endhighlight %}\nNote that GitHub has a nice issues page for the projects, and that it can be linked here.</p>\n<p>I added many directories at the .gitignore files to avoid filling the repository with temporary files.</p>\n<h2 id=\"publishing-with-npm\">Publishing with NPM</h2>\n<p>Now that we have a good library, we can publish it to npm so other people can use it from nodejs. The first thing is to fill ahe empty fields you amy have at your <em>package.json</em> with the GitHub address, licence, etc. There are some <a href=\"https://docs.npmjs.com/getting-started/publishing-npm-packages\">tutorials about how to so it step by step</a>.\n{% highlight bash %}\nnpm adduser / npm login (use the second one if you already have a user)\nnpm config ls\nnpm publish\nnpm version <update_type>\ngit push --follow-tags\nnpm publish\n{% endhighlight %}</p>\n<ol>\n<li>You have to either create a user or set your existing user to the project.</li>\n<li>config ls will test if the user is set properly</li>\n<li>publish will publish if everything is well configured</li>\n<li>If you want to publish a new version, you have first to create it using version. The <em>package.json</em> file will have a new version, and the git repo will be tagged with the new version too. The update types are:\n..1. patch: v0.0.1 will become v0.0.2\n..2. minor: v0.0.1 will become v0.1.0\n..3. major: v0.0.1 will become v1.0.0</li>\n<li>You have to push the new tag to GitHub</li>\n<li>Now you can publish the package again</li>\n</ol>\n<p>I made many errors doing all this (plus changing the Bower version), so I put it into a gulp task:\n{% highlight javascript %}\nfunction inc(importance) {\nreturn gulp.src([&#39;./package.json&#39;, &#39;./bower.json&#39;])\n.pipe(gp_bump({type: importance}))\n.pipe(gulp.dest(&#39;./&#39;))\n.pipe(gp_git.commit(&#39;Creating new package version&#39;))\n.pipe(gp_filter(&#39;package.json&#39;))\n.pipe(gp_tagversion());\n};</p>\n<p>gulp.task(&#39;patch&#39;, function() { return inc(&#39;patch&#39;); })\ngulp.task(&#39;feature&#39;, function() { return inc(&#39;minor&#39;); })\ngulp.task(&#39;release&#39;, function() { return inc(&#39;major&#39;); })\ngulp.task(&#39;push&#39;, function(){\ngp_git.push(&#39;origin&#39;, &#39;master&#39;, {args: &quot; --follow-tags&quot;}, function (err) {\nif (err) throw err;\n});\n});\n{% endhighlight %}</p>\n<ol>\n<li>The <em>bump</em> plugin will increment all the <em>version</em> tags in the indicated files (bower.json and package.json) with the indicated type</li>\n<li>Then, the <a href=\"https://www.npmjs.com/package/gulp-git\">gulp-git</a> plugin will commit the changes</li>\n<li>gulp_tagversion sets a new git tag with the same value set in package.json</li>\n</ol>\n<h2 id=\"publishing-with-bower\">Publishing with Bower</h2>\n<p><a href=\"http://bower.io/\">Bower</a> is a tool to manage the dependencies at a web site. It keeps a track of the libraries and its versions your site depends on. Since d3-composite-projections is intended to be used in a web with d3, it&#39;s interesting to publish it at bower so people can use it in their projects. They have a <a href=\"http://bower.io/docs/creating-packages/\">nice tutorial on creating a package</a>. Basically, for this project:\n{% highlight bash %}\nbower init\nbower install d3 --save\nbower register <my-package-name> <git-endpoint>\n{% endhighlight %}</p>\n<ol>\n<li>init will prompt some questions and create the <em>bower.json</em> file, as npm init did</li>\n<li>The install system is identical to the npm one</li>\n<li>Register uploads the project to bower. This works slightly different from npm, since bower will look at GitHub directly for new versions, so there is no need to interact with it any more, just remember to change the tag in the <em>bower.json</em> file</li>\n</ol>\n<h2 id=\"continuous-integration-with-travis\">Continuous integration with Travis</h2>\n<p><a href=\"https://travis-ci.org/\">Travis CI</a> is a continuous integration tool that works very well with node.js and GitHub. It builds and tests all your files each time a commit is pushed to GitHub, and can even deploy the changes to NPM automatically only if everything goes well.</p>\n<p>The first thing to set up Travis is to create your account. You can do it directly from GitHub, who will ask you a permission. Then, you can take the three steps shown in this image:</p>\n<img src=\"{{ site.baseurl }}/images/other/d3-library/travis.png\"/>\n\n<ul>\n<li>Select the project you want to link</li>\n<li>Create the .travis.yml file. In our case, use the <a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs\">Travis javascript tutorial</a>, and specifically the <a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs#Using-Gulp\">Travis gulp section</a></li>\n<li>Publishing any commit will run your project at travis</li>\n</ul>\n<p>Since I was using a nodejs version higher than 4, <a href=\"https://docs.travis-ci.com/user/languages/javascript-with-nodejs#Node.js-v4-%28or-io.js-v3%29-compiler-requirements\">this section</a> applies too. It may seem complicated, but the resulting file is quite simple:\n{% highlight yaml %}\nlanguage: node_js\nnode_js:</p>\n<ul>\n<li>5.2.0\nbefore_script:</li>\n<li>npm install -g gulp\nscript: gulp\nenv:</li>\n<li>CXX=g++-4.8\naddons:\napt:\nsources: - ubuntu-toolchain-r-test\npackages: - g++-4.8\n{% endhighlight %}\nTo automatize the NPM publication, you can use the travis command line. First, install it <a href=\"https://blog.travis-ci.com/2013-01-14-new-client/\">using this instructions</a>. Then, just type\n{% highlight bash %}\ntravis encrypt YOUR_API_KEY --add deploy.api_key\ntravis setup npm\n{% endhighlight %}\nThe API key can be found at <code>~/.npmrc</code> and must be encrypted with the first command. The second command will add the configuration at your .travis.yml file. You just have to answer the questions. You can find more information in <a href=\"https://docs.travis-ci.com/user/deployment/npm#stq=&amp;stp=0\">this tutorial</a>. My final deploy section looks like this:\n{% highlight yaml %}\ndeploy:\nprovider: npm\nemail: <a href=\"mailto:rveciana@gmail.com\">rveciana@gmail.com</a>\napi_key:\nsecure: EncryptedAPIKey\non:\ntags: true\nrepo: rveciana/d3-composite-projections\n{% endhighlight %}\nThe <code>tags: true</code> tag makes travis to deploy to NPM only if a tag has been changed, so other commits I may push will run the tests but won&#39;t change anything at the NPM repository.</li>\n</ul>\n<p>When you go to the <a href=\"https://travis-ci.org/rveciana/d3-composite-projections\">travis project page</a>, you will find a small image like this:</p>\n<p><a href=\"https://travis-ci.org/rveciana/d3-composite-projections\"><img src=\"https://travis-ci.org/rveciana/d3-composite-projections.svg?branch=master\" alt=\"travis image\"></a></p>\n<p>you can insert it into your README.md file or wherever you want so people can know if the last version is giving a good build result.</p>\n",
      "layout": "post",
      "title": "Creating a D3 NPM package",
      "date": "2015-12-22T00:00:00.000Z",
      "teaser": "npm-packages.png",
      "categories": "other",
      "tags": [
        "npm",
        "nodejs",
        "bower",
        "travis",
        "mocha",
        "tutorial",
        "projections"
      ],
      "excerpt": "<p>Some months ago I created a D3js projection, and published it to NMP and Bower. I wanted to use the opportunity to learn about Nodejs, NPM and so on. I write this post to remember all the steps I followed, and maybe is interesting for someone else.</p>",
      "meta": {
        "relativePath": "posts\\other\\2015-12-22-npm_packages.html",
        "createdAt": "2021-05-05T21:42:45.235Z",
        "lastModified": "2021-05-05T21:42:45.235Z",
        "size": 18878,
        "formattedSize": "18.4 KB"
      }
    },
    {
      "id": "posts\\other\\2018-01-09-leaflet-attribution",
      "contents": "<p>This is a fast tip post I wrote for myself so I can remember this situation. Leaflet makes easy to add attributions (usually) at the bottom right of the map. <a href=\"http://leafletjs.com/reference-1.2.0.html#control-attribution\">The docs</a> show three methods:</p>\n<ul>\n<li>setPrefix(<String> prefix): Changes the <em>Leaflet</em> link to the desired one</li>\n<li>addAttribution(<String> text): Adds a new attribution text after the leaflet link. If called multiple times, the texts are separated by commas</li>\n<li>removeAttribution(<String> text): Removes the indicated attribution. You must know the text to remove</li>\n</ul>\n<p>So what happens when you want to erase all the current attributions to add new ones? A use case could be when each layer must have different attributions. There are two options:</p>\n<p>1.- Store the added attributions and call <em>removeAttribution</em> as many times as needed\n2.- Reset the internal variable:</p>\n<p>Looking at <a href=\"https://github.com/Leaflet/Leaflet/blob/master/src/control/Control.Attribution.js\">the code</a>, there is a variable named <em>\\</em>attributions_, which is a key-value object. The keys are the attribution texts and the values the position numbers.</p>\n<p>Removing all the attributions, then is as easy as:</p>\n<p>{% highlight js %}\nleafletMap.attributionControl._attributions = {};\nleafletMap.attributionControl.addAttribution(&quot;New attribution&quot;);\n{% endhighlight %}</p>\n",
      "layout": "post",
      "title": "Leaflet Attribution",
      "date": "2018-01-08T00:00:00.000Z",
      "categories": "other",
      "tags": [
        "leaflet"
      ],
      "teaser": "leaflet-attribution.png",
      "description": "Change leaflet attributions dynamically",
      "thumbnail": "/images/other/leaflet-attribution/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>This is a fast tip post I wrote for myself so I can remember this situation. Leaflet makes easy to add attributions (usually) at the bottom right of the map. <a href=\"http://leafletjs.com/reference-1.2.0.html#control-attribution\">The docs</a> show three methods:</p>",
      "meta": {
        "relativePath": "posts\\other\\2018-01-09-leaflet-attribution.html",
        "createdAt": "2021-05-05T21:42:45.235Z",
        "lastModified": "2021-05-05T21:42:45.235Z",
        "size": 1633,
        "formattedSize": "1.6 KB"
      }
    },
    {
      "id": "posts\\other\\2016-12-01-svg-path-properties",
      "contents": "<p>SVG has the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\">path element</a>, which allows to draw complex lines and curves. JavaScript has <a href=\"https://developer.mozilla.org/ca/docs/Web/API/SVGPathElement\">some methods</a> to get properties from paths, such as <em>getTotalLength()</em> and <em>getPointAtLength()</em>, which are very useful when e.g. creating SVG animations with <a href=\"https://d3js.org/\">D3js</a> transitions.</p>\n<p>Unfortunately, when working with a <a href=\"http://www.w3schools.com/tags/ref_canvas.asp\">Canvas element</a>, or when working with nodejs, these functions are not available, making very difficult to obtain these informations.</p>\n<p>That&#39;s why I made the <a href=\"https://github.com/rveciana/svg-path-properties\">svg-path-properties library</a></p>\n<h2 id=\"svg-path-properties-library\">svg-path-properties library</h2>\n<h1 id=\"install\">Install</h1>\n<p>To use with npm, just type:</p>\n<pre><code>npm install svg-path-properties</code></pre><p>To use it directly from the browser, include the script and call it with the prefix <em>spp</em>:</p>\n<pre><code>&lt;script src=&quot;https://unpkg.com/svg-path-properties@0.1.1/build/path-properties.min.js&quot;&gt;&lt;/script&gt;\nspp.svgPathProperties(path(track));</code></pre><h1 id=\"usage\">Usage</h1>\n<p>First, require the library and initialize it with the path string:</p>\n<pre><code>var path = require(&quot;svg-path-properties&quot;);\nvar properties = path.svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);</code></pre><p>Then, access the different properties with the different methods</p>\n<p>Get the path total length in pixels:</p>\n<pre><code>var length = properties.getTotalLength();</code></pre><p>Get the point on the path at certain length (in pixels):</p>\n<pre><code>var point = properties.getPointAtLength(200);</code></pre><p>Get the tangent vector at certain length (in pixels):</p>\n<pre><code>var tangent = properties.getTangentAtLength(200);</code></pre><p>Get the point position and the tangent vector at the same time (more efficient than doing it with the separate methods):</p>\n<pre><code>var allProperties = properties.getPropertiesAtLength(200);</code></pre><h2 id=\"some-examples\">Some examples</h2>\n<p><a href=\"http://bl.ocks.org/rveciana/77655c3c0e3073c19da34af6dc84c4b9\"><img src=\"{{ site.baseurl }}/images/other/svg-path-properties/thumbnail_bostock.png\"/>Canvas &amp; svg-path-properties Point-Along-Path Interpolation</a>: Canvas version of <a href=\"http://bl.ocks.org/mbostock/1705868\">this block by Mike Bostock</a>.</p>\n<p><a href=\"http://bl.ocks.org/rveciana/209fa7efeb01f05fa4a544a76ac8ed91\"><img src=\"{{ site.baseurl }}/images/other/svg-path-properties/thumbnail_path.png\"/>Canvas path animation</a>: A path on a map that draws itself to show a train route.</p>\n<p><a href=\"http://bl.ocks.org/rveciana/bef48021e38a77a520109d2088bff9eb\"><img src=\"{{ site.baseurl }}/images/other/svg-path-properties/thumbnail_isolines.png\"/>Label positioning with svg-path-properties</a>: Isolines labeling. Finding the position and angle isn&#39;t possible even with SVG paths alone.</p>\n<p><a href=\"http://bl.ocks.org/rveciana/edb1dd43f3edc5d16ecaf4839c032dec\"><img src=\"{{ site.baseurl }}/images/other/svg-path-properties/thumbnail_streamlines.png\"/>Drawing streamlines from a GeoTIFF file</a>: Marking the streamlines direction with an arrow isn&#39;t possible if the position and tangent is unknown.</p>\n<p>I would be very happy to know if somebody is using it and creates something with the library.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\">SVG path element</a></li>\n<li><a href=\"https://developer.mozilla.org/ca/docs/Web/API/SVGPathElement\">SVG path access methods</a></li>\n<li><a href=\"http://www.w3schools.com/tags/ref_canvas.asp\">Canvas element</a></li>\n<li><a href=\"https://github.com/rveciana/svg-path-properties\">svg-path-properties library</a></li>\n</ul>\n",
      "layout": "post",
      "title": "svg-path-properties",
      "date": "2016-12-01T00:00:00.000Z",
      "categories": "other",
      "tags": [
        "canvas",
        "svg"
      ],
      "teaser": "svg-path-properties.png",
      "description": "Get path properties working woth Canvas or nodejs",
      "thumbnail": "/images/other/svg-path-properties/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>SVG has the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\">path element</a>, which allows to draw complex lines and curves. JavaScript has <a href=\"https://developer.mozilla.org/ca/docs/Web/API/SVGPathElement\">some methods</a> to get properties from paths, such as <em>getTotalLength()</em> and <em>getPointAtLength()</em>, which are very useful when e.g. creating SVG animations with <a href=\"https://d3js.org/\">D3js</a> transitions.</p>",
      "meta": {
        "relativePath": "posts\\other\\2016-12-01-svg-path-properties.html",
        "createdAt": "2021-05-05T21:42:45.235Z",
        "lastModified": "2021-05-05T21:42:45.235Z",
        "size": 3749,
        "formattedSize": "3.7 KB"
      }
    },
    {
      "id": "posts\\other\\2018-09-17-gpujs-example",
      "contents": "<script type=\"text/javascript\" async\n  src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML\">\n</script>\n\n<p>The <a href=\"/other/2018/04/30/mapping-with-gpujs.html\">previous post I wrote</a> showed how to use the <a href=\"http://gpu.rocks\">gpu.js library</a> for drawing maps with JavaScript after calculating the values with the user&#39;s GPU.</p>\n<p>While writting it, I was preparing <a href=\"https://vimeo.com/album/5268941/video/278133346\">this conference</a> (in Spanish) for the 2018 edition of the <a href=\"http://www.sigte.udg.edu/jornadassiglibre/\">&quot;Jornadas SIG Libre&quot; at Girona</a>. The motivation of the talk was showing the possibilities of using the user&#39;s GPU instead of the server to make complex GIS calculations on the fly, so the speed could be much higher and the use of the server almost negligible.</p>\n<h2 id=\"the-example\">The example</h2>\n<p>Some years ago, I made a python script that calculates the temperature and relative humidity on a raster, taking as the initial data the weather stations available at the <a href=\"http://meteo.cat\">Catalan Meteorological Service</a>. The resulting product is still in use, specially to detect if the current precipitation is in form of rain or snow. There are <a href=\"https://www.researchgate.net/publication/283479429_Verification_of_a_weather_radar_derived_surface_precipitation_type_product\">some papers about this</a> too.</p>\n<p>The idea is, then, calculating a temperature field with a good resolution taking as input the weather station data. The example has several steps with intensive calculations, so it&#39;s a good study case for <a href=\"http://gpu.rocks\">gpu.js</a>.</p>\n<p>The temperature depends on many things, but fits quite well this formula:</p>\n<p>$$ temperature = \\beta<em>{0} + \\beta</em>{1} _ altitude + \\beta_{2} _ distanceToCoast $$</p>\n<p>So, given the station temperatures in a given moment and knowing the altitude and distance to the coast for each station, a <a href=\"http://www.stat.yale.edu/Courses/1997-98/101/linmult.htm\">multiple-linear regrssion</a> can be done to get a formula.</p>\n<p>To calculate the multipl-linear regression, the <a href=\"http://reliawiki.org/index.php/Multiple_Linear_Regression_Analysis\">matricial formula is this one</a>:</p>\n<p>$$\n\\hat{\\beta}=(X^{T}X)^{-1}X^{T}y\\\n\\hat{y}=X\\hat{\\beta}\n$$</p>\n<p>So there are matrix transpositions, matrix multiplications and other operations that are basic gpu.js examples. Anyway, this step uses only few values (we will be using about 180 weather stations), so I will use <a href=\"http://www.numericjs.com/\">numeric.js</a> that is still fast enough and simplifies the code.</p>\n<p>Once the <em>beta values</em> are calculated, a temperature field can be created if the altitude and distance values for each pixel are known. This is quite fast to do in gpu.js.</p>\n<p>The result will look like this:</p>\n<img src=\"{{ site.baseurl }}/images/other/complex-gis-calculations-gpu/first_temp.png\"/>\n\n<p>The problem with stopping here is that we are assuming that the formula is valid for all the territory, but we know that some regions have their own particularities (some regions may be a bit hotter or colder than what the formula expect). Let&#39;s try to correct that with the <em>residues method</em>:</p>\n<p>For each station, the real value is:</p>\n<p>$$temperature = fit + residual$$</p>\n<p>Using the matricial notation ,the errors or residuals are:</p>\n<p>$$e=y-\\hat{y}$$</p>\n<p>Once we have the error in each point, we can interpolate them to create a <em>residuals field</em> that can be added to the original temperature calculation. To do it, we will use the inverse of the distance, which will give a result similar to:</p>\n<img src=\"{{ site.baseurl }}/images/other/complex-gis-calculations-gpu/inverse.png\"/>\n\n<p>Finally, when adding the layer, some differences emerge:</p>\n<img src=\"{{ site.baseurl }}/images/other/complex-gis-calculations-gpu/final_result.png\"/>\n\n<p>So, to create the final map, the following things must be calculated. We will use a 1000x1000 pixels so the calculation is long using the CPU:</p>\n<ul>\n<li>Calculation of the multiple linear regression</li>\n<li>Creation of the temperature raster from the regression formula (GPU 1000x1000 px)</li>\n<li>Residuals calculation</li>\n<li>Residuals interpolation (GPU 1000x1000 px)</li>\n<li>Final temperature field adding the temperature and residuals (GPU 1000x1000 px)</li>\n<li>Layer representation (GPU 1000x1000 px)</li>\n</ul>\n<h2 id=\"the-code\">The code</h2>\n<p>To make the example interactive and easier to split and understand, I made <a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js\">this observable notebook</a>.</p>\n<h3 id=\"multiple-linear-regression\"><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#regression\">Multiple linear regression</a></h3>\n<p>I&#39;m using <a href=\"http://www.numericjs.com/\">numeric.js</a> here to avoid many complex gpu.js coding, since with only two hundred weather station, the ellapsed time is a very small part of the total (2 ms).\n{% highlight js %}\nlet result = {};\nconst conv = convertData(data);\nconst X = conv.X;\nconst Y = conv.Y\nconst X_T = numeric.transpose(X);\nconst multipliedXMatrix = numeric.dot(X_T,X);\nconst LeftSide = numeric.inv(multipliedXMatrix);\nconst RightSide = numeric.dot(X_T,Y);\nresult.beta = numeric.dot(LeftSide,RightSide);\nconst yhat = numeric.dot(X, result.beta);\nresult.residual = numeric.sub(Y, yhat);\n{% endhighlight %}</p>\n<p>Notice that the code is very easy to understand given the original formula:</p>\n<p>$$\n\\hat{\\beta}=(X^{T}X)^{-1}X^{T}y\\\n\\hat{y}=X\\hat{\\beta}\n$$</p>\n<h3 id=\"calculating-the-regression-field\"><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#interpolation_result\">Calculating the regression field</a></h3>\n<p>In this case, <a href=\"http://gpu.rocks\">gpu.js</a> will be used, since I&#39;ve set a 1000x970 output field, which involves repeating the same operation about one million times, and this is where the gpu makes things much faster:</p>\n<p>{% highlight js %}\nlet gpu = new GPU();</p>\n<p>const calculateInterp = gpu.createKernel(function(altitude, dist, regrCoefs) {\nreturn regrCoefs[0] + regrCoefs<a href=\"/other/2018/04/30/mapping-with-gpujs.html\">1</a> _ altitude[this.thread.y][this.thread.x] + regrCoefs<a href=\"http://gpu.rocks\">2</a> _ dist[this.thread.y][this.thread.x];\n})\n.setOutput([fixData.xSize, fixData.ySize]);</p>\n<p>let interpResult = calculateInterp(\nGPU.input(Float32Array.from(fixData.data<a href=\"/other/2018/04/30/mapping-with-gpujs.html\">1</a>), [1000, 968]),\nGPU.input(Float32Array.from(fixData.data[0]), [1000, 968]),\nregression_result.beta);\n{% endhighlight %}</p>\n<p>As always when using gpu.js, the kernel mush be generated first. In this case, the parameters are altitude and distance to the sea, which are just matrices read from a goetiff, since are fixed values, and the regression result. Check the <a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#fix_data\">fix data cell</a> to see how to read the data as a Float32 array and calculate the geotransform using the <a href=\"https://geotiffjs.github.io/\">GeoTIFF.js library</a>.</p>\n<p>The formula itself to apply in the GPU is the independent term plus the variables multiplied by the coefficient:</p>\n<p>$$ temperature = \\beta<em>{0} + \\beta</em>{1} _ altitude + \\beta_{2} _ distanceToCoast $$</p>\n<p>Also, I used the GPU.input method to pass the big matrices, since it&#39;s much faster. Check the <a href=\"https://github.com/gpujs/gpu.js#flattened-typed-array-support\">Flattened array type support section</a> of the docs to see how it works.</p>\n<h3 id=\"calculating-the-residuals-field\"><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#residuals_result\">Calculating the residuals field</a></h3>\n<p>To calculate the residuald field, we take the error in each weather station and apply the inverse of the distance in each pixel of the field. It&#39;s the most intensive calculation of all the process.</p>\n<p>{% highlight js %}\nlet xPos = station_data.map(d =&gt; {return (d.lon - fixData.geoTransform[0])/fixData.geoTransform<a href=\"/other/2018/04/30/mapping-with-gpujs.html\">1</a>;});\nlet yPos = station_data.map(d =&gt; {return (d.lat - fixData.geoTransform<a href=\"https://vimeo.com/album/5268941/video/278133346\">3</a>)/fixData.geoTransform<a href=\"http://meteo.cat\">5</a>;});\nlet gpu = new GPU();\nconst calculateResidues = gpu.createKernel(function(xpos, ypos, values) {\nlet nominator=0;\nlet denominator=0;\nlet flagDist = -1;</p>\n<pre><code>for (let i = 0; i &lt; this.constants.numPoints; i++) {\n\n  let dist = 5 + Math.sqrt((this.thread.x-xpos[i])*(this.thread.x-xpos[i])+\n                           (this.thread.y-ypos[i])*(this.thread.y-ypos[i]) + 2);\n  nominator=nominator+(values[i]/dist)\n  denominator=denominator+(1/dist)\n\n}\nreturn nominator/denominator;</code></pre><p>})\n.setConstants({ numPoints: xPos.length, tiffWidth: fixData.xSize, tiffHeight: fixData.ySize })\n.setOutput([fixData.xSize, fixData.ySize]);\nlet residualsResult = calculateResidues(xPos, yPos, regression_result.residual);\n{% endhighlight %}</p>\n<ul>\n<li>First, the station positions must be converted to pixels using the geotransform to be able to interpolate them</li>\n<li>The gpu kernel function gets these positions plus the values of the errors in each station</li>\n<li>Note that, since a loop with all the stations must be done for each pixel, the time spent to calculate this is the biggest of all the process.<ul>\n<li>Since the distance has to be calculated, avoiding the far stations would only add an <em>if</em> statement and increase the time</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"the-final-field\"><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#final_result\">The final field</a></h3>\n<p>That&#39;s the easiest part, only substract the error to the original interpolation field:</p>\n<p>{% highlight js %}\nlet gpu = new GPU();\nconst addResidues = gpu.createKernel(function(interpResult, residuesResult) {\nreturn interpResult[this.thread.y][this.thread.x] - residuesResult[this.thread.y][this.thread.x];\n})\n.setOutput([fixData.xSize, fixData.ySize]);</p>\n<p>let temperatureField = addResidues(interpolation_result, residuals_result);\n{% endhighlight %}</p>\n<h3 id=\"drawing-the-data\"><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#final_result_drawing\">Drawing the data</a></h3>\n<p>Since the example was not about projections or mapping, I didn&#39;t draw any border nor reprojected the data nor added it into a Leaflet layer. <a href=\"/other/2018/04/30/mapping-with-gpujs.html\">Check the previous post</a> for that. Just drawing the matrices is easy:</p>\n<p>{% highlight js %}\nlet gpu = new GPU();\nlet render = gpu.createKernel(function(interpolation<em>result, colorScale) {\nlet color = Math.ceil(255 * (interpolation</em>result[(this.constants.height - 1 - this.thread.y) * this.constants.width + this.thread.x] - this.constants.minVal)/(this.constants.maxVal - this.constants.minVal));\nthis.color(colorScale[color * 4]/255, colorScale[1+color * 4]/255, colorScale[2+color * 4]/255, 1);\n})\n.setConstants({width: fixData.xSize, height: fixData.ySize, maxVal: 20, minVal: -7})\n.setOutput([fixData.xSize, fixData.ySize])\n.setGraphical(true);</p>\n<p>render(final_result, tempColorScale);\n{% endhighlight %}</p>\n<ul>\n<li>Of course, the <em>graphical</em> option is used here</li>\n<li>A hidden canvas with the color scale is created in an other cell of the notebook containing the colorscale. Also explained in the <a href=\"/other/2018/04/30/mapping-with-gpujs.html\">previous post</a></li>\n<li>The color is set by knowing the position of the pixel value between the minimum and maximum values</li>\n</ul>\n<h2 id=\"performance\">Performance</h2>\n<p>As you may have noticed, I added a time mesurement on each important step, so the final performance can be quantified. On my simple computer, the times are:</p>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Ellapsed time</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Multiple linear regression</td>\n<td>2 ms</td>\n</tr>\n<tr>\n<td>Calculate the regression field</td>\n<td>209 ms</td>\n</tr>\n<tr>\n<td>Calculate the residuals field</td>\n<td>1084 ms</td>\n</tr>\n<tr>\n<td>Calculate the final field</td>\n<td>52 ms</td>\n</tr>\n<tr>\n<td>Draw the regression field</td>\n<td>65 ms</td>\n</tr>\n<tr>\n<td>Draw residuals field</td>\n<td>70 ms</td>\n</tr>\n<tr>\n<td>Draw final result</td>\n<td>67 ms</td>\n</tr>\n<tr>\n<td><strong>Total time</strong></td>\n<td><strong>1549 ms</strong></td>\n</tr>\n</tbody></table>\n<p>On the mobile phone, it&#39;s still under two seconds, which is a very good result when compared to the same code using python and without the GPU: I&#39;ll let this for the next post.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"/other/2018/04/30/mapping-with-gpujs.html\">Previous post</a></li>\n<li><a href=\"https://vimeo.com/album/5268941/video/278133346\">The conference at the <em>Jornadas SIG Libre</em></a> (in Spanish)</li>\n<li><a href=\"http://www.sigte.udg.edu/jornadassiglibre/\">Jornadas SIG Libre</a> at Girona</li>\n<li><a href=\"http://meteo.cat\">Catalan Meteorological Service</a></li>\n<li><a href=\"https://www.researchgate.net/publication/283479429_Verification_of_a_weather_radar_derived_surface_precipitation_type_product\">Conference paper about the product</a></li>\n<li><a href=\"http://www.stat.yale.edu/Courses/1997-98/101/linmult.htm\">Multiple Linear Regression</a></li>\n<li><a href=\"http://gpu.rocks\">The gpu.js web site</a></li>\n<li><a href=\"https://github.com/gpujs/gpu.js#flattened-typed-array-support\">GPU.js flattened type array support</a></li>\n<li><a href=\"http://www.numericjs.com/\">numeric.js</a></li>\n<li><a href=\"http://reliawiki.org/index.php/Multiple_Linear_Regression_Analysis\">Multiple linear regression formulas</a></li>\n<li><a href=\"https://geotiffjs.github.io/\">Geotiff.js</a></li>\n</ul>\n<p>ObservableHQ example:</p>\n<ul>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js\">The observable example</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#regression\">Multiple linear regression</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#interpolation_result\">Interpolation field</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#fix_data\">Reading the fix data</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#residuals_result\">Calculating the residuals field</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#final_result\">Calculating the final result field</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/temperature-interpolation-using-gpu-js#final_result_drawing\">Drawing the final result field</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Complex GIS calculations with gpu.js: Temperature interpolation",
      "date": "2018-09-17T00:00:00.000Z",
      "teaser": "complex-gis-calculations-gpujs.png",
      "categories": "other",
      "tags": [
        "GPU",
        "gpujs",
        "canvas",
        "leaflet"
      ],
      "thumbnail": "/images/other/complex-gis-calculations-gpu/twitter.png",
      "twitter-card": "summary",
      "description": "More complicated GIS calculations with the GPU on the browser",
      "excerpt": "<p>The <a href=\"/other/2018/04/30/mapping-with-gpujs.html\">previous post I wrote</a> showed how to use the <a href=\"http://gpu.rocks\">gpu.js library</a> for drawing maps with JavaScript after calculating the values with the user&apos;s GPU.</p>",
      "meta": {
        "relativePath": "posts\\other\\2018-09-17-gpujs-example.html",
        "createdAt": "2021-05-05T21:42:45.236Z",
        "lastModified": "2021-05-05T21:42:45.236Z",
        "size": 12866,
        "formattedSize": "12.6 KB"
      }
    },
    {
      "id": "posts\\other\\2019-02-08-cog-tutorial",
      "contents": "<p>Cloud Optimized GeoTIFF (COG) is simply an intelligent way to store a GeoTIFF file. Or, better defined in the <a href=\"https://www.cogeo.org/\">COG web site</a>:</p>\n<blockquote>\n<p>A Cloud Optimized GeoTIFF (COG) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, with an internal organization that enables more efficient workflows on the cloud. It does this by leveraging the ability of clients issuing ​HTTP GET range requests to ask for just the parts of a file they need.</p>\n</blockquote>\n<p>In this short tutorial, you can find how to create them, and how to read them from a browser or the command line.</p>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#the-cloud-optimized-geotiff-format\">The Cloud Optimized Geotiff format</a></li>\n<li><a href=\"#creating-a-cloud-optimized-geotiff\">Creating a Cloud Optimized GeoTIFF</a><ul>\n<li><a href=\"#create-a-cog-using-gdal-from-the-command-line\">Create a COG using GDAL from the command line</a><ul>\n<li><a href=\"#overviews\">Overviews</a></li>\n</ul>\n</li>\n<li><a href=\"#create-a-cog-using-gdal-python\">Create a COG using gdal-python</a></li>\n<li><a href=\"#checking-if-a-geotiff-is-a-valid-cog\">Checking if a GeoTIFF is a valid COG</a></li>\n</ul>\n</li>\n<li><a href=\"#reading-a-cloud-optimized-geotiff-file\">Reading a Cloud Optimized GeoTIFF file</a><ul>\n<li><a href=\"#using-geotiffjs-to-read-a-cog\">Using geotiff.js to read a COG</a><ul>\n<li><a href=\"#an-example-with-rgb\">An example with RGB</a></li>\n<li><a href=\"#an-example-with-numerical-data\">An example with numerical data</a></li>\n</ul>\n</li>\n<li><a href=\"#using-gdal-to-read-a-cog\">Using GDAL to read a COG</a></li>\n</ul>\n</li>\n<li><a href=\"#links\">Links</a></li>\n</ul>\n<h2 id=\"the-cloud-optimized-geotiff-format\">The Cloud Optimized Geotiff format</h2>\n<p>Cloud Optimized GeoTIFFs, as explained in the previous section, are organized to be downloaded by parts. When a file os properly organized, the HTTP GET range request (&quot;bytes: start_offset-end_offset&quot; HTTP header) can be used, and only the parts needed are downloaded.</p>\n<p>As Even Rouault explains in the <a href=\"https://trac.osgeo.org/gdal/wiki/CloudOptimizedGeoTIFF\">GDAL COG page</a>, the structure is:</p>\n<blockquote>\n<p>TIFF / BigTIFF signature<br>IFD (​Image File Directory) of full resolution image\nValues of TIFF tags that don&#39;t fit inline in the IFD directory, such as TileOffsets?, TileByteCounts? and GeoTIFF keys<br>Optional: IFD (Image File Directory) of first overview (typically subsampled by a factor of 2), followed by the values of its tags that don&#39;t fit inline<br>Optional: IFD (Image File Directory) of second overview (typically subsampled by a factor of 4), followed by the values of its tags that don&#39;t fit inline<br>...<br>Optional: IFD (Image File Directory) of last overview (typically subsampled by a factor of 2N), followed by the values of its tags that don&#39;t fit inline<br>Optional: tile content of last overview level<br>...<br>Optional: tile content of first overview level<br>Tile content of full resolution image.</p>\n</blockquote>\n<p>There are two important parameters to set which aren&#39;t in the standard</p>\n<ul>\n<li>The tile size. Usually is 256x256 or 512x512 pixels</li>\n<li>The compression type. LZW is accepted more easily than DEFLATE, but the later compresses more</li>\n</ul>\n<h2 id=\"creating-a-cloud-optimized-geotiff\">Creating a Cloud Optimized GeoTIFF</h2>\n<p>The easiest way to create a COG is using the GDAL command line interface. If the GeoTIFF data is created from a script using GDAL, it is also possible to do it inside using python or any language with the GDAL bindings.</p>\n<p>But, before trying to convert anything, better check if the file is already in a good format and if you prefer using overviews or not.</p>\n<h3 id=\"create-a-cog-using-gdal-from-the-command-line\">Create a COG using GDAL from the command line</h3>\n<p>The basic thing to understand is that the GeoTIFF must be <em>tiled</em>. This is, that instead of writing all the row, the image is divided in small tiles, so only some of them are downloaded. Compression can be <em>DEFLATE</em> or <em>LZW</em>. The first compresses more but is less compatible with some libraries.</p>\n<pre><code>$ gdal_translate ori.tiff out.tiff -co COMPRESS=LZW -co TILED=YES</code></pre><p>This is ok if you want to download all the bands at once, like in an aerial photo. If you have independent bands, or many of them, you may want to download only one band at once. The, you may use the <em>INTERLEAVE=BAND</em> option:</p>\n<pre><code>$ gdal_translate ori.tiff out.tiff -co COMPRESS=LZW -co TILED=YES -co INTERLEAVE=BAND</code></pre><h4 id=\"overviews\">Overviews</h4>\n<p>The TIFF format <a href=\"https://gis.stackexchange.com/a/255847/6503\">allows to store more than one image</a>, the same way a PDF can store more than one page. This can be used to create the <em>overviews</em> or <em>pyramids</em>. Each overview will divide the image in four from the previous level, so a smaller amount of data can be read. In our case, a thumbnail of a huge GeoTIFF could be easily shown without reading all the pixels.</p>\n<p>This is independent of the tiling part, but combining both allows to make efficient files for reading a small part of the image and for zooming out efficiently at the same time.</p>\n<p>GDAL has a <a href=\"https://www.gdal.org/gdaladdo.html\">cli command to create the pyramids called gdaladdo</a>. The command must be run <em>BEFORE</em> the <em>gdal_translate</em> or the resulting GeoTIFF won&#39;t be COG compliant.</p>\n<p>This would make four overview images by averaging the values:</p>\n<pre><code>$ gdaladdo -r average abc.tif 2 4 8 16</code></pre><h3 id=\"create-a-cog-using-gdal-python\">Create a COG using gdal-python</h3>\n<p>The previous section results can be achieved using python directly, which is nice to integrate in the scripts that generate data.</p>\n<p>{% highlight python %}\nimport gdal\nimport numpy as np</p>\n<p>x_size = 10000\ny_size = 10000\nnum_bands = 4\nfile_name = &quot;/tmp/test.tiff&quot;</p>\n<p>data = np.ones((num_bands, y_size, x_size))\ndriver = gdal.GetDriverByName(&#39;GTiff&#39;)\ndata_set = driver.Create(file_name, x_size, y_size, num_bands,\ngdal.GDT_Float32,\noptions=[&quot;TILED=YES&quot;,\n&quot;COMPRESS=LZW&quot;,\n&quot;INTERLEAVE=BAND&quot;])</p>\n<p>for i in range(num_bands):\ndata_set.GetRasterBand(i + 1).WriteArray(data[i])</p>\n<p>data_set.BuildOverviews(&quot;NEAREST&quot;, [2, 4, 8, 16, 32, 64])\ndata_set = None</p>\n<p>{% endhighlight %}</p>\n<ul>\n<li>As you can see, the creation options are passed as a parameter when creating the data set</li>\n<li>Also, the gdal-python bindings have a nice method to create the overviews. The problem is that this will give an error in the COG format, because the pyramids were created after the tiling. It&#39;s not a big error, as we will see in the next section, but you can avoid it by using a <em>memory driver file</em> before creating the actual one:</li>\n</ul>\n<p>{% highlight python %}\nimport gdal\nimport numpy as np</p>\n<p>x_size = 10000\ny_size = 10000\nnum_bands = 4\nfile_name = &quot;/tmp/test.tiff&quot;</p>\n<p>data = np.ones((num_bands, y_size, x_size))\ndriver = gdal.GetDriverByName(&#39;MEM&#39;)\ndata_set = driver.Create(&#39;&#39;, x_size, y_size, num_bands,\ngdal.GDT_Float32)</p>\n<p>for i in range(num_bands):\ndata_set.GetRasterBand(i + 1).WriteArray(data[i])</p>\n<p>data = None\ndata_set.BuildOverviews(&quot;NEAREST&quot;, [2, 4, 8, 16, 32, 64])</p>\n<p>driver = gdal.GetDriverByName(&#39;GTiff&#39;)\ndata_set2 = driver.CreateCopy(file_name, data_set,\noptions=[&quot;COPY_SRC_OVERVIEWS=YES&quot;,\n&quot;TILED=YES&quot;,\n&quot;COMPRESS=LZW&quot;])\ndata_set = None\ndata_set2 = None</p>\n<p>{% endhighlight %}</p>\n<h3 id=\"checking-if-a-geotiff-is-a-valid-cog\">Checking if a GeoTIFF is a valid COG</h3>\n<p>Even Rouault made a <a href=\"https://raw.githubusercontent.com/OSGeo/gdal/master/gdal/swig/python/samples/validate_cloud_optimized_geotiff.py\">nice python script</a> that not only checks if the file is a correct COG, but also gives some tips to improve the ones that are correct.</p>\n<p>For instance, the file in the <a href=\"https://beta.observablehq.com/@tmcw/cloud-optimized-geotiffs\">ObservableHQ example</a> works, but it&#39;s a not valid COG, because of a problem with the overviews. The script output is:</p>\n<p>{% highlight sh %}</p>\n<p>$ python3 validate_cloud_optimized_geotiff.py SkySat_Freeport_s03_20170831T162740Z3.tif</p>\n<p>SkySat_Freeport_s03_20170831T162740Z3.tif is NOT a valid cloud optimized GeoTIFF.\nThe following errors were found:</p>\n<ul>\n<li>The offset of the first block of overview of index 3 should be after the one of the overview of index 4</li>\n<li>The offset of the first block of overview of index 2 should be after the one of the overview of index 3</li>\n<li>The offset of the first block of overview of index 1 should be after the one of the overview of index 2</li>\n<li>The offset of the first block of overview of index 0 should be after the one of the overview of index 1</li>\n<li>The offset of the first block of the main resolution image should be after the one of the overview of index 4\n{% endhighlight %}</li>\n</ul>\n<p>We can easily correct it by running:</p>\n<pre><code>gdal_translate SkySat_Freeport_s03_20170831T162740Z3.tif correct_SkySat_Freeport.tiff -co COMPRESS=LZW -co TILED=YES</code></pre><p>Now, the output gives a warning, instead of an error:</p>\n<p>{% highlight sh %}\n$ python3 validate_cloud_optimized_geotiff.py correct_SkySat_Freeport.tif</p>\n<p>The following warnings were found:</p>\n<ul>\n<li>The file is greater than 512xH or Wx512, it is recommended to include internal overviews\n{% endhighlight %}</li>\n</ul>\n<p>So the previous part removed the internal overviews. That&#39;s because we didn&#39;t use the <em>-co COPY_SRC_OVERVIEWS=YES</em> option:</p>\n<pre><code>gdal_translate SkySat_Freeport_s03_20170831T162740Z3.tif correct_SkySat_Freeport.tiff -co COPY_SRC_OVERVIEWS=YES -co COMPRESS=LZW -co TILED=YES</code></pre><p>It&#39;s important to create the overviews <em>before</em> transforming the file into a GeoTIFF, or otherwise the order will be wrong and the test won&#39;t pass. It will probably work anyway, but it&#39;s better to go with the specification. There&#39;s <a href=\"http://erouault.blogspot.com/2017/10/gdal-and-cloud-storage.html\">a post by Even Rouault</a> with a discussion about this error.</p>\n<h2 id=\"reading-a-cloud-optimized-geotiff-file\">Reading a Cloud Optimized GeoTIFF file</h2>\n<p>COG can be used to store a huge multi-layer file in the cloud so your scripts can use parts of it, or you can download the part you need to create an interactive map, or use <a href=\"https://terracotta-python.readthedocs.io/en/latest/tutorials/aws.html\">Terracotta</a> to create the tiles directly at AWS uploading only the whole GaoTIFF.</p>\n<h3 id=\"using-geotiffjs-to-read-a-cog\">Using geotiff.js to read a COG</h3>\n<p>The awesome geotiff.js has been adapted to read COG files, which make really easy to use them without thinking about the format.</p>\n<p>I learnt how to work with COG and geotiff.js looking at <a href=\"https://beta.observablehq.com/@tmcw/cloud-optimized-geotiffs\">this ObservableHQ example</a>. I&#39;ll try to expand a little the important points.</p>\n<p>The first point to understand is that geotiff-js has now many asynchronous methods, because it has to open the file, but also read the different parts of it. Let&#39;s see a small example that just reads a square of 10x10 pixels.</p>\n<p>{% highlight js %}\n(async function() {\nconst tiff = await GeoTIFF.fromUrl(&quot;out.tiff&quot;);\nconsole.log(&quot;Number of images (pyramids):&quot;, await tiff.getImageCount());</p>\n<p>const image = await tiff.getImage();\nconsole.log(&quot;Bounding box:&quot;, image.getBoundingBox());\nconsole.log(&quot;Width:&quot;, image.getWidth());</p>\n<p>let data = await image.readRasters({\nwindow: [200, 200, 210, 210], samples: [0]\n});</p>\n<p>console.log(&quot;Values:&quot;, data);</p>\n<p>})()\n{% endhighlight %}</p>\n<p>The output is:</p>\n<img src=\"{{ site.baseurl }}/images/other/cog/console_gtiffjs.png\"/>\n\n<ul>\n<li>I used the async/await technique to make the code easier to understand. In this case, opening the image, getting the actual image and reading the image data are three asynchronous methods.</li>\n<li><em>getImage()</em> will return the main pyramid, with the original resolution. Is the same as <em>.getImage(0)</em>. In the example, another pyramid is created, so using <em>.getImage(1)</em>, an image with a 500px width would returned</li>\n<li>The <em>image</em> object has all the pyramid properties, but not the actual data, which has to be retrieved using the <em>readRasters</em> method<ul>\n<li>The <em>readRasters</em> method has several options. In this case, the <em>window</em> argument asks to get only some of the pixels, taking advantage of being a COG</li>\n<li>The <em>samples</em> parameter is the band number. The example file had two separate bands, so using <em>samples: [1]</em> would return the second band. All the desired bands can be passed into this parameter, so the result of <em>samples: [0, 1]</em> would be an array with two <em>Float32Array</em> elements, one for each band</li>\n</ul>\n</li>\n</ul>\n<p>What about the queries? This is the <em>network</em> tab on the developer tools:</p>\n<img src=\"{{ site.baseurl }}/images/other/cog/network_gtiffjs.png\"/>\n\n<p>We can see three downloads of the <em>out.tiff</em> file:</p>\n<ul>\n<li>The first one is the header for the main image.</li>\n<li>The second the header for the first pyramid. If the image had no pyramids, this wouldn&#39;t appear.</li>\n<li>The third is the data (note the different size).<ul>\n<li>If two different bands are to be retrieved, an extra request will appear. This is because I separated the tiff in separate bands, since they are data bands. If the file is a satellite with the rgb bands, keeping the three bands together would be more efficient.</li>\n</ul>\n</li>\n</ul>\n<p>Note that all the above has been transparent, which is really cool.</p>\n<h4 id=\"an-example-with-rgb\">An example with RGB</h4>\n<p>There&#39;s <a href=\"https://beta.observablehq.com/@tmcw/cloud-optimized-geotiffs\">a nice example at ObservableHQ</a> showing how to use an RGB GeoTIFF when it&#39;s cloud optimized.</p>\n<img src=\"{{ site.baseurl }}/images/other/cog/rgb.png\"/>\n\n<p>The <em>interesting</em> part is this one:</p>\n<p>{% highlight js %}\nreadImageData = async (image, options = {}) =&gt; {\nconst rasters = await image.readRasters(options);\nlet [r, g, b] = rasters;\nlet { width, height } = rasters;\nconst data = new Uint8ClampedArray(width _ height _ 4);\nfor (let i = 0; i &lt; r.length; i++) {\ndata[i * 4] = r[i];\ndata[i * 4 + 1] = g[i];\ndata[i * 4 + 2] = b[i];\ndata[i * 4 + 3] = r[i] == 0 ? 0 : 255;\n}\nreturn new ImageData(data, width, height);\n}\n{% endhighlight %}</p>\n<ul>\n<li>The r,g and b channels are separated in layers, but to draw the image, we want it in a Uint8ClampedArray</li>\n<li><em>context.putImageData(data, 0, 0);</em> is then the way to draw the data directly. Quite easy!</li>\n</ul>\n<h4 id=\"an-example-with-numerical-data\">An example with numerical data</h4>\n<p>In this case, the data in the GeoTIFF is a matrix with the numerical values (temperature in our case). The <em>sample.tiff</em> file is big, 26MB, so making the client to download all the data is not an option.</p>\n<p>I&#39;m using the marching squares algorithm to show the regions where the data is between two thresholds. You can see <a href=\"https://geoexamples.com/d3-raster-tools-docs/plot/isobands.html\">a tutorial here</a>.</p>\n<p><a href=\"https://bl.ocks.org/rveciana/9d9ef3282959a41c3e54cedb717bdddf\">Click here to see the working example</a>]\n{% highlight js %}</p>\n<p>(async function() {\nconst tiff = await GeoTIFF.fromUrl(&quot;sample.tiff&quot;);\nlet image = await tiff.getImage(3);\nlet rasterData = await image.readRasters({samples: [0]});\nrasterData = rasterData[0];</p>\n<pre><code>let data = new Array(image.getHeight());\nfor (let j = 0; j&lt;image.getHeight(); j++){\n    data[j] = new Array(image.getWidth());\n    for (let i = 0; i&lt;image.getWidth(); i++){\n      data[j][i] = rasterData[i + j*image.getWidth()];\n    }\n}\n\n\nlet intervals = [-2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nlet bands = rastertools.isobands(data, [0, 1, 0, 0, 0, 1], intervals);\n\nlet colorScale = d3.scaleSequential(d3.interpolateBuPu);\nlet canvas = d3.select(&quot;body&quot;).append(&quot;canvas&quot;)\n.attr(&quot;width&quot;, 680)\n.attr(&quot;height&quot;, 500);\n\nlet context = canvas.node().getContext(&quot;2d&quot;);\n\nlet path = d3.geoPath()\n             .context(context);\n\nbands.features.forEach(function(d, i) {\n  context.beginPath();\n  context.globalAlpha = 0.7;\n  context.fillStyle = colorScale((2 + intervals[i])/22);\n  path(d);\n  context.fill();</code></pre><p>});</p>\n<p>})();</p>\n<p>{% endhighlight %}</p>\n<p>The output will be like this (all the GeoTIFF coverage):</p>\n<img src=\"{{ site.baseurl }}/images/other/cog/js_example1.png\"/>\n\n<ul>\n<li>In this case, only the smallest overlay is used. Why? Because it&#39;s got about 350x350 pixels. This is enough to create the isobands. So, in case you don&#39;t know which overlay to take, this is a good orientation<ul>\n<li><em>tiff.getImage(3)</em> is the place where the overlay is chosen</li>\n</ul>\n</li>\n<li>The color scale and path drawing are using the usual d3js library tools. This is just an example and everything could be done with other tools, although d3js is still the best option</li>\n</ul>\n<p>Let&#39;s see another example using the image with the highest resolution, but downloading just a small part using the GeoTIFF capabilities.</p>\n<p><a href=\"https://bl.ocks.org/rveciana/5b844350ad418787d3ee402cc566fff9\">Click here to see the working example</a>]</p>\n<p>{% highlight js %}\n(async function() {\nlet origin = [700, 600];\nlet size = [500, 450];\nconst tiff = await GeoTIFF.fromUrl(&quot;/rveciana/raw/9d9ef3282959a41c3e54cedb717bdddf/sample.tiff&quot;);\nlet image = await tiff.getImage(0);\nlet rasterData = await image.readRasters({window: [origin[0], origin[1],\norigin[0] + size[0], origin[1] + size[1]],\nsamples: [0]});\nrasterData = rasterData[0];</p>\n<pre><code>let data = new Array(size[1]);\nfor (let j = 0; j&lt;size[1]; j++){\n    data[j] = new Array(size[0]);\n    for (let i = 0; i&lt;size[0]; i++){\n      data[j][i] = rasterData[i + j*size[0]];\n    }\n}\n\nlet intervals = [-2, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20];\nlet bands = rastertools.isobands(data, [0, 1, 0, 0, 0, 1], intervals);\n\nlet colorScale = d3.scaleSequential(d3.interpolateBuPu);\n\nlet canvas = d3.select(&quot;body&quot;).append(&quot;canvas&quot;)\n.attr(&quot;width&quot;, 680)\n.attr(&quot;height&quot;, 500);\n\nlet context = canvas.node().getContext(&quot;2d&quot;);\n\nlet path = d3.geoPath()\n             .context(context);\n\nbands.features.forEach(function(d, i) {\n  context.beginPath();\n  context.globalAlpha = 0.7;\n  context.fillStyle = colorScale((2 + intervals[i])/22);\n  path(d);\n  context.fill();</code></pre><p>});</p>\n<p>})();\n{% endhighlight %}</p>\n<p>The output will be like this (a zoomed portion of the previous example):</p>\n<img src=\"{{ site.baseurl }}/images/other/cog/js_example2.png\"/>\n\n<ul>\n<li><em>tiff.getImage(0)</em> will get the main image, not an overview. Using <em>tiff.getImage()</em> would give the same result</li>\n<li>Note that <em>image.getHeight()</em> and <em>image.getWidth()</em> have been changed by the width and height we want to show. That&#39;s, of course, because we want to get just a part of the image</li>\n<li>Now, the <em>window</em> parameter is used in <em>image.readRasters</em>, to select the portion we want to have. We set an offset (upper left pixel) and the size of the data we want</li>\n<li>This case is a little slow because it has many pixels and generating the isobands takes a bit. An alternative could be using an overview or drawing the pixels directly, since they are small enough</li>\n</ul>\n<h3 id=\"using-gdal-to-read-a-cog\">Using GDAL to read a COG</h3>\n<p>A COG can be read from the command line too! <a href=\"https://trac.osgeo.org/gdal/wiki/CloudOptimizedGeoTIFF\">This page</a> explains how. It&#39;s possible, for instance, to get a pixel value by using <a href=\"https://www.gdal.org/gdallocationinfo.html\">gdallocationinfo</a>:</p>\n<pre><code>gdallocationinfo --debug on /vsicurl/http://even.rouault.free.fr/gtiff_test/S2A_MSIL1C_20170102T111442_N0204_R137_T30TXT_20170102T111441_TCI_cloudoptimized_512.tif  5000 5000</code></pre><p>This will check the position 5000, 5000 on the defined file, which is located on a remote server. And will use the COG capabilities.</p>\n<p>On the <a href=\"https://trac.osgeo.org/gdal/wiki/CloudOptimizedGeoTIFF\">explanation page</a>, it&#39;s discussed that using overviews can be faster.</p>\n<p>To read a part of the array and store it into a tiff file, use gdal_translate:</p>\n<pre><code>gdal_translate --debug on \\\n/vsicurl/http://even.rouault.free.fr/gtiff_test/S2A_MSIL1C_20170102T111442_N0204_R137_T30TXT_20170102T111441_TCI_cloudoptimized_512.tif \\\n-srcwin 1024 1024 256 256 out.tif</code></pre><p>Again, this is discussed in the <a href=\"https://trac.osgeo.org/gdal/wiki/CloudOptimizedGeoTIFF\">explanation page</a>, comparing which type of file (with/without tiles or overviews) works better.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://www.cogeo.org/\">The COG web site</a></li>\n<li><a href=\"https://trac.osgeo.org/gdal/wiki/CloudOptimizedGeoTIFF\">The GDAL Cloud Optimized Geotiff web page</a></li>\n<li><a href=\"https://www.gdal.org/frmt_gtiff.html\">The GDAL GeoTIFF format manual page</a></li>\n<li><a href=\"https://www.gdal.org/gdaladdo.html\">The gdaladdo manual page</a></li>\n<li><a href=\"https://gis.stackexchange.com/a/255847/6503\">A StackOverflow answer tot he overviews format</a></li>\n<li><a href=\"https://raw.githubusercontent.com/OSGeo/gdal/master/gdal/swig/python/samples/validate_cloud_optimized_geotiff.py\">Cloud Optimized GeoTIFF validator</a></li>\n<li><a href=\"http://erouault.blogspot.com/2017/10/gdal-and-cloud-storage.html\">Blog post explaining the overviews problem</a></li>\n<li><a href=\"https://terracotta-python.readthedocs.io/en/latest/tutorials/aws.html\">Terracotta</a></li>\n<li><a href=\"https://geotiffjs.github.io/\">The geotiff.js site</a></li>\n<li><a href=\"https://beta.observablehq.com/@tmcw/cloud-optimized-geotiffs\">An ObservableHQ interactive example</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/9d9ef3282959a41c3e54cedb717bdddf\">First JavaScript example with data: Overviews</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/5b844350ad418787d3ee402cc566fff9\">Second JavaScript example with data: Region</a></li>\n<li><a href=\"https://geoexamples.com/d3-raster-tools-docs/plot/isobands.html\">Isobands tutorial</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Cloud Optimized GeoTIFF tutorial",
      "date": "2019-02-08T00:00:00.000Z",
      "teaser": "cog.png",
      "categories": "other",
      "tags": [
        "COG",
        "GDAL",
        "raster"
      ],
      "thumbnail": "/images/other/cog/twitter.png",
      "twitter-card": "summary",
      "description": "Creating and using COG files",
      "excerpt": "<p>Cloud Optimized GeoTIFF (COG) is simply an intelligent way to store a GeoTIFF file. Or, better defined in the <a href=\"https://www.cogeo.org/\">COG web site</a>:</p>",
      "meta": {
        "relativePath": "posts\\other\\2019-02-08-cog-tutorial.html",
        "createdAt": "2021-05-05T21:42:45.237Z",
        "lastModified": "2021-05-05T21:42:45.237Z",
        "size": 20658,
        "formattedSize": "20.2 KB"
      }
    },
    {
      "id": "posts\\other\\2018-04-30-mapping-with-gpujs",
      "contents": "<p><a href=\"http://gpu.rocks\">gpu.js</a> is a JavaScript Acceleration library for <a href=\"https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units\">GPGPU (General purpose computing on GPUs)</a> in Javascript. This means, basically, using the GPU instead of the CPU for the calculations, and coding in simple JavaScript.</p>\n<p>The library is awesome, but I found some issues trying to run my things, so I will try to put all my steps here, which will help me in first place.</p>\n<h2 id=\"including-the-library\">Including the library</h2>\n<p>From a regular web page, just include:</p>\n<p>{% highlight js %}</p>\n<script src=\"/path/to/js/gpu.min.js\"></script>\n\n<p>{% endhighlight %}</p>\n<p>then, initialize the library calling</p>\n<p>{% highlight js %}\nconst gpu = new GPU();\n{% endhighlight %}</p>\n<p>It&#39;s possible to pass to the GPU constructor the options:</p>\n<pre><code>{mode: &#39;gpu&#39;} or {mode: &#39;cpu&#39;}</code></pre><p>Setting it forces the use of the CPU, which can be nice for performance comparison.</p>\n<p>Using node, just install it with:</p>\n<pre><code>npm install gpu.js</code></pre><p>And require the module with:</p>\n<pre><code>const gpujs = require(&quot;gpu.js&quot;);\nconst gpu = new gpujs();</code></pre><h3 id=\"observablehq\">ObservableHQ</h3>\n<p><a href=\"https://observablehq.com\">ObservableHQ</a> is a new and awesome site to publish interactive examples. Requiring libraries is possible, but they have to be in UMD or AMD, which is not the case of <a href=\"http://gpu.rocks\">gpu.js</a>. A working solution is using the <a href=\"https://wzrd.in/\">wzrd</a> service</p>\n<p>{% highlight js %}\nGPU = require(&#39;<a href=\"https://wzrd.in/standalone/gpu.js&#39;\">https://wzrd.in/standalone/gpu.js&#39;</a>)\n{% endhighlight %}</p>\n<h2 id=\"first-working-example\">First working example</h2>\n<p>Let&#39;s see the simplest calculation using node:</p>\n<p>{% highlight js %}\nvar GPU = require(&quot;gpu.js&quot;);\nvar gpu = new GPU();</p>\n<p>var gpuKernel = gpu.createKernel(function() {\nreturn (this.thread.x + this.thread.y);\n}).setOutput([2,2]);</p>\n<p>console.info(gpuKernel());\n{% endhighlight %}</p>\n<ul>\n<li>After initializing the class, a kernel is created with <em>createKernel</em><ul>\n<li>The function that calculates every point is passed as the parameter\nThis function has the <em>this.thread.x, this.thread.y and this.thread.z</em> variables that return the position in the matrix to calculate</li>\n<li>In the <em>setOutput</em> method, the size of the matrix is set</li>\n</ul>\n</li>\n<li>Just call the created kernel to calculate the values</li>\n</ul>\n<p>Some more things about this functions:</p>\n<ul>\n<li><p>They can take array arguments</p>\n<p>function(points){...}</p>\n</li>\n</ul>\n<p>and call it</p>\n<p>gpuKernel([1,2,3])</p>\n<ul>\n<li>The size of the matrix is not accessible, unless a constant is declared</li>\n</ul>\n<p>{% highlight js %}\nvar gpuKernel = gpu.createKernel(function() {\nfor(let i = 0; i &lt;this.constants.xSize; i++){\n....\n}\nreturn (this.thread.x + this.thread.y);\n}).setOutput([2,2])\n.setConstants({xSize:2, ySize: 2});\n{% endhighlight %}</p>\n<ul>\n<li>The JavaScript operators that can be called inside the kernel functions are quite limited. <a href=\"https://github.com/gpujs/gpu.js?utm_source=recordnotfound.com#supported-math-functions\">Here&#39;s the list</a>. Also, no <em>console.log</em> and many other functions can go there.</li>\n</ul>\n<h2 id=\"drawing-directly-on-a-canvas\">Drawing directly on a Canvas</h2>\n<p>One of the points that make <a href=\"http://gpu.rocks\">gnu.js</a> really interesting is that the gpu function can draw directly on a Canvas element, which is what we need when mapping. Here&#39;s a simple example, to run directly on the browser:</p>\n<p>{% highlight js %}</p>\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<body>\n    <script src=\"gpu.min.js\"></script>\n<script>\nconst gpu = new GPU();\nconst render = gpu.createKernel(function() {\n    this.color(this.thread.x/500, this.thread.y/500, 0.4, 1);\n})\n  .setOutput([500, 500])\n  .setGraphical(true);\n\n<p>render();\nconst canvas = render.getCanvas();\ndocument.getElementsByTagName(&#39;body&#39;)[0].appendChild(canvas);</p>\n<p></script>\n{% endhighlight %}</p>\n<ul>\n<li>The method <em>setGraphical(true)</em> has to be called to make the kernel draw on a Canvas. The <em>setOutput</em> method will set now the Canvas size</li>\n<li>Later, get the Canvas with <em>getCanvas()</em></li>\n<li>Inside the function, set the <em>this.color</em> field with four values (rgba) from 0 to 1</li>\n<li>The y axis goes bottom to top! This is the opposite of the usual notation</li>\n</ul>\n<p>It&#39;s easy! The result looks like this:</p>\n<img src=\"{{ site.baseurl }}/images/other/gpujs-mapping/result1.png\"/>\n\n<h2 id=\"some-algorithms\">Some algorithms</h2>\n<h3 id=\"inverse-of-the-distance\">Inverse of the distance</h3>\n<p>In <a href=\"http://geoexamples.blogspot.com.es/2012/05/creating-grid-from-scattered-data-using.html\">one of the first posts of this blog</a> I made a python script for drawing a grid from a set of scattered points. Using gpu.js this can be done at real-time and see the results when changing the parameters, as in <a href=\"https://beta.observablehq.com/@rveciana/most-basic-gpu-js-example\">this ObservableHQ notebook</a></p>\n<p>The function to calculate the values is:\n{% highlight js %}\ninvDist = function(xpos, ypos, values, smoothing, colorScale) {\nvar nominator=0;\nvar denominator=0;\nvar flagDist = -1;\nfor (var i = 0; i &lt; this.constants.numPoints; i++) {\nvar dist = Math.sqrt((this.thread.x-xpos[i])<em>(this.thread.x-xpos[i])+\n(this.thread.y-ypos[i])</em>(this.thread.y-ypos[i]) + smoothing*smoothing);\nnominator=nominator+(values[i]/dist)\ndenominator=denominator+(1/dist)\nif(dist &lt; 0.1){\nflagDist = i;\n}</p>\n<pre><code>}\nvar value;\nif(flagDist &gt;= 0){\n    value = values[flagDist];\n} else {\n    value = nominator/denominator;\n}\n\nvar c = Math.ceil(255 * value);\nthis.color(colorScale[c*4]/255, colorScale[1 + c*4]/255, colorScale[2 + c*4]/255, 1);</code></pre><p>}\n{% endhighlight %}</p>\n<ul>\n<li>We only iterate the points, but not hte pixels, referenced by <em>this.thread.x</em> and <em>this.thread.y</em>, that will be done in parallel</li>\n</ul>\n<h3 id=\"hillshade\">Hillshade</h3>\n<p>The hillshade algorithm depends on the current pixel and the one around it, so it&#39;s possible <a href=\"https://beta.observablehq.com/@rveciana/shaded-relief-with-gpujs-and-d3js\">to use gpu.js easily</a>:</p>\n<p>{% highlight js %}\nfunction hillshade(demData) {\nlet azimuthrad = this.constants.azimuth _ 0.017453292519943295;\nlet altituderad = this.constants.angleAltitude _ 0.017453292519943295;</p>\n<p>let gradX, gradY;</p>\n<p>let yPos = this.constants.ySize - this.thread.y;</p>\n<p>if(this.thread.x==0) gradX = demData[yPos][this.thread.x+1] - demData[yPos][this.thread.x];\nelse if(this.thread.x==this.constants.xSize-1) gradX = demData[yPos][this.thread.x] - demData[this.thread.y][this.thread.x-1];\nelse gradX = (demData[yPos][this.thread.x+1] - demData[yPos][this.thread.x])/2 + (demData[yPos][this.thread.x] - demData[yPos][this.thread.x-1])/2;</p>\n<p>if(yPos==0) gradY = demData[yPos+1][this.thread.x] - demData[yPos][this.thread.x];\nelse if(yPos==this.constants.ySize-1) gradY = demData[yPos][this.thread.x] - demData[yPos-1][this.thread.x];\nelse gradY = (demData[yPos+1][this.thread.x] - demData[yPos][this.thread.x])/2 + (demData[yPos][this.thread.x] - demData[yPos-1][this.thread.x])/2;</p>\n<p>let slope = 3.141593/2 - Math.atan(Math.sqrt(gradX<em>gradX + gradY</em>gradY));\nlet aspect = Math.atan(-gradY, gradX); //should be atan2, but not working!</p>\n<p>let hs<em>value = Math.sin(altituderad) * Math.sin(slope) + Math.cos(altituderad) _ Math.cos(slope) \\</em> Math.cos(azimuthrad - aspect);</p>\n<p>this.color(hs_value, hs_value, hs_value, 0.1);</p>\n<p>}\n{% endhighlight %}</p>\n<ul>\n<li>If you compare it with the <a href=\"https://beta.observablehq.com/@rveciana/shaded-relief\">original hillshade example</a>, the main difference is that no <em>for loops</em> have to be used to calculate all the pixel values. Instead, the <em>this.thread.x</em> and <em>this.thread.y</em> variables are used, and all the points will be done at once.</li>\n<li>Note that <em>Math.atan</em> is used instead of <em>Math.atan2</em>. This is because the <em>GSLS</em> functions have to be used instead of the ones in JavaScript. All the available functions are <a href=\"http://www.shaderific.com/glsl-functions/\">referenced in their docs</a></li>\n</ul>\n<h2 id=\"using-it-with-leaflet\">Using it with Leaflet</h2>\n<p>Until now, the examples don&#39;t show an easy way to put a map on the result. A nice option is using Leaflet. Since gpu.js returns a canvas element and Leaflet has the possibility to show it, merging both is not difficult.\nI&#39;m using <a href=\"https://gist.github.com/Sumbera/11114288\">a small class called canvasOverlay</a>.</p>\n<p>As you can see in <a href=\"https://beta.observablehq.com/@rveciana/leaflet-gpu-js-canvas\">this observable</a>, the function to call from the canvasOverlay would be like:\n{% highlight js %}\ndrawCanvas = function(canvasOverlay, params) {</p>\n<p>let canvas = params.canvas;\nlet context = canvas.getContext(&#39;2d&#39;);\ncontext.globalAlpha = 0.5;</p>\n<p>let gl = params.canvas.getContext(&#39;webgl2&#39;, {premultipliedAlpha: false});\nlet gpu = new GPU({\ncanvas,\nwebGl: gl\n});\nlet krender = gpu.createKernel(function(xpos, ypos, values, colorScale) {</p>\n<pre><code>var nominator=0;\nvar denominator=0;\nvar flagDist = -1;\n\nfor (var i = 0; i &lt; this.constants.numPoints; i++) {\n\n    var dist = Math.sqrt((this.thread.x-xpos[i])*(this.thread.x-xpos[i])+\n        (this.thread.y-ypos[i])*(this.thread.y-ypos[i]) + 2);\n        nominator=nominator+(values[i]/dist)\n        denominator=denominator+(1/dist)\n        if(dist &lt; 0.1){\n            flagDist = i;\n        }\n\n}\nvar value;\nif(flagDist &gt;= 0){\n    value = values[flagDist];\n} else {\n    value = nominator/denominator;\n}\n\nvar c = Math.ceil(255 * value);\nthis.color(colorScale[c*4]/255, colorScale[1 + c*4]/255, colorScale[2 + c*4]/255, 1);</code></pre><p>})\n.setConstants({ numPoints: points.length })\n.setDebug(true)\n.setOutput([canvas.width, canvas.height])\n.setGraphical(true);</p>\n<p>let xPos = [];\nlet yPos = [];\nlet values = [];</p>\n<p>points.forEach(function(d){\nvalues.push(d.value);\nlet coords = canvasOverlay._map.latLngToContainerPoint(\nL.latLng(d.lat, d.lon));\nxPos.push(coords.x);\nyPos.push(coords.y);\n});</p>\n<p>krender(xPos, yPos, values, csImageData);\nlet result = krender.getCanvas();\ncontext.drawImage(result, 0, 0);\n}\n{% endhighlight %}</p>\n<ul>\n<li>Get the gpujs canvas with <em>getCanvas()</em></li>\n<li>Draw in in the leaflet canvas with <em>context.drawImage(result, 0, 0)</em></li>\n</ul>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"http://gpu.rocks\">The gpu.js web site</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units\">GPGPU Wikipedia page</a></li>\n<li><a href=\"https://observablehq.com\">ObservableHQ</a></li>\n<li><a href=\"https://wzrd.in/\">wzrd.in</a></li>\n<li><a href=\"https://hackernoon.com/introducing-gpu-js-gpu-accelerated-javascript-ba11a6069327\">generateMatrices source</a></li>\n<li><a href=\"https://github.com/gpujs/gpu.js?utm_source=recordnotfound.com#supported-math-functions\">List of gpu.js supported math functions</a></li>\n<li><a href=\"http://geoexamples.blogspot.com.es/2012/05/creating-grid-from-scattered-data-using.html\">Creating a grid from scattered data using inverse of the distance with python (gdal_grid approach)</a></li>\n<li><a href=\"https://gist.github.com/Sumbera/11114288\">canvasOverlay</a></li>\n<li><a href=\"http://www.shaderific.com/glsl-functions/\">GSLS functions reference</a></li>\n</ul>\n<h3 id=\"observablehq-notebooks\">ObservableHQ notebooks</h3>\n<ul>\n<li><a href=\"https://beta.observablehq.com/@rveciana/most-basic-gpu-js-example\">Most basic gpu.js example</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/gpu-js-check-execution-time\">Most basic gpu.js example with performance test</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/basic-gpu-js-canvas-example\">Basic gpu.js canvas example</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/inverse-of-the-distance-with-gpu-js\">Inverse of the distance with gpu.js</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/shaded-relief-with-gpujs-and-d3js\">Shaded relief with gpu.js and d3.js</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/shaded-relief-with-gpujs-and-d3js/2\">Shaded relief with gpu.js drawing the canvas directly</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/shaded-relief\">Shaded relief without gpu.js</a></li>\n<li><a href=\"https://beta.observablehq.com/@rveciana/leaflet-gpu-js-canvas\">Leaflet + inverse of the distance</a></li>\n</ul>\n<h3 id=\"blocks-with-some-of-the-examples\">Blocks with some of the examples</h3>\n<ul>\n<li><a href=\"https://bl.ocks.org/rveciana/c664dffd8b94f0598543958433d415f4\">Basic gpu.js canvas example</a></li>\n<li><a href=\"https://bl.ocks.org/rveciana/7419081f8931227769bae5255579e792\">Inverse of the distance with gpu.js</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Mapping with gpu.js",
      "date": "2018-04-30T00:00:00.000Z",
      "teaser": "gpujs-mapping.png",
      "categories": "other",
      "tags": [
        "GPU",
        "gpujs",
        "canvas"
      ],
      "thumbnail": "/images/other/gpujs-mapping/twitter.png",
      "twitter-card": "summary",
      "description": "Use the GPU to calculate and draw data layers",
      "excerpt": "<p><a href=\"http://gpu.rocks\">gpu.js</a> is a JavaScript Acceleration library for <a href=\"https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units\">GPGPU (General purpose computing on GPUs)</a> in Javascript. This means, basically, using the GPU instead of the CPU for the calculations, and coding in simple JavaScript.</p>",
      "meta": {
        "relativePath": "posts\\other\\2018-04-30-mapping-with-gpujs.html",
        "createdAt": "2021-05-05T21:42:45.236Z",
        "lastModified": "2021-05-05T21:42:45.236Z",
        "size": 11655,
        "formattedSize": "11.4 KB"
      }
    },
    {
      "id": "posts\\other\\2019-12-07-svg-path-properties-1",
      "contents": "<p>About three years ago now I made <a href=\"https://github.com/rveciana/svg-path-properties\">svg-path-properties</a> while thinking on <a href=\"http://bl.ocks.org/rveciana/bef48021e38a77a520109d2088bff9eb\">drawing labels on isolines on an HTML Canvas element</a>. I didn&#39;t expect that so many people would use it, so it was written quite fast, with some errors. So I re-wrote it in TypeScript, with better explanations and some examples will be added.</p>\n<h2 id=\"version-1\">Version 1.*</h2>\n<p>The new version is written in TypeScript, process that showed me several errors and potential bugs. The API is the same with the difference that now the class can be instantiated using <em>new</em>, while maintaining the former option too. Both options are valid now, although the first one should be used:</p>\n<pre><code>const properties = new path.svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);\nconst properties = path.svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);</code></pre><h2 id=\"how-to-initialize-the-library\">How to initialize the library</h2>\n<h3 id=\"using-it-with-node\">Using it with node</h3>\n<pre><code>const path = require(&quot;svg-path-properties&quot;);\nconst properties = new path.svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);</code></pre><h3 id=\"including-it-from-an-import\">Including it from an import:</h3>\n<pre><code>import { svgPathProperties } from &quot;svg-path-properties&quot;;\nconst properties = new svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);</code></pre><h3 id=\"including-the-script-in-the-browser\">Including the script in the browser</h3>\n<p>Once the script tag has been included,</p>\n<pre><code>const properties = new svgPathProperties.svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);</code></pre><h2 id=\"methods\">Methods</h2>\n<p>First, create ah instance with the svg path as a string:\nconst properties = new path.svgPathProperties(&quot;M0,100 Q50,-50 100,100 T200,100&quot;);</p>\n<p>The total length of the path can be retrieved:</p>\n<pre><code>const length = properties.getTotalLength();</code></pre><p>The position of the path at a given length (in an object of the shape {x: number, y:numebr}) is:</p>\n<pre><code>const point = properties.getPointAtLength(200);</code></pre><p>The tangent method gives the angle of the curve at a given length. Useful to draw labels. The object is the same as in the <em>getPointAtLength</em>:</p>\n<pre><code>const tangent = properties.getTangentAtLength(200);</code></pre><p><em>getPropertiesAtLength</em> returns the point position and the tangent at the same time. Returns an object like {x: number; y: number; tangentX: number; tangentY: number;}:</p>\n<pre><code>const allProperties = properties.getPropertiesAtLength(200);</code></pre><p>This last function returns an array with the different parts of the svg path. The curves can have many functions and it&#39;s difficult to see when is starting one or another. The methods returns an object like:</p>\n<pre><code>PartProperties {\n    start: Point;\n    end: Point;\n    length: number;\n    getPointAtLength(pos: number): Point;\n    getTangentAtLength(pos: number): Point;\n    getPropertiesAtLength(pos: number): PointProperties;\n}\n\nconst parts = properties.getParts();</code></pre><h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://github.com/rveciana/svg-path-properties\">svg-path-properties library</a></li>\n<li><a href=\"http://bl.ocks.org/rveciana/bef48021e38a77a520109d2088bff9eb\">Drawing labels on isolines on an HTML Canvas element</a></li>\n</ul>\n",
      "layout": "post",
      "title": "svg-path-properties 1.0.0",
      "date": "2019-12-07T00:00:00.000Z",
      "categories": "other",
      "tags": [
        "canvas",
        "svg"
      ],
      "teaser": "svg-path-properties.png",
      "description": "New version for the svg-path-properties library",
      "thumbnail": "/images/other/svg-path-properties/twitter.png",
      "twitter-card": "summary",
      "excerpt": "<p>About three years ago now I made <a href=\"https://github.com/rveciana/svg-path-properties\">svg-path-properties</a> while thinking on <a href=\"http://bl.ocks.org/rveciana/bef48021e38a77a520109d2088bff9eb\">drawing labels on isolines on an HTML Canvas element</a>. I didn&apos;t expect that so many people would use it, so it was written quite fast, with some errors. So I re-wrote it in TypeScript, with better explanations and some examples will be added.</p>",
      "meta": {
        "relativePath": "posts\\other\\2019-12-07-svg-path-properties-1.html",
        "createdAt": "2021-05-05T21:42:45.237Z",
        "lastModified": "2021-05-05T21:42:45.237Z",
        "size": 3388,
        "formattedSize": "3.3 KB"
      }
    },
    {
      "id": "posts\\other\\2019-09-01-testing-images-pixelmatch",
      "contents": "<p>Checking the result of image generation was quite difficult using JavaScript until pixelmatch appeared.</p>\n<p>To test <a href=\"https://github.com/rveciana/d3-composite-projections\">d3-composite-projections</a>, I used to copy the approach of the d3-geo-projection, which used <a href=\"https://imagemagick.org/index.php\">imagemagik</a> and now <a href=\"http://www.graphicsmagick.org/\">graphicsmagick</a>.</p>\n<p>I found that comparing if the expected image was like the libary stopped working if I changed the computer. Slightly different versions of the libraries create different outputs that are visually identically.</p>\n<h2 id=\"pixelmatch\">Pixelmatch</h2>\n<p>Pixelmatch describes itself as</p>\n<blockquote>\n<p>The smallest, simplest and fastest JavaScript pixel-level image comparison library.</p>\n</blockquote>\n<p>It&#39;s got a command line command and can be used from JavaScript on node or the browser, which is what makes it cool for testing.</p>\n<p>The function we need is really simple:</p>\n<pre><code>pixelmatch(img1, img2, output, width, height[, options])</code></pre><p>Where</p>\n<ul>\n<li>img1 and img2 are the images data to compare. We&#39;ll see how to read them</li>\n<li>output is the place to write the image data with the differences (or null, when it writes nothing)</li>\n<li>width and height are the dimensions of the three images</li>\n<li>Options have a threshold option that allows the images to be slightly different, which can be great in some cases.</li>\n</ul>\n<p>The output is the number of pixels that are different, so we&#39;ll check if it&#39;s 0 for testing.</p>\n<p>I&#39;m using tape to make the tests. Because d3js uses it and becase is simple and great.</p>\n<p>The function would be:</p>\n<p>{% highlight js %}\ntape(&quot;Checks the actual image outputs&quot;, async function(test) {\nprojections.forEach(async d =&gt; {\nawait render(d.name, d.topojson, d.field);\nlet img1 = PNG.sync.read(fs.readFileSync(&quot;test/output/&quot; + d.name + &quot;.png&quot;));\nlet img2 = PNG.sync.read(fs.readFileSync(&quot;test/samples/&quot; + d.name + &quot;.png&quot;));\nlet diff = pixelmatch(img1.data, img2.data, null, img1.width, img1.height, {threshold: 0.0});</p>\n<pre><code>    test.true(diff == 0, d.name + &quot; matches the sample file&quot;);\n\n   });\ntest.end();</code></pre><p>});\n{% endhighlight %}</p>\n<p>You can check <a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.2.3/test/render-test.js\">the whole script here</a></p>\n<ul>\n<li>Note that there are many files to test, so a <em>forEach</em> is used to check them</li>\n<li>We&#39;ll see the render function, but it does what it seems, rendering the image</li>\n<li>Note that PNG.sync.read is the method to get the generated images data</li>\n</ul>\n<p>To create the images using canvas, the <em>canvas</em> library is used, so:</p>\n<pre><code>npm install --save-dev canvas</code></pre><p>and require it using</p>\n<pre><code>{createCanvas} = require(&quot;canvas&quot;)</code></pre><p>Then, just get the context using</p>\n<pre><code>context = canvas.getContext(&quot;2d&quot;);</code></pre><p>and use it as in any browser example. Easy!</p>\n<p><a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.2.3/test/render-test.js\">This file</a> has the whole function.</p>\n<p>Since everything is in JavaScript, node can run all the tests, for functions or rendering from the same tape call:</p>\n<pre><code>tape &#39;test/*-test.js&#39;</code></pre><h2 id=\"using-imagemagik-or-graphicsmagik\">Using ImageMagik or GraphicsMagik</h2>\n<p>If you are curious about the old method, the basic part was using something like:</p>\n<pre><code>compare -metric rmse test/samples/projection.png test/output/projection.png</code></pre><p>This uses <a href=\"https://imagemagick.org/index.php\">ImageMagik</a> to output if the two images are identical. To run the creation, a <a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.0.2/test/compare-images\">bash script</a> is run. Of course, this makes it difficult to run it in Windows, for instance.</p>\n<p>Newer d3 versions use [GraphicsMagik][graphicsmagik] to do the same. The good thing is that the output is similar to pixelmatch. The bad one is that is a bash script anyway.</p>\n<pre><code>gm compare -type TrueColor -highlight-style assign -highlight-color red -file test/output/$i-difference.png test/output/$i.png img/$i.png;</code></pre><h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://github.com/mapbox/pixelmatch\">pixelmatch</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections\">d3-composite-projections</a></li>\n<li><a href=\"https://imagemagick.org/index.php\">ImageMagik</a></li>\n<li><a href=\"http://www.graphicsmagick.org/\">GraphicsMagick Image Processing System</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.0.2/test/compare-images\">ImageMagik bash script</a></li>\n<li><a href=\"https://github.com/substack/tape\">Tape testing</a></li>\n<li><a href=\"https://github.com/rveciana/d3-composite-projections/blob/v1.2.3/test/render-test.js\">Testing example</a></li>\n</ul>\n",
      "layout": "post",
      "title": "Testing generated images with pixelmatch",
      "date": "2019-09-01T00:00:00.000Z",
      "teaser": "d3-composite-projections.png",
      "categories": "other",
      "tags": [
        "testing"
      ],
      "thumbnail": "/images/d3/d3-composite-projections2/twitter.png",
      "twitter-card": "summary",
      "description": "Testing image generation with pixelmatch, a pure JavaScript library",
      "excerpt": "<p>Checking the result of image generation was quite difficult using JavaScript until pixelmatch appeared.</p>",
      "meta": {
        "relativePath": "posts\\other\\2019-09-01-testing-images-pixelmatch.html",
        "createdAt": "2021-05-05T21:42:45.237Z",
        "lastModified": "2021-05-05T21:42:45.237Z",
        "size": 4654,
        "formattedSize": "4.5 KB"
      }
    }
  ]
}
